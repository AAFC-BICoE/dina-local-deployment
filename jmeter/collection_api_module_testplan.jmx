<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Collection API Module Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Test Plan Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="username" elementType="Argument">
            <stringProp name="Argument.name">username</stringProp>
            <stringProp name="Argument.value">dina-admin</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">dina-admin</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="user_group" elementType="Argument">
            <stringProp name="Argument.name">user_group</stringProp>
            <stringProp name="Argument.value">aafc</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="invalid_uuid" elementType="Argument">
            <stringProp name="Argument.name">invalid_uuid</stringProp>
            <stringProp name="Argument.value">123e4567-e89b-12d3-a456-426614174000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Used to simulate a uuid that does not exist</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">Variables defined here are accessble via ${name}, such as ${user_group}, in any thread group</stringProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">dina.local</stringProp>
        <stringProp name="HTTPSampler.port">443</stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="TestPlan.comments">Default values for HTTP Samplers. Blanks fields in an HTTP sampler will be replaced with the following.</stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Token Controller" enabled="true">
          <stringProp name="TestPlan.comments">Generates an access token and stores it in the properties - accessible as ${__P(access_token)}</stringProp>
        </GenericController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Generate Access Token" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">grant_type=password&amp;username=${username}&amp;password=${password}&amp;client_id=dina-public&amp;scope=openid</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">keycloak.dina.local</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/auth/realms/dina/protocol/openid-connect/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Token Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Token Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="TestPlan.comments">Sets the returned acces token to the access_token variable - accessible via ${access_token}</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">props.put(&quot;access_token&quot;, vars.get(&quot;access_token&quot;));</stringProp>
              <stringProp name="TestPlan.comments">Sets the access_token variable to a property of the same name to allow use between thread groups - accessible now via ${__P(access_token)}</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Thread Group Request Headers" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__P(access_token)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/vnd.api+json</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">Required headers to perform API requests - These headers are not utilzied when refreshing the bearer token.</stringProp>
        </HeaderManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Attachment" enabled="true">
          <stringProp name="TestPlan.comments">Creates Attachment records to be utilized for relationship testings</stringProp>
        </GenericController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Attachment 1" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="File Creator" enabled="true">
              <stringProp name="TestPlan.comments">Creates a file to be uploaded to DINA</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def newFile = new File(&quot;./temp_1.png&quot;)
newFile.createNewFile()</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Upload FIle" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="./temp_1.png" elementType="HTTPFileArg">
                    <stringProp name="File.mimetype">image/png</stringProp>
                    <stringProp name="File.path">./temp_1.png</stringProp>
                    <stringProp name="File.paramname">file</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/objectstore-api/file/${user_group}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Uploaded File Identifer Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">uploaded_file_identifier_1</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.fileIdentifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Metadata for Uploaded File" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;type&quot;: &quot;metadata&quot;,&#xd;
		&quot;attributes&quot;: {&#xd;
			&quot;group&quot;: &quot;${user_group}&quot;,&#xd;
			&quot;bucket&quot;: &quot;${user_group}&quot;,&#xd;
			&quot;fileIdentifier&quot;: &quot;${uploaded_file_identifier_1}&quot;&#xd;
		}&#xd;
	}&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/objectstore-api/metadata</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Metadata UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">attachment_uuid_1</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">props.put(&quot;attachment_uuid_1&quot;, vars.get(&quot;attachment_uuid_1&quot;));</stringProp>
                <stringProp name="TestPlan.comments">Sets the attachment_uuid variable to a property of the same name to allow use between thread groups - accessible now via ${__P(attachment_uuid)}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="File Remover" enabled="true">
              <stringProp name="TestPlan.comments">Removed the file created in File Creator as it has already been uploaded to DINA</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def newFile = new File(&quot;./temp_1.png&quot;)
newFile.delete() </stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Attachment 2" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="File Creator" enabled="true">
              <stringProp name="TestPlan.comments">Creates a file to be uploaded to DINA</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def newFile = new File(&quot;./temp_2.png&quot;)
newFile.createNewFile()</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Upload FIle" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="./temp_2.png" elementType="HTTPFileArg">
                    <stringProp name="File.mimetype">image/png</stringProp>
                    <stringProp name="File.path">./temp_2.png</stringProp>
                    <stringProp name="File.paramname">file</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/objectstore-api/file/${user_group}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Uploaded File Identifer Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">uploaded_file_identifier_2</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.fileIdentifier</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Metadata for Uploaded File" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;type&quot;: &quot;metadata&quot;,&#xd;
		&quot;attributes&quot;: {&#xd;
			&quot;group&quot;: &quot;${user_group}&quot;,&#xd;
			&quot;bucket&quot;: &quot;${user_group}&quot;,&#xd;
			&quot;fileIdentifier&quot;: &quot;${uploaded_file_identifier_2}&quot;&#xd;
		}&#xd;
	}&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/objectstore-api/metadata</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Metadata UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">attachment_uuid_2</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">props.put(&quot;attachment_uuid_2&quot;, vars.get(&quot;attachment_uuid_2&quot;));</stringProp>
                <stringProp name="TestPlan.comments">Sets the attachment_uuid variable to a property of the same name to allow use between thread groups - accessible now via ${__P(attachment_uuid)}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="File Remover" enabled="true">
              <stringProp name="TestPlan.comments">Removed the file created in File Creator as it has already been uploaded to DINA</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def newFile = new File(&quot;./temp_2.png&quot;)
newFile.delete() </stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Persons" enabled="true">
          <stringProp name="TestPlan.comments">Creates Person records to be utilized for relationship testings</stringProp>
        </GenericController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Set Random Variables" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def ctx = org.apache.jmeter.threads.JMeterContextService.getContext()

ctx.getVariables().put(&quot;name_1&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_2&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Person 1" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Person " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;type&quot;: &quot;person&quot;,&#xd;
		&quot;attributes&quot;: {&#xd;
			&quot;displayName&quot;: &quot;${name_1}&quot;,&#xd;
			&quot;email&quot;: &quot;${name_1}@gmail.ca&quot;&#xd;
		}&#xd;
	}&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/agent-api/person</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Person UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">person_uuid_1</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">props.put(&quot;person_uuid_1&quot;, vars.get(&quot;person_uuid_1&quot;));</stringProp>
                <stringProp name="TestPlan.comments">Sets the attachment_uuid variable to a property of the same name to allow use between thread groups - accessible now via ${__P(attachment_uuid)}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Person 2" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Person " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;type&quot;: &quot;person&quot;,&#xd;
		&quot;attributes&quot;: {&#xd;
			&quot;displayName&quot;: &quot;${name_2}&quot;,&#xd;
			&quot;email&quot;: &quot;${name_2}@gmail.ca&quot;&#xd;
		}&#xd;
	}&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/agent-api/person</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Person UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">person_uuid_2</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">props.put(&quot;person_uuid_2&quot;, vars.get(&quot;person_uuid_2&quot;));</stringProp>
                <stringProp name="TestPlan.comments">Sets the attachment_uuid variable to a property of the same name to allow use between thread groups - accessible now via ${__P(attachment_uuid)}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Collection Managed Attribute End2End Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="TestPlan.comments">Thread group for testing the &apos;managed-attribute&apos; endpoint</stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Collection Managed Attribute Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="vocabularyElementType_1" elementType="Argument">
              <stringProp name="Argument.name">vocabularyElementType_1</stringProp>
              <stringProp name="Argument.value">STRING</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="vocabularyElementType_2" elementType="Argument">
              <stringProp name="Argument.name">vocabularyElementType_2</stringProp>
              <stringProp name="Argument.value">INTEGER</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="vocabularyElementType_3" elementType="Argument">
              <stringProp name="Argument.name">vocabularyElementType_3</stringProp>
              <stringProp name="Argument.value">DATE</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="vocabularyElementType_4" elementType="Argument">
              <stringProp name="Argument.name">vocabularyElementType_4</stringProp>
              <stringProp name="Argument.value">BOOL</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="managedAttributeComponent_1" elementType="Argument">
              <stringProp name="Argument.name">managedAttributeComponent_1</stringProp>
              <stringProp name="Argument.value">COLLECTING_EVENT</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="managedAttributeComponent_2" elementType="Argument">
              <stringProp name="Argument.name">managedAttributeComponent_2</stringProp>
              <stringProp name="Argument.value">MATERIAL_SAMPLE</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="managedAttributeComponent_3" elementType="Argument">
              <stringProp name="Argument.name">managedAttributeComponent_3</stringProp>
              <stringProp name="Argument.value">DETERMINATION</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="managedAttributeComponent_4" elementType="Argument">
              <stringProp name="Argument.name">managedAttributeComponent_4</stringProp>
              <stringProp name="Argument.value">ASSEMBLAGE</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multilingualDescription_1" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_1</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;en&quot;,&quot;desc&quot;:&quot;desc_1&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multilingualDescription_2" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_2</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;en&quot;,&quot;desc&quot;:&quot;desc_2&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multilingualDescription_3" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_3</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;en&quot;,&quot;desc&quot;:&quot;desc_3&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multilingualDescription_4" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_4</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;en&quot;,&quot;desc&quot;:&quot;desc_4&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="acceptedValues_1" elementType="Argument">
              <stringProp name="Argument.name">acceptedValues_1</stringProp>
              <stringProp name="Argument.value">[&quot;Lorem&quot;, &quot;Ipsum&quot;, &quot;Holy&quot;, &quot;Text&quot;]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="acceptedValues_2" elementType="Argument">
              <stringProp name="Argument.name">acceptedValues_2</stringProp>
              <stringProp name="Argument.value">[1, 2]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="acceptedValues_3" elementType="Argument">
              <stringProp name="Argument.name">acceptedValues_3</stringProp>
              <stringProp name="Argument.value">[&quot;2019-02-06&quot;, &quot;2020-02-06&quot;]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="acceptedValues_4" elementType="Argument">
              <stringProp name="Argument.name">acceptedValues_4</stringProp>
              <stringProp name="Argument.value">[true, false]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Thread Group Request Headers" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__P(access_token)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/vnd.api+json</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">Required headers to perform API requests</stringProp>
        </HeaderManager>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Token Controller" enabled="true">
          <stringProp name="TestPlan.comments">Runs the Token Controller in the setUp thread group to refresh the access token</stringProp>
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
            <stringProp name="1506430348">setUp Thread Group</stringProp>
            <stringProp name="52452451">Token Controller</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Collection Managed Attribute setUp" enabled="true">
            <stringProp name="TestPlan.comments">Sets random variables and creates relationship entities required for Collection Managed Attribute testing</stringProp>
          </GenericController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Set Random Variables" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def ctx = org.apache.jmeter.threads.JMeterContextService.getContext()

ctx.getVariables().put(&quot;name_1&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_2&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_3&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_4&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)

ctx.getVariables().put(&quot;key_1&quot;, ctx.getVariables().get(&quot;name_1&quot;))
ctx.getVariables().put(&quot;key_2&quot;, ctx.getVariables().get(&quot;name_2&quot;))
ctx.getVariables().put(&quot;key_3&quot;, ctx.getVariables().get(&quot;name_3&quot;))
ctx.getVariables().put(&quot;key_4&quot;, ctx.getVariables().get(&quot;name_4&quot;))

ctx.getVariables().put(&quot;collecting-event_managed-attribute_name&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;material-sample_managed-attribute_name&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Collection Managed Attribute" enabled="true">
            <stringProp name="TestPlan.comments">Creates a basic Collection Managed Attribute record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Basic Managed Attribute" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;managed-attribute&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_1}&quot;,&#xd;
      &quot;vocabularyElementType&quot;: &quot;${vocabularyElementType_1}&quot;,&#xd;
      &quot;managedAttributeComponent&quot;: &quot;${managedAttributeComponent_1}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Basic Collection Managed Attribute UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">basic_collection_managed_attribute_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Basic Collection Managed Attribute" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the basic Collection Managed Attribute have been created and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Basic Collection Managed Attribute Creation" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute/${basic_collection_managed_attribute_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Created Basic Collection Managed Attribute - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_1}&quot;
assert attr.key == &quot;${name_1}&quot;
assert attr.vocabularyElementType == &quot;${vocabularyElementType_1}&quot;
assert attr.managedAttributeComponent == &quot;${managedAttributeComponent_1}&quot;
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Collection Managed Attribute" enabled="true">
            <stringProp name="TestPlan.comments">Creates a verbose Collection Managed Attribute record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Verbose Managed Attribute" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;managed-attribute&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_2}&quot;,&#xd;
      &quot;vocabularyElementType&quot;: &quot;${vocabularyElementType_2}&quot;,&#xd;
      &quot;managedAttributeComponent&quot;: &quot;${managedAttributeComponent_2}&quot;,&#xd;
      &quot;acceptedValues&quot;: ${acceptedValues_2},&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_2}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Verbose Collection Managed Attribute UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">verbose_collection_managed_attribute_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Verbose Collection Managed Attribute" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the verbose Collection Managed Attribute have been created and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Verbose Collection Managed Attribute Creation" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute/${verbose_collection_managed_attribute_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Created Verbose Collection Managed Attribute - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_2}&quot;
assert attr.key == &quot;${name_2}&quot;
assert attr.vocabularyElementType == &quot;${vocabularyElementType_2}&quot;
assert attr.managedAttributeComponent == &quot;${managedAttributeComponent_2}&quot;
assert attr.acceptedValues.toString() == &quot;${acceptedValues_2}&quot;
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="COLLECTING_EVENT Collection Managed Attribute" enabled="true">
            <stringProp name="TestPlan.comments">Creates a COLLECTING_EVENT Collection Managed Attribute record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Basic Collecting Event" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;managed-attribute&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${collecting-event_managed-attribute_name}&quot;,&#xd;
      &quot;vocabularyElementType&quot;: &quot;STRING&quot;,&#xd;
      &quot;managedAttributeComponent&quot;: &quot;COLLECTING_EVENT&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Basic Collection Managed Attribute UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">basic_collecting_event_collection_managed_attribute_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate COLLECTING_EVENT Collection Managed Attribute" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the COLLECTING_EVENT Collection Managed Attribute have been created and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate COLLECTING_EVENT Collection Managed Attribute Creation" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute/${basic_collecting_event_collection_managed_attribute_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Created COLLECTING_EVENT Collection Managed Attribute - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${collecting-event_managed-attribute_name}&quot;
assert attr.key == &quot;${collecting-event_managed-attribute_name}&quot;
assert attr.vocabularyElementType == &quot;STRING&quot;
assert attr.managedAttributeComponent == &quot;COLLECTING_EVENT&quot;
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MATERIAL_SAMPLE Collection Managed Attribute" enabled="true">
            <stringProp name="TestPlan.comments">Validates that the fields of the MATERIAL_SAMPLE Collection Managed Attribute have been created and stored correctly</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Basic Material Sample" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;managed-attribute&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${material-sample_managed-attribute_name}&quot;,&#xd;
      &quot;vocabularyElementType&quot;: &quot;STRING&quot;,&#xd;
      &quot;managedAttributeComponent&quot;: &quot;MATERIAL_SAMPLE&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Basic Collection Managed Attribute UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">basic_material-sample_collection_managed_attribute_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate MATERIAL_SAMPLE Collection Managed Attribute" enabled="true">
              <stringProp name="TestPlan.comments">Retrieves the basic record that was created and asserts all values are set as expected.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate MATERIAL_SAMPLE Collection Managed Attribute Creation" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute/${basic_material-sample_collection_managed_attribute_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Created MATERIAL_SAMPLE Collection Managed Attribute - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${material-sample_managed-attribute_name}&quot;
assert attr.key == &quot;${material-sample_managed-attribute_name}&quot;
assert attr.vocabularyElementType == &quot;STRING&quot;
assert attr.managedAttributeComponent == &quot;MATERIAL_SAMPLE&quot;
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Collection Managed Attribute w/ Empty Attributes" enabled="true">
            <stringProp name="TestPlan.comments">Creates a Collection Managed Attribute without any attributes specified - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Collection Managed Attribute w/ Empty Attributes" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;managed-attribute&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - Error 403" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;403&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Collection Managed Attribute w/ Only User Group" enabled="true">
            <stringProp name="TestPlan.comments">Creates a Collection Managed Attribute with only user group specified - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Collection Managed Attribute w/ Only User Group" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;managed-attribute&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - Error 422" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;422&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Collection Managed Attribute w/ Incorrect Type" enabled="true">
            <stringProp name="TestPlan.comments">Creates a Collection Managed Attribute the incorrect type specified - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Collection Managed Attribute w/ Incorrect Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;material-sample&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_1}&quot;,&#xd;
      &quot;vocabularyElementType&quot;: &quot;${vocabularyElementType_1}&quot;,&#xd;
      &quot;managedAttributeComponent&quot;: &quot;${managedAttributeComponent_1}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - Error 400" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;400&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Collection Managed Attribute" enabled="true">
            <stringProp name="TestPlan.comments">Updates the basic Collection Managed Attribute record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Basic Managed Attribute" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;managed-attribute&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_3}&quot;,&#xd;
      &quot;key&quot;: &quot;${key_3}&quot;,&#xd;
      &quot;vocabularyElementType&quot;: &quot;${vocabularyElementType_3}&quot;,&#xd;
      &quot;managedAttributeComponent&quot;: &quot;${managedAttributeComponent_3}&quot;,&#xd;
      &quot;acceptedValues&quot;: ${acceptedValues_3},&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_3}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute/${basic_collection_managed_attribute_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Basic Collection Managed Attribute" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the basic Collection Managed Attribute have been updated and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Basic Collection Managed Attribute Updated" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute/${basic_collection_managed_attribute_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Updated Basic Collection Managed Attribute - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_1}&quot;
assert attr.key == &quot;${name_1}&quot;
assert attr.vocabularyElementType == &quot;${vocabularyElementType_3}&quot;
assert attr.managedAttributeComponent == &quot;${managedAttributeComponent_3}&quot;
assert attr.acceptedValues == ${acceptedValues_3}
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Collection Managed Attribute" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose Collection Managed Attribute record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Verbose Managed Attribute" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;managed-attribute&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_4}&quot;,&#xd;
      &quot;key&quot;: &quot;${key_4}&quot;,&#xd;
      &quot;vocabularyElementType&quot;: &quot;${vocabularyElementType_4}&quot;,&#xd;
      &quot;managedAttributeComponent&quot;: &quot;${managedAttributeComponent_3}&quot;,&#xd;
      &quot;acceptedValues&quot;: ${acceptedValues_4},&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_4}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute/${verbose_collection_managed_attribute_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Verbose Collection Managed Attribute" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the verbose Collection Managed Attribute have been updated and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Verbose Collection Managed Attribute Updated" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute/${verbose_collection_managed_attribute_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Updated Verbose Collection Managed Attribute - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_2}&quot;
assert attr.key == &quot;${name_2}&quot;
assert attr.vocabularyElementType == &quot;${vocabularyElementType_4}&quot;
assert attr.managedAttributeComponent == &quot;${managedAttributeComponent_3}&quot;
assert attr.acceptedValues.toString() == &quot;${acceptedValues_4}&quot;
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Collection Managed Attribute w/ Empty Body" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose Collection Managed Attribute record w/ an empty body request</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Verbose Managed Attribute w/ Empty Body" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;managed-attribute&quot;,&#xd;
    &quot;attributes&quot;: {}&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute/${verbose_collection_managed_attribute_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
              <stringProp name="TestPlan.comments">Module Validate Verbose Collection Managed Attribute</stringProp>
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="-219911028">Collection Managed Attribute End2End Thread Group</stringProp>
                <stringProp name="-1754979095">Update</stringProp>
                <stringProp name="116994103">Verbose Collection Managed Attribute</stringProp>
                <stringProp name="1956072673">Validate Verbose Collection Managed Attribute</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Collection Managed Attribute w/ Invalid UUID" enabled="true">
            <stringProp name="TestPlan.comments">Updates a Collection Managed Attribute at a UUID that does not correspond to any Collection Managed Attribute - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Collection Managed Attribute w/ Invalid UUID" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;managed-attribute&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_3}&quot;,&#xd;
      &quot;key&quot;: &quot;${key_3}&quot;,&#xd;
      &quot;vocabularyElementType&quot;: &quot;${vocabularyElementType_3}&quot;,&#xd;
      &quot;managedAttributeComponent&quot;: &quot;${managedAttributeComponent_3}&quot;,&#xd;
      &quot;acceptedValues&quot;: ${acceptedValues_3},&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_3}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MATERIAL_SAMPLE Collection Managed Attribute" enabled="true">
            <stringProp name="TestPlan.comments">Removes the MATERIAL_SAMPLE Collection Managed Attribute record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove MATERIAL_SAMPLE Collection Managed Attribute" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute/${basic_material-sample_collection_managed_attribute_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate MATERIAL_SAMPLE Collection Managed Attribute Removed" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the MATERIAL_SAMPLE Collection Managed Attribute has been removed</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retireve and Validate MATERIAL_SAMPLE Collection Managed Attribute Removed" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute/${basic_material-sample_collection_managed_attribute_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - Error 410" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;410&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="COLLECTING_EVENT Collection Managed Attribute" enabled="true">
            <stringProp name="TestPlan.comments">Removes the COLLECTING_EVENT Collection Managed Attribute record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove COLLECTING_EVENT Collection Managed Attribute" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute/${basic_collecting_event_collection_managed_attribute_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate COLLECTING_EVENT Collection Managed Attribute Removed" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the COLLECTING_EVENT Collection Managed Attribute has been removed</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate COLLECTING_EVENT Collection Managed Attribute Removed" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute/${basic_collecting_event_collection_managed_attribute_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - Error 410" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;410&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Collection Managed Attribute" enabled="true">
            <stringProp name="TestPlan.comments">Removes the verbose Collection Managed Attribute record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Verbose Collection Managed Attribute" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute/${verbose_collection_managed_attribute_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Delete Verbose" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the verbose Collection Managed Attribute has been removed</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Verbose Collection Managed Attribute Removed" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute/${verbose_collection_managed_attribute_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - Error 410" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;410&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Collection Managed Attribute" enabled="true">
            <stringProp name="TestPlan.comments">Removes the basic Collection Managed Attribute record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Basic Collection Managed Attribute" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute/${basic_collection_managed_attribute_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Basic Collection Managed Attribute" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the basic Collection Managed Attribute has been removed</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Basic Collection Managed Attribute Removed" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute/${basic_collection_managed_attribute_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - Error 410" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;410&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Collection Managed Attribute w/ Invalid UUID" enabled="true">
            <stringProp name="TestPlan.comments">Removes a Collection Managed Attribute record at a UUID that does not correspond to any Collection Managed Attribute - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Collection Managed Attribute w/ Invalid UUID" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Preparation Type End2End Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="TestPlan.comments">Thread group for testing the &apos;preparation-type&apos; endpoint</stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Preparation Type Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="multilingualDescription_1" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_1</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;en&quot;,&quot;desc&quot;:&quot;desc_1&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multilingualDescription_2" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_2</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;en&quot;,&quot;desc&quot;:&quot;desc_2&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multilingualDescription_3" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_3</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;fr&quot;,&quot;desc&quot;:&quot;desc_3&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multilingualDescription_4" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_4</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;fr&quot;,&quot;desc&quot;:&quot;desc_4&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Thread Group Request Headers" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__P(access_token)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/vnd.api+json</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">Required headers to perform API requests</stringProp>
        </HeaderManager>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Token Controller" enabled="true">
          <stringProp name="TestPlan.comments">Runs the Token Controller in the setUp thread group to refresh the access token</stringProp>
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
            <stringProp name="1506430348">setUp Thread Group</stringProp>
            <stringProp name="52452451">Token Controller</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Preparation Type setUp" enabled="true">
            <stringProp name="TestPlan.comments">Sets random variables and creates relationship entities required for Preparation Type testing</stringProp>
          </GenericController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Set Random Variables" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def ctx = org.apache.jmeter.threads.JMeterContextService.getContext()

ctx.getVariables().put(&quot;name_1&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_2&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_3&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_4&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Preparation Type" enabled="true">
            <stringProp name="TestPlan.comments">Creates a basic Preparation Type record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Basic Preparation Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;preparation-type&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    	 &quot;name&quot; : &quot;${name_1}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-type</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Basic Preparation Type UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">basic_preparation-type_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Basic Preparation Type" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the basic Preparation Type have been created and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Basic Preparation Type Creation" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/preparation-type/${basic_preparation-type_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Created Basic Preparation Type - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_1}&quot;
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Preparation Type" enabled="true">
            <stringProp name="TestPlan.comments">Creates a verbose Preparation Type record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Verbose Preparation Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;preparation-type&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    	 &quot;name&quot; : &quot;${name_2}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_2}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-type</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Verbose Preparation Type UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">verbose_preparation-type_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Verbose Preparation Type" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the verbose Preparation Type have been created and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Verbose Preparation Type Creation" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/preparation-type/${verbose_preparation-type_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Created Verbose Preparation Type - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_2}&quot;
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Created Verbose Preparation Type - Multilingual Description Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Asserting with groovy script appears to have issue so will assert multilingual description here</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.multilingualDescription</stringProp>
                  <stringProp name="EXPECTED_VALUE">${multilingualDescription_2}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Preparation Type w/ Empty Attributes" enabled="true">
            <stringProp name="TestPlan.comments">Creates a Preparation Type without any attributes specified - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Preparation Type w/ Empty Attributes" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;preparation-type&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-type</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 403 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;403&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Preparation Type w/ Only User Group" enabled="true">
            <stringProp name="TestPlan.comments">Creates a Preparation Type with only user group specified - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Preparation Type w/ Only User Group" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;preparation-type&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-type</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 422 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;422&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Preparation Type w/ Incorrect Type" enabled="true">
            <stringProp name="TestPlan.comments">Creates a Preparation Type the incorrect type specified - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Preparation Type w/ Incorrect Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;material-sample&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    	 &quot;name&quot; : &quot;${name_1}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-type</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 400 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;400&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Preparation Type" enabled="true">
            <stringProp name="TestPlan.comments">Updates the basic record and asserts that all fields are set as intended.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Basic Preparation Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;preparation-type&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    	 &quot;name&quot; : &quot;${name_3}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_3}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-type/${basic_preparation-type_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Basic Preparation Type" enabled="true">
              <stringProp name="TestPlan.comments">Retrieves the basic record that was updated and asserts all values are set as expected</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Basic Preparation Type Updated" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/preparation-type/${basic_preparation-type_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Updated Basic Preparation Type - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_3}&quot;
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Updated Basic Preparation Type - Multilingual Description Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Asserting with groovy script appears to have issue so will assert multilingual description here</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.multilingualDescription</stringProp>
                  <stringProp name="EXPECTED_VALUE">${multilingualDescription_3}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Verbose" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose record and asserts that all fields are set as intended.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Verbose Preparation Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;preparation-type&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    	 &quot;name&quot;: &quot;${name_4}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_4}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-type/${verbose_preparation-type_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Verbose Preparation Type" enabled="true">
              <stringProp name="TestPlan.comments">Retrieves the verbose record that was updated and asserts all values are set as expected</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Verbose Preparation Type Updated" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/preparation-type/${verbose_preparation-type_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Updated Verbose Preparation Type - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_4}&quot;
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Updated Verbose Preparation Type - Multilingual Description Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Asserting with groovy script appears to have issue so will assert multilingual description here</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.multilingualDescription</stringProp>
                  <stringProp name="EXPECTED_VALUE">${multilingualDescription_4}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Preparation Type w/ Empty Body" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose record while providing no fields to update and asserts that no changes were made.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Verbose Preparation Type w/ Empty Body" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;preparation-type&quot;,&#xd;
    &quot;attributes&quot;: {}&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-type/${verbose_preparation-type_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Validate Verbose Preparation Type" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="-256151134">Preparation Type End2End Thread Group</stringProp>
                <stringProp name="-1754979095">Update</stringProp>
                <stringProp name="1754650923">Update Verbose</stringProp>
                <stringProp name="-363773429">Validate Verbose Preparation Type</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Preparation Type w/ Invalid UUID" enabled="true">
            <stringProp name="TestPlan.comments">Attempts to update a record with an invalid UUID specified and asserts the expected error.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Preparation Type w/ Invalid UUID" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;preparation-type&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    	 &quot;name&quot; : &quot;${name_3}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_3}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-type/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Preparation Type" enabled="true">
            <stringProp name="TestPlan.comments">Deletes the verbose record and asserts that the record was properly removed.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Verbose Preparation Type" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-type/${verbose_preparation-type_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Delete Verbose" enabled="true">
              <stringProp name="TestPlan.comments">Attempts to retrieve the deleted verbose record and asserts that the correct response is returned.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Verbose Preparation Type Removed" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/preparation-type/${verbose_preparation-type_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - Error 410" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;410&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Preparation Type" enabled="true">
            <stringProp name="TestPlan.comments">Deletes the basic record and asserts that the record was properly removed.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Basic Preparation Type" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-type/${basic_preparation-type_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Delete Basic" enabled="true">
              <stringProp name="TestPlan.comments">Attempts to retrieve the deleted basic record and asserts that the correct response is returned.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Basic Preparation Type Removed" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/preparation-type/${basic_preparation-type_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 410 Error" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;410&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Preparation Type w/ Invalid UUID" enabled="true">
            <stringProp name="TestPlan.comments">Attempts to delete a record with an invalid UUID specified and asserts the expected error.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Preparation Type w/ Invalid UUID" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-type/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Preparation Method End2End Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="TestPlan.comments">Thread group for testing the &apos;preparation-method&apos; endpoint</stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Preparation Method Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="multilingualDescription_1" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_1</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;en&quot;,&quot;desc&quot;:&quot;desc_1&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multilingualDescription_2" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_2</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;en&quot;,&quot;desc&quot;:&quot;desc_2&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multilingualDescription_3" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_3</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;fr&quot;,&quot;desc&quot;:&quot;desc_3&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multilingualDescription_4" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_4</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;fr&quot;,&quot;desc&quot;:&quot;desc_4&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Thread Group Request Headers" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__P(access_token)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/vnd.api+json</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">Required headers to perform API requests</stringProp>
        </HeaderManager>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Token Controller" enabled="true">
          <stringProp name="TestPlan.comments">Runs the Token Controller in the setUp thread group to refresh the access token</stringProp>
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
            <stringProp name="1506430348">setUp Thread Group</stringProp>
            <stringProp name="52452451">Token Controller</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Preparation Method setUp" enabled="true">
            <stringProp name="TestPlan.comments">Sets random variables and creates relationship entities required for Preparation Method testing</stringProp>
          </GenericController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Set Random Variables" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def ctx = org.apache.jmeter.threads.JMeterContextService.getContext()

ctx.getVariables().put(&quot;name_1&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_2&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_3&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_4&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Preparation Method" enabled="true">
            <stringProp name="TestPlan.comments">Creates a basic Preparation Method record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Basic Preparation Method" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;preparation-method&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_1}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-method</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Basic Preparation Method UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">basic_preparation-method_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Basic Preparation Method" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the basic Preparation Method have been created and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Basic Preparation Method Creation" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/preparation-method/${basic_preparation-method_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Created Basic Preparation Method - Generla Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_1}&quot;
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Preparation Method" enabled="true">
            <stringProp name="TestPlan.comments">Creates a verbose Preparation Method record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Verbose Preparation Method" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;preparation-method&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_2}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_2}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-method</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Verbose Preparation Method UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">verbose_preparation-method_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Verbose Preparation Method" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the verbose Preparation Method have been created and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Verbose Preparation Method Creation" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/preparation-method/${verbose_preparation-method_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Created Verbose Preparation Method - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_2}&quot;
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Created Verbose Preparation Method - Multilingual Description Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Map data conflicts with groovy script syntax and will be asserted separately</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.multilingualDescription</stringProp>
                  <stringProp name="EXPECTED_VALUE">${multilingualDescription_2}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Preparation Method w/ Empty Attributes" enabled="true">
            <stringProp name="TestPlan.comments">Creates a Preparation Method without any attributes specified - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Preparation Method w/ Empty Attributes" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;preparation-method&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-method</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 403 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;403&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Preparation Method w/ Only User Group" enabled="true">
            <stringProp name="TestPlan.comments">Creates a Preparation Method with only user group specified - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Preparation Method w/ Only User Group" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;preparation-method&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-method</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 422 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;422&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Preparation Method w/ Incorrect Type" enabled="true">
            <stringProp name="TestPlan.comments">Creates a Preparation Method the incorrect type specified - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Preparation Method w/ Incorrect Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;material-sample&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_1}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-method</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 400 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;400&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Preparation Method" enabled="true">
            <stringProp name="TestPlan.comments">Updates the basic Preparation Method record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Basic Preparation Method" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;preparation-method&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_3}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_3}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-method/${basic_preparation-method_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Basic Preparation Method" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the basic Preparation Method have been updated and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Basic Preparation Method Updated" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/preparation-method/${basic_preparation-method_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Updated Basic Preparation Method - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_3}&quot;
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Updated Basic Preparation Method - Multilingual Description Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Map data conflicts with groovy script syntax and will be asserted separately</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.multilingualDescription</stringProp>
                  <stringProp name="EXPECTED_VALUE">${multilingualDescription_3}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Preparation Method" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose Preparation Method record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Verbose Preparation Method" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;preparation-method&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_4}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_4}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-method/${verbose_preparation-method_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Verbose Preparation Method" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the verbose Preparation Method have been updated and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Verbose Preparation Method Updated" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/preparation-method/${verbose_preparation-method_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Updated Verbose Preparation Method - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_4}&quot;
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Updated Verbose Preparation Method - Multilingual Description Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Map data conflicts with groovy script syntax and will be asserted separately</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.multilingualDescription</stringProp>
                  <stringProp name="EXPECTED_VALUE">${multilingualDescription_4}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Preparation Method w/ Empty Body" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose Preparation Method record w/ an empty body request</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Verbose Preparation Method w/ Empty Body" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;preparation-method&quot;,&#xd;
    &quot;attributes&quot;: {}&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-method/${verbose_preparation-method_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Validate Verbose Preparation Method" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="-224228197">Preparation Method End2End Thread Group</stringProp>
                <stringProp name="-1754979095">Update</stringProp>
                <stringProp name="-1808856504">Verbose Preparation Method</stringProp>
                <stringProp name="-1912663182">Validate Verbose Preparation Method</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Preparation Method w/ Invalid UUID" enabled="true">
            <stringProp name="TestPlan.comments">Updates a Preparation Method at a UUID that does not correspond to any Preparation Method - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Preparation Method w/ Invalid UUID" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;preparation-method&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_3}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_3}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-method/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Preparation Method" enabled="true">
            <stringProp name="TestPlan.comments">Removes the verbose Preparation Method record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Verbose Preparation Method" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-method/${verbose_preparation-method_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Verbose Preparation Method" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the verbose Preparation Method has been removed</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Verbose Preparation Method Removed" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/preparation-method/${verbose_preparation-method_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 410 Error" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;410&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Preparation Method" enabled="true">
            <stringProp name="TestPlan.comments">Removes the basic Preparation Method record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Basic Preparation Method" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-method/${basic_preparation-method_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Basic Preparation Method" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the basic Preparation Method has been removed</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Basic Preparation Method Removed" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/preparation-method/${basic_preparation-method_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 410 Error" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;410&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Preparation Method w/ Invalid UUID" enabled="true">
            <stringProp name="TestPlan.comments">Removes a Preparation Method record at a UUID that does not correspond to any Preparation Method - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Preparation Method w/ Invalid UUID" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-method/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Institution End2End Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="TestPlan.comments">Thread group for testing the &apos;institution&apos; endpoint</stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Institution Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="multilingualDescription_1" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_1</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;en&quot;,&quot;desc&quot;:&quot;desc_1&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multilingualDescription_2" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_2</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;en&quot;,&quot;desc&quot;:&quot;desc_2&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multilingualDescription_3" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_3</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;fr&quot;,&quot;desc&quot;:&quot;desc_3&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multilingualDescription_4" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_4</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;fr&quot;,&quot;desc&quot;:&quot;desc_4&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="webpage_1" elementType="Argument">
              <stringProp name="Argument.name">webpage_1</stringProp>
              <stringProp name="Argument.value">http://webpage_1.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="webpage_2" elementType="Argument">
              <stringProp name="Argument.name">webpage_2</stringProp>
              <stringProp name="Argument.value">http://webpage_2.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="webpage_3" elementType="Argument">
              <stringProp name="Argument.name">webpage_3</stringProp>
              <stringProp name="Argument.value">http://webpage_3.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="webpage_4" elementType="Argument">
              <stringProp name="Argument.name">webpage_4</stringProp>
              <stringProp name="Argument.value">http://webpage_4.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="address_1" elementType="Argument">
              <stringProp name="Argument.name">address_1</stringProp>
              <stringProp name="Argument.value">address_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="address_2" elementType="Argument">
              <stringProp name="Argument.name">address_2</stringProp>
              <stringProp name="Argument.value">address_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="address_3" elementType="Argument">
              <stringProp name="Argument.name">address_3</stringProp>
              <stringProp name="Argument.value">address_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="address_4" elementType="Argument">
              <stringProp name="Argument.name">address_4</stringProp>
              <stringProp name="Argument.value">address_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="remarks_1" elementType="Argument">
              <stringProp name="Argument.name">remarks_1</stringProp>
              <stringProp name="Argument.value">remarks_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="remarks_2" elementType="Argument">
              <stringProp name="Argument.name">remarks_2</stringProp>
              <stringProp name="Argument.value">remarks_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="remarks_3" elementType="Argument">
              <stringProp name="Argument.name">remarks_3</stringProp>
              <stringProp name="Argument.value">remarks_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="remarks_4" elementType="Argument">
              <stringProp name="Argument.name">remarks_4</stringProp>
              <stringProp name="Argument.value">remarks_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="identifiers_1" elementType="Argument">
              <stringProp name="Argument.name">identifiers_1</stringProp>
              <stringProp name="Argument.value">[{&quot;type&quot;:&quot;GRSCICOLL&quot;,&quot;uri&quot;:&quot;www.uri_1.com&quot;}]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="identifiers_2" elementType="Argument">
              <stringProp name="Argument.name">identifiers_2</stringProp>
              <stringProp name="Argument.value">[{&quot;type&quot;:&quot;GRSCICOLL&quot;,&quot;uri&quot;:&quot;www.uri_2.com&quot;}]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="identifiers_3" elementType="Argument">
              <stringProp name="Argument.name">identifiers_3</stringProp>
              <stringProp name="Argument.value">[{&quot;type&quot;:&quot;GRSCICOLL&quot;,&quot;uri&quot;:&quot;www.uri_3.com&quot;}]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="identifiers_4" elementType="Argument">
              <stringProp name="Argument.name">identifiers_4</stringProp>
              <stringProp name="Argument.value">[{&quot;type&quot;:&quot;GRSCICOLL&quot;,&quot;uri&quot;:&quot;www.uri_4.com&quot;}]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Thread Group Request Headers" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__P(access_token)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/vnd.api+json</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">Required headers to perform API requests</stringProp>
        </HeaderManager>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Token Controller" enabled="true">
          <stringProp name="TestPlan.comments">Runs the Token Controller in the setUp thread group to refresh the access token</stringProp>
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
            <stringProp name="1506430348">setUp Thread Group</stringProp>
            <stringProp name="52452451">Token Controller</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Institution setUp" enabled="true">
            <stringProp name="TestPlan.comments">Sets random variables and creates relationship entities required for Institution testing</stringProp>
          </GenericController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Set Random Variables" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def ctx = org.apache.jmeter.threads.JMeterContextService.getContext()

ctx.getVariables().put(&quot;name_1&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_2&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_3&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_4&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Institution" enabled="true">
            <stringProp name="TestPlan.comments">Creates a basic Institution record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Basic Institution" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;institution&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_1}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/institution</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Basic Institution UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">basic_institution_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Basic Institution" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the basic Institution have been created and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Basic Institution Creation" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/institution/${basic_institution_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Created Basic Institution - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_1}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Institution" enabled="true">
            <stringProp name="TestPlan.comments">Creates a verbose Institution record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Verbose Institution" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;institution&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_2}&quot;,&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_2},&#xd;
      &quot;webpage&quot;: &quot;${webpage_2}&quot;,&#xd;
      &quot;address&quot;: &quot;${address_2}&quot;,&#xd;
      &quot;remarks&quot;: &quot;${remarks_2}&quot;,&#xd;
      &quot;identifiers&quot;: ${identifiers_2}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/institution</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Verbose Institution UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">verbose_institution_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Verbose Institution" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the verbose Institution have been created and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Verbose Institution Creation" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/institution/${verbose_institution_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Created Verbose Institution - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_2}&quot;
assert attr.webpage == &quot;${webpage_2}&quot;
assert attr.address == &quot;${address_2}&quot;
assert attr.remarks == &quot;${remarks_2}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Created Verbose Institution - Multilingual Description Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Map data conflicts with groovy script syntax and will be asserted separately</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.multilingualDescription</stringProp>
                  <stringProp name="EXPECTED_VALUE">${multilingualDescription_2}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Created Verbose Institution - Identifiers Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Map data conflicts with groovy script syntax and will be asserted separately</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.identifiers</stringProp>
                  <stringProp name="EXPECTED_VALUE">${identifiers_2}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Institution w/ Empty Attributes" enabled="true">
            <stringProp name="TestPlan.comments">Creates a Institution without any attributes specified - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Institution w/ Empty Attributes" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;institution&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/institution</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 422 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;422&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Institution w/ Incorrect Type" enabled="true">
            <stringProp name="TestPlan.comments">Creates a Institution the incorrect type specified - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Institution w/ Incorrect Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;material-sample&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_1}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/institution</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 400 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;400&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Institution" enabled="true">
            <stringProp name="TestPlan.comments">Updates the basic Institution record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Basic Institution" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;institution&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_3}&quot;,&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_3},&#xd;
      &quot;webpage&quot;: &quot;${webpage_3}&quot;,&#xd;
      &quot;address&quot;: &quot;${address_3}&quot;,&#xd;
      &quot;remarks&quot;: &quot;${remarks_3}&quot;,&#xd;
      &quot;identifiers&quot;: ${identifiers_3}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/institution/${basic_institution_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Basic Institution" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the basic Institution have been updated and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Basic Institution Updated" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/institution/${basic_institution_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Updated Basic Institution - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_3}&quot;
assert attr.webpage == &quot;${webpage_3}&quot;
assert attr.address == &quot;${address_3}&quot;
assert attr.remarks == &quot;${remarks_3}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Updated Basic Institution - Multilingual Description Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Map data conflicts with groovy script syntax and will be asserted separately</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.multilingualDescription</stringProp>
                  <stringProp name="EXPECTED_VALUE">${multilingualDescription_3}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Updated Basic Institution - Identifiers Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Map data conflicts with groovy script syntax and will be asserted separately</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.identifiers</stringProp>
                  <stringProp name="EXPECTED_VALUE">${identifiers_3}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Institution" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose Institution record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Patch - Update Verbose Institution" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;institution&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_4}&quot;,&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_4},&#xd;
      &quot;webpage&quot;: &quot;${webpage_4}&quot;,&#xd;
      &quot;address&quot;: &quot;${address_4}&quot;,&#xd;
      &quot;remarks&quot;: &quot;${remarks_4}&quot;,&#xd;
      &quot;identifiers&quot;: ${identifiers_4}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/institution/${verbose_institution_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Verbose Institution" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the verbose Institution have been updated and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Verbose Institution Updated" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/institution/${verbose_institution_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Updated Verbose Institution - General Assertionsd" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_4}&quot;
assert attr.webpage == &quot;${webpage_4}&quot;
assert attr.address == &quot;${address_4}&quot;
assert attr.remarks == &quot;${remarks_4}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Updated Verbose Institution - Multilingual Description Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Map data conflicts with groovy script syntax and will be asserted separately</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.multilingualDescription</stringProp>
                  <stringProp name="EXPECTED_VALUE">${multilingualDescription_4}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Updated Verbose Institution - Identifiers Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Map data conflicts with groovy script syntax and will be asserted separately</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.identifiers</stringProp>
                  <stringProp name="EXPECTED_VALUE">${identifiers_4}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Institution w/ Empty Body" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose Institution record w/ an empty body request</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Patch - Update Verbose Institution w/ Empty Body" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;institution&quot;,&#xd;
    &quot;attributes&quot;: {}&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/institution/${verbose_institution_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Validate Verbose Institution" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="-1804591475">Institution End2End Thread Group</stringProp>
                <stringProp name="-1754979095">Update</stringProp>
                <stringProp name="-8058918">Verbose Institution</stringProp>
                <stringProp name="193370608">Validate Verbose Institution</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Institution w/ Invalid UUID" enabled="true">
            <stringProp name="TestPlan.comments">Updates a Institution at a UUID that does not correspond to any Institution - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Institution w/ Invalid UUID" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;institution&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_3}&quot;,&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_3},&#xd;
      &quot;webpage&quot;: &quot;${webpage_3}&quot;,&#xd;
      &quot;address&quot;: &quot;${address_3}&quot;,&#xd;
      &quot;remarks&quot;: &quot;${remarks_3}&quot;,&#xd;
      &quot;identifiers&quot;: ${identifiers_3}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/institution/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Institution" enabled="true">
            <stringProp name="TestPlan.comments">Removes the verbose Institution record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Verbose Institution" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/institution/${verbose_institution_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Verbose Institution" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the verbose Institution has been removed</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Verbose Institution Removed" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/institution/${verbose_institution_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 410 Error" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;410&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Institution" enabled="true">
            <stringProp name="TestPlan.comments">Removes the basic Institution record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Basic Institution" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/institution/${basic_institution_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Basic Institution" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the basic Institution has been removed</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Basic Institution Removed" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/institution/${basic_institution_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 410 Error" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;410&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Institution w/ Invalid UUID" enabled="true">
            <stringProp name="TestPlan.comments">Removes a Institution record at a UUID that does not correspond to any Institution - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Institution w/ Invalid UUID" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/institution/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Storage Unit Type End2End Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="TestPlan.comments">Thread group for testing the &apos;storage-unit-type&apos; endpoint</stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Storage Unit Type Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="isInseperable_1" elementType="Argument">
              <stringProp name="Argument.name">isInseperable_1</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="isInseperable_2" elementType="Argument">
              <stringProp name="Argument.name">isInseperable_2</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="isInseperable_3" elementType="Argument">
              <stringProp name="Argument.name">isInseperable_3</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="isInseperable_4" elementType="Argument">
              <stringProp name="Argument.name">isInseperable_4</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="gridLayoutDefinition_1" elementType="Argument">
              <stringProp name="Argument.name">gridLayoutDefinition_1</stringProp>
              <stringProp name="Argument.value">{&quot;numberOfRows&quot;:4,&quot;numberOfColumns&quot;:8,&quot;fillDirection&quot;:&quot;BY_COLUMN&quot;}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="gridLayoutDefinition_2" elementType="Argument">
              <stringProp name="Argument.name">gridLayoutDefinition_2</stringProp>
              <stringProp name="Argument.value">{&quot;numberOfRows&quot;:4,&quot;numberOfColumns&quot;:8,&quot;fillDirection&quot;:&quot;BY_ROW&quot;}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="gridLayoutDefinition_3" elementType="Argument">
              <stringProp name="Argument.name">gridLayoutDefinition_3</stringProp>
              <stringProp name="Argument.value">{&quot;numberOfRows&quot;:12,&quot;numberOfColumns&quot;:8,&quot;fillDirection&quot;:&quot;BY_COLUMN&quot;}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="gridLayoutDefinition_4" elementType="Argument">
              <stringProp name="Argument.name">gridLayoutDefinition_4</stringProp>
              <stringProp name="Argument.value">{&quot;numberOfRows&quot;:12,&quot;numberOfColumns&quot;:8,&quot;fillDirection&quot;:&quot;BY_ROW&quot;}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Thread Group Request Headers" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__P(access_token)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/vnd.api+json</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">Required headers to perform API requests</stringProp>
        </HeaderManager>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Token Controller" enabled="true">
          <stringProp name="TestPlan.comments">Runs the Token Controller in the setUp thread group to refresh the access token</stringProp>
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
            <stringProp name="1506430348">setUp Thread Group</stringProp>
            <stringProp name="52452451">Token Controller</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Storage Unit Type setUp" enabled="true">
            <stringProp name="TestPlan.comments">Sets random variables and creates relationship entities required for Storage Unit Type testing</stringProp>
          </GenericController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Set Random Variables" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def ctx = org.apache.jmeter.threads.JMeterContextService.getContext()

ctx.getVariables().put(&quot;name_1&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_2&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_3&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_4&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Storage Unit Type" enabled="true">
            <stringProp name="TestPlan.comments">Creates a basic Storage Unit Type record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Basic Storage Unit Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;storage-unit-type&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_1}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit-type</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Basic Storage-Unit-Type UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">basic_storage_unit_type_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Create Basic" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the basic Storage Unit Type have been created and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Basic Storage Unit Type Creation" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit-type/${basic_storage_unit_type_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Created Basic Storage Unit Type - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_1}&quot;
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Storage Unit Type" enabled="true">
            <stringProp name="TestPlan.comments">Creates a verbose Storage Unit Type record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Verbose Storage Unit Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;storage-unit-type&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_2}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;isInseperable&quot;: ${isInseperable_2},&#xd;
      &quot;gridLayoutDefinition&quot;: ${gridLayoutDefinition_2}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit-type</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Verbose Storage-Unit-Type UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">verbose_storage_unit_type_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Create Verbose" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the verbose Storage Unit Type have been created and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Verbose Storage Unit TYpe Creation" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit-type/${verbose_storage_unit_type_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Created Verbose Storage Unit Type - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_2}&quot;
assert attr.isInseperable == ${isInseperable_2}
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Created Verbose Storage Unit Type - Grid Layout Definition Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Map data conflicts with groovy script syntax and will be asserted separately</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.gridLayoutDefinition</stringProp>
                  <stringProp name="EXPECTED_VALUE">${gridLayoutDefinition_2}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Storage Unit Type w/ Empty Attributes" enabled="true">
            <stringProp name="TestPlan.comments">Creates a Storage Unit Type without any attributes specified - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Storage Unit Type w/ Empty Attributes" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;storage-unit-type&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit-type</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 403 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;403&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Storage Unit Type w/ Only User Group" enabled="true">
            <stringProp name="TestPlan.comments">Creates a Storage Unit Type with only user group specified - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Storage Unit Type w/ Only User Group" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;storage-unit-type&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit-type</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 422 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;422&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Storage Unit Type w/ Incorrect Type" enabled="true">
            <stringProp name="TestPlan.comments">Creates a Storage Unit Type the incorrect type specified - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Storage Unit Type w/ Incorrect Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;material-sample&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_1}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit-type</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 400 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;400&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Storage Unit Type" enabled="true">
            <stringProp name="TestPlan.comments">Updates the basic Storage Unit Type record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Basic Storage Unit Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;storage-unit-type&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_3}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;isInseperable&quot;: ${isInseperable_3},&#xd;
      &quot;gridLayoutDefinition&quot;: ${gridLayoutDefinition_3}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit-type/${basic_storage_unit_type_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Basic Storage Unit Type" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the basic Storage Unit Type have been updated and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Basic Storage Unit Type Updated" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit-type/${basic_storage_unit_type_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Updated Basic Storage Unit Type - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_3}&quot;
assert attr.isInseperable == ${isInseperable_3}
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Updated Basic Storage Unit Type - Grid Layout Definition Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Map data conflicts with groovy script syntax and will be asserted separately</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.gridLayoutDefinition</stringProp>
                  <stringProp name="EXPECTED_VALUE">${gridLayoutDefinition_3}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Storage Unit Type" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose Storage Unit Type record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Verbose Storage Unit Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;storage-unit-type&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_4}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;isInseperable&quot;: ${isInseperable_4},&#xd;
      &quot;gridLayoutDefinition&quot;: ${gridLayoutDefinition_4}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit-type/${verbose_storage_unit_type_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Verbose Storage Unit Type" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the verbose Storage Unit Type have been updated and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Verbose Storage Unit Type Updated" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit-type/${verbose_storage_unit_type_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Updated Verbose Storage Unit Type - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_4}&quot;
assert attr.isInseperable == ${isInseperable_4}
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Updated Verbose Storage Unit Type - Grid Layout Definition Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Map data conflicts with groovy script syntax and will be asserted separately</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.gridLayoutDefinition</stringProp>
                  <stringProp name="EXPECTED_VALUE">${gridLayoutDefinition_4}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Storage Unit Type w/ Empty Body" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose Storage Unit Type record w/ an empty body request</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Verbose Storage Unit Type w/ Empty Body" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;storage-unit-type&quot;,&#xd;
    &quot;attributes&quot;: {}&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit-type/${verbose_storage_unit_type_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Validate Verbose Storage Unit Type" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="-1347631884">Storage Unit Type End2End Thread Group</stringProp>
                <stringProp name="-1754979095">Update</stringProp>
                <stringProp name="-1745283693">Verbose Storage Unit Type</stringProp>
                <stringProp name="-1194442967">Validate Verbose Storage Unit Type</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Updates a Storage Unit Type at a UUID that does not correspond to any Storage Unit Type - Produces an Error" enabled="true">
            <stringProp name="TestPlan.comments">Attempts to update a record with an invalid UUID specified and asserts the expected error.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Storage Unit Type w/ Invalid UUID" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;storage-unit-type&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_3}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;isInseperable&quot;: ${isInseperable_3},&#xd;
      &quot;gridLayoutDefinition&quot;: ${gridLayoutDefinition_3}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit-type/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Storage Unit Type" enabled="true">
            <stringProp name="TestPlan.comments">Removes the verbose Storage Unit Type record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Verbose Storage Unit Type" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit-type/${verbose_storage_unit_type_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Verbose Storage Unit Type" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the verbose Storage Unit Type has been removed</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Verbose Storage Unit Type Removed" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit-type/${verbose_storage_unit_type_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 410 Error" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;410&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Storage Unit Type" enabled="true">
            <stringProp name="TestPlan.comments">Removes the basic Storage Unit Type record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Basic Storage Unit Type" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit-type/${basic_storage_unit_type_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Basic Storage Unit Type" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the basic Storage Unit Type has been removed</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Basic Storage Unit Type Removed" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit-type/${basic_storage_unit_type_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 410 Error" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;410&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Storage Unit Type w/ Invalid UUID" enabled="true">
            <stringProp name="TestPlan.comments">Removes a Storage Unit Type record at a UUID that does not correspond to any Storage Unit Type - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Storage Unit Type w/ Invalid UUID" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit-type/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Form Template End2End Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="TestPlan.comments">Thread group for testing the &apos;form-template&apos; endpoint</stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Form Template Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="restrictToCreatedBy_1" elementType="Argument">
              <stringProp name="Argument.name">restrictToCreatedBy_1</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="restrictToCreatedBy_2" elementType="Argument">
              <stringProp name="Argument.name">restrictToCreatedBy_2</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="restrictToCreatedBy_3" elementType="Argument">
              <stringProp name="Argument.name">restrictToCreatedBy_3</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="restrictToCreatedBy_4" elementType="Argument">
              <stringProp name="Argument.name">restrictToCreatedBy_4</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="viewConfiguration_1" elementType="Argument">
              <stringProp name="Argument.name">viewConfiguration_1</stringProp>
              <stringProp name="Argument.value">{}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="viewConfiguration_2" elementType="Argument">
              <stringProp name="Argument.name">viewConfiguration_2</stringProp>
              <stringProp name="Argument.value">{&quot;type&quot;: &quot;material-sample-form-template&quot;}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="viewConfiguration_3" elementType="Argument">
              <stringProp name="Argument.name">viewConfiguration_3</stringProp>
              <stringProp name="Argument.value">{&quot;type&quot;: &quot;material-sample-form-template&quot;}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="viewConfiguration_4" elementType="Argument">
              <stringProp name="Argument.name">viewConfiguration_4</stringProp>
              <stringProp name="Argument.value">{&quot;type&quot;: &quot;material-sample-form-template&quot;}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="components_1" elementType="Argument">
              <stringProp name="Argument.name">components_1</stringProp>
              <stringProp name="Argument.value">[{}]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="components_2" elementType="Argument">
              <stringProp name="Argument.name">components_2</stringProp>
              <stringProp name="Argument.value">[{&quot;name&quot;:&quot;split-configuration-component&quot;,&quot;order&quot;:0,&quot;visible&quot;:false,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;split-configuration-condition-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;splitConfiguration.condition.conditionType&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;splitConfiguration.condition.materialSampleType&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;split-configuration-material-sample-name-generation-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;splitConfiguration.materialSampleNameGeneration.strategy&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;splitConfiguration.materialSampleNameGeneration.characterType&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;identifiers-component&quot;,&quot;order&quot;:1,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;general-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;group&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:&quot;aafc&quot;},{&quot;name&quot;:&quot;tags&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;projects&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;assemblages&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;publiclyReleasable&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;notPubliclyReleasableReason&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;identifiers-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;collection&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;materialSampleName&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:&quot;Elements&quot;},{&quot;name&quot;:&quot;useNextSequence&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcOtherCatalogNumbers&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;barcode&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;material-sample-info-component&quot;,&quot;order&quot;:2,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;material-sample-info-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;materialSampleType&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;materialSampleRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;materialSampleState&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;stateChangeRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;stateChangedOn&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;collecting-event-component&quot;,&quot;order&quot;:3,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;general-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;tags&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;publiclyReleasable&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;notPubliclyReleasableReason&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;identifiers-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;dwcFieldNumber&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;collecting-date-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;verbatimEventDateTime&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;startEventDateTime&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;endEventDateTime&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;collecting-agents-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;dwcRecordedBy&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;collectors&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcRecordNumber&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;verbatim-label-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;dwcVerbatimLocality&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimCoordinateSystem&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimCoordinates&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimLatitude&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimLongitude&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimSRS&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimElevation&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimDepth&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;collecting-event-details&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;habitat&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;host&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;collectionMethod&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;substrate&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcMinimumElevationInMeters&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcMaximumElevationInMeters&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcMinimumDepthInMeters&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcMaximumDepthInMeters&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;remarks&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;georeferencing-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcGeoreferenceVerificationStatus&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcDecimalLatitude&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcDecimalLongitude&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcCoordinateUncertaintyInMeters&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcGeoreferencedDate&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcGeodeticDatum&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].literalGeoreferencedBy&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].georeferencedBy&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcGeoreferenceProtocol&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcGeoreferenceSources&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcGeoreferenceRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:[{}]}]},{&quot;name&quot;:&quot;current-geographic-place&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;srcAdminLevels&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geographicPlaceNameSourceDetail.stateProvince&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geographicPlaceNameSourceDetail.country&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;collecting-event-field-extension-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;extensionValues&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;collecting-event-managed-attributes-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[]},{&quot;name&quot;:&quot;collecting-event-attachments-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;managedAttributes.attachmentsConfig.allowNew&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;managedAttributes.attachmentsConfig.allowExisting&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;preparations-component&quot;,&quot;order&quot;:4,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;general-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;preparationType&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationMethod&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preservationType&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationFixative&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationMaterials&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationSubstrate&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcDegreeOfEstablishment&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparedBy&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationDate&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationProtocol&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;organisms-component&quot;,&quot;order&quot;:5,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;organisms-general-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;organism[0].lifeStage&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].sex&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].remarks&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:[{}]}]},{&quot;name&quot;:&quot;organism-verbatim-determination-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;organism[0].determination[0].verbatimScientificName&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].verbatimDeterminer&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].verbatimDate&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].verbatimRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].transcriberRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;organism-determination-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;organism[0].determination[0].scientificName&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].scientificNameInput&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].determiner&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].determinedOn&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].determinationRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;organism-type-specimen-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;organism[0].determination[0].typeStatus&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].typeStatusEvidence&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;organism-managed-attributes-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[]}]},{&quot;name&quot;:&quot;associations-component&quot;,&quot;order&quot;:6,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;associations-host-organism-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;hostOrganism.name&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;hostOrganism.remarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;associations-material-sample-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;associations.associationType&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;associations.associatedSample&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;associations.remarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;storage-component&quot;,&quot;order&quot;:7,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;storage-selection-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;storageUnit&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;restriction-component&quot;,&quot;order&quot;:8,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;restriction-general-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;phac_animal_rg&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;cfia_ppc&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;phac_human_rg&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;phac_cl&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;isRestricted&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;restrictionRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;scheduled-actions-component&quot;,&quot;order&quot;:9,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;scheduled-actions-add-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;scheduledAction.actionType&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;scheduledAction.actionStatus&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;scheduledAction.date&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;scheduledAction.assignedTo&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;scheduledAction.remarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;field-extensions-component&quot;,&quot;order&quot;:10,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;field-extension-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;extensionValues&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;managed-attributes-component&quot;,&quot;order&quot;:11,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;managed-attributes-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;managedAttributes&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;managedAttributesOrder&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;material-sample-attachments-component&quot;,&quot;order&quot;:12,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;material-sample-attachments-sections&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;attachmentsConfig.allowNew&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;attachmentsConfig.allowExisting&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]}]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="components_3" elementType="Argument">
              <stringProp name="Argument.name">components_3</stringProp>
              <stringProp name="Argument.value">[{&quot;name&quot;:&quot;split-configuration-component&quot;,&quot;order&quot;:0,&quot;visible&quot;:false,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;split-configuration-condition-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;splitConfiguration.condition.conditionType&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;splitConfiguration.condition.materialSampleType&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;split-configuration-material-sample-name-generation-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;splitConfiguration.materialSampleNameGeneration.strategy&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;splitConfiguration.materialSampleNameGeneration.characterType&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;identifiers-component&quot;,&quot;order&quot;:1,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;general-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;group&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:&quot;aafc&quot;},{&quot;name&quot;:&quot;tags&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;projects&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;assemblages&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;publiclyReleasable&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;notPubliclyReleasableReason&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;identifiers-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;collection&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;materialSampleName&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;useNextSequence&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcOtherCatalogNumbers&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;barcode&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;material-sample-info-component&quot;,&quot;order&quot;:2,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;material-sample-info-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;materialSampleType&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;materialSampleRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;materialSampleState&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;stateChangeRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;stateChangedOn&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;collecting-event-component&quot;,&quot;order&quot;:3,&quot;visible&quot;:false,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;general-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;tags&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;publiclyReleasable&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;notPubliclyReleasableReason&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;identifiers-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;dwcFieldNumber&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;collecting-date-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;verbatimEventDateTime&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;startEventDateTime&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;endEventDateTime&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;collecting-agents-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;dwcRecordedBy&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;collectors&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcRecordNumber&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;verbatim-label-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;dwcVerbatimLocality&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimCoordinateSystem&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimCoordinates&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimLatitude&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimLongitude&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimSRS&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimElevation&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimDepth&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;collecting-event-details&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;habitat&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;host&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;collectionMethod&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;substrate&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcMinimumElevationInMeters&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcMaximumElevationInMeters&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcMinimumDepthInMeters&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcMaximumDepthInMeters&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;remarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;georeferencing-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcGeoreferenceVerificationStatus&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcDecimalLatitude&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcDecimalLongitude&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcCoordinateUncertaintyInMeters&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcGeoreferencedDate&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcGeodeticDatum&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].literalGeoreferencedBy&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].georeferencedBy&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcGeoreferenceProtocol&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcGeoreferenceSources&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcGeoreferenceRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;current-geographic-place&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;srcAdminLevels&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geographicPlaceNameSourceDetail.stateProvince&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geographicPlaceNameSourceDetail.country&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;collecting-event-field-extension-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;extensionValues&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;collecting-event-managed-attributes-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[]},{&quot;name&quot;:&quot;collecting-event-attachments-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;managedAttributes.attachmentsConfig.allowNew&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;managedAttributes.attachmentsConfig.allowExisting&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;preparations-component&quot;,&quot;order&quot;:4,&quot;visible&quot;:false,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;general-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;preparationType&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationMethod&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preservationType&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationFixative&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationMaterials&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationSubstrate&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcDegreeOfEstablishment&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparedBy&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationDate&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationProtocol&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;organisms-component&quot;,&quot;order&quot;:5,&quot;visible&quot;:false,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;organisms-general-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;organism[0].lifeStage&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].sex&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].remarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;organism-verbatim-determination-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;organism[0].determination[0].verbatimScientificName&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].verbatimDeterminer&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].verbatimDate&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].verbatimRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].transcriberRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;organism-determination-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;organism[0].determination[0].scientificName&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].scientificNameInput&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].determiner&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].determinedOn&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].determinationRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;organism-type-specimen-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;organism[0].determination[0].typeStatus&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].typeStatusEvidence&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;organism-managed-attributes-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[]}]},{&quot;name&quot;:&quot;associations-component&quot;,&quot;order&quot;:6,&quot;visible&quot;:false,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;associations-host-organism-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;hostOrganism.name&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;hostOrganism.remarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;associations-material-sample-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;associations.associationType&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;associations.associatedSample&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;associations.remarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;storage-component&quot;,&quot;order&quot;:7,&quot;visible&quot;:false,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;storage-selection-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;storageUnit&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;restriction-component&quot;,&quot;order&quot;:8,&quot;visible&quot;:false,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;restriction-general-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;phac_animal_rg&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;cfia_ppc&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;phac_human_rg&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;phac_cl&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;isRestricted&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;restrictionRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;scheduled-actions-component&quot;,&quot;order&quot;:9,&quot;visible&quot;:false,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;scheduled-actions-add-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;scheduledAction.actionType&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;scheduledAction.actionStatus&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;scheduledAction.date&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;scheduledAction.assignedTo&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;scheduledAction.remarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;field-extensions-component&quot;,&quot;order&quot;:10,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;field-extension-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;extensionValues&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;managed-attributes-component&quot;,&quot;order&quot;:11,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;managed-attributes-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;managedAttributes&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;managedAttributesOrder&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;material-sample-attachments-component&quot;,&quot;order&quot;:12,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;material-sample-attachments-sections&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;attachmentsConfig.allowNew&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;attachmentsConfig.allowExisting&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]}]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="components_4" elementType="Argument">
              <stringProp name="Argument.name">components_4</stringProp>
              <stringProp name="Argument.value">[{&quot;name&quot;:&quot;split-configuration-component&quot;,&quot;order&quot;:0,&quot;visible&quot;:false,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;split-configuration-condition-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;splitConfiguration.condition.conditionType&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;splitConfiguration.condition.materialSampleType&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;split-configuration-material-sample-name-generation-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;splitConfiguration.materialSampleNameGeneration.strategy&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;splitConfiguration.materialSampleNameGeneration.characterType&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;identifiers-component&quot;,&quot;order&quot;:1,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;general-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;group&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:&quot;aafc&quot;},{&quot;name&quot;:&quot;tags&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;projects&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;assemblages&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;publiclyReleasable&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;notPubliclyReleasableReason&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;identifiers-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;collection&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;materialSampleName&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;useNextSequence&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcOtherCatalogNumbers&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;barcode&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;material-sample-info-component&quot;,&quot;order&quot;:2,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;material-sample-info-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;materialSampleType&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;materialSampleRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;materialSampleState&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;stateChangeRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;stateChangedOn&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;collecting-event-component&quot;,&quot;order&quot;:3,&quot;visible&quot;:false,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;general-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;tags&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;publiclyReleasable&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;notPubliclyReleasableReason&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;identifiers-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;dwcFieldNumber&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;collecting-date-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;verbatimEventDateTime&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;startEventDateTime&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;endEventDateTime&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;collecting-agents-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;dwcRecordedBy&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;collectors&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcRecordNumber&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;verbatim-label-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;dwcVerbatimLocality&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimCoordinateSystem&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimCoordinates&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimLatitude&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimLongitude&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimSRS&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimElevation&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimDepth&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;collecting-event-details&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;habitat&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;host&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;collectionMethod&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;substrate&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcMinimumElevationInMeters&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcMaximumElevationInMeters&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcMinimumDepthInMeters&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcMaximumDepthInMeters&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;remarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;georeferencing-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcGeoreferenceVerificationStatus&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcDecimalLatitude&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcDecimalLongitude&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcCoordinateUncertaintyInMeters&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcGeoreferencedDate&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcGeodeticDatum&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].literalGeoreferencedBy&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].georeferencedBy&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcGeoreferenceProtocol&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcGeoreferenceSources&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcGeoreferenceRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;current-geographic-place&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;srcAdminLevels&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geographicPlaceNameSourceDetail.stateProvince&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geographicPlaceNameSourceDetail.country&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;collecting-event-field-extension-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;extensionValues&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;collecting-event-managed-attributes-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[]},{&quot;name&quot;:&quot;collecting-event-attachments-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;managedAttributes.attachmentsConfig.allowNew&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;managedAttributes.attachmentsConfig.allowExisting&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;preparations-component&quot;,&quot;order&quot;:4,&quot;visible&quot;:false,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;general-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;preparationType&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationMethod&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preservationType&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationFixative&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationMaterials&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationSubstrate&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcDegreeOfEstablishment&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparedBy&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationDate&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationProtocol&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;organisms-component&quot;,&quot;order&quot;:5,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;organisms-general-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;organism[0].lifeStage&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].sex&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].remarks&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:[{}]}]},{&quot;name&quot;:&quot;organism-verbatim-determination-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;organism[0].determination[0].verbatimScientificName&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].verbatimDeterminer&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].verbatimDate&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].verbatimRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].transcriberRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;organism-determination-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;organism[0].determination[0].scientificName&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].scientificNameInput&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].determiner&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].determinedOn&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].determinationRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;organism-type-specimen-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;organism[0].determination[0].typeStatus&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].typeStatusEvidence&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;organism-managed-attributes-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[]}]},{&quot;name&quot;:&quot;associations-component&quot;,&quot;order&quot;:6,&quot;visible&quot;:false,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;associations-host-organism-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;hostOrganism.name&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;hostOrganism.remarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;associations-material-sample-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;associations.associationType&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;associations.associatedSample&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;associations.remarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;storage-component&quot;,&quot;order&quot;:7,&quot;visible&quot;:false,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;storage-selection-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;storageUnit&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;restriction-component&quot;,&quot;order&quot;:8,&quot;visible&quot;:false,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;restriction-general-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;phac_animal_rg&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;cfia_ppc&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;phac_human_rg&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;phac_cl&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;isRestricted&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;restrictionRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;scheduled-actions-component&quot;,&quot;order&quot;:9,&quot;visible&quot;:false,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;scheduled-actions-add-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;scheduledAction.actionType&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;scheduledAction.actionStatus&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;scheduledAction.date&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;scheduledAction.assignedTo&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;scheduledAction.remarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;field-extensions-component&quot;,&quot;order&quot;:10,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;field-extension-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;extensionValues&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;managed-attributes-component&quot;,&quot;order&quot;:11,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;managed-attributes-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;managedAttributes&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;managedAttributesOrder&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;material-sample-attachments-component&quot;,&quot;order&quot;:12,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;material-sample-attachments-sections&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;attachmentsConfig.allowNew&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;attachmentsConfig.allowExisting&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]}]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Thread Group Request Headers" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__P(access_token)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/vnd.api+json</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">Required headers to perform API requests</stringProp>
        </HeaderManager>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Token Controller" enabled="true">
          <stringProp name="TestPlan.comments">Runs the Token Controller in the setUp thread group to refresh the access token</stringProp>
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
            <stringProp name="1506430348">setUp Thread Group</stringProp>
            <stringProp name="52452451">Token Controller</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Form Template setUp" enabled="true">
            <stringProp name="TestPlan.comments">Sets random variables and creates relationship entities required for Form Template testing</stringProp>
          </GenericController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Set Random Variables" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def ctx = org.apache.jmeter.threads.JMeterContextService.getContext()

ctx.getVariables().put(&quot;name_1&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_2&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_3&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_4&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Form Template" enabled="true">
            <stringProp name="TestPlan.comments">Creates a basic Form Template record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Basic Form Template" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;form-template&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_1}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;restrictToCreatedBy&quot;: ${restrictToCreatedBy_1},&#xd;
      &quot;viewConfiguration&quot;: ${viewConfiguration_1}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/form-template</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Basic Form Template UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">basic_form-template_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Basic Form Template" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the basic Form Template have been created and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Basic Form Template Creation" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/form-template/${basic_form-template_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Created Basic Form Template - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_1}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Form Template" enabled="true">
            <stringProp name="TestPlan.comments">Creates a verbose Form Template record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Verbose Form Template" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;form-template&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_2}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;restrictToCreatedBy&quot;: ${restrictToCreatedBy_2},&#xd;
      &quot;viewConfiguration&quot;: ${viewConfiguration_2},&#xd;
      &quot;components&quot;: ${components_2}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/form-template</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Basic Form Template UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">verbose_form-template_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Verbose Form Template" enabled="true">
              <stringProp name="TestPlan.comments">Retrieves the verbose record that was created and asserts all values are set as expected.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Verbose Form Template Creation" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/form-template/${verbose_form-template_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Created Verbose Form Template - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_2}&quot;
assert attr.restrictToCreatedBy == ${restrictToCreatedBy_2}
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Created Verbose Form Template - View Configuration Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Map data conflicts with groovy script syntax and will be asserted separately</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.viewConfiguration</stringProp>
                  <stringProp name="EXPECTED_VALUE">${viewConfiguration_2}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Created Verbose Form Template - Components Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Map data conflicts with groovy script syntax and will be asserted separately</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.components</stringProp>
                  <stringProp name="EXPECTED_VALUE">${components_2}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Form Template w/ Empty Attributes" enabled="true">
            <stringProp name="TestPlan.comments">Creates a Form Template without any attributes specified - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Form Template w/ Empty Attributes" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;form-template&quot;,&#xd;
    &quot;attributes&quot;: {}&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/form-template</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 422 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;422&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Form Template w/ Only User Group" enabled="true">
            <stringProp name="TestPlan.comments">Creates a Form Template with only user group specified - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Form Template w/ Only User Group" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;form-template&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/form-template</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 422 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;422&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Form Template w/ Incorrect Type" enabled="true">
            <stringProp name="TestPlan.comments">Creates a Form Template the incorrect type specified - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Form Template w/ Incorrect Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;material-sample&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_1}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;restrictToCreatedBy&quot;: ${restrictToCreatedBy_1},&#xd;
      &quot;viewConfiguration&quot;: ${viewConfiguration_1}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/form-template</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 400 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;400&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Form Template" enabled="true">
            <stringProp name="TestPlan.comments">Updates the basic Form Template record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Basic Form Template" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;form-template&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_3}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;restrictToCreatedBy&quot;: ${restrictToCreatedBy_3},&#xd;
      &quot;viewConfiguration&quot;: ${viewConfiguration_3},&#xd;
      &quot;components&quot;: ${components_3}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/form-template/${basic_form-template_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Basic Form Template" enabled="true">
              <stringProp name="TestPlan.comments">Retrieves the basic record that was updated and asserts all values are set as expected</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Basic Form Template Updated" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/form-template/${basic_form-template_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Updated Basic Form Template - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_3}&quot;
assert attr.restrictToCreatedBy == ${restrictToCreatedBy_3}
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Updated Basic Form Template - View Configuration Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Map data conflicts with groovy script syntax and will be asserted separately</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.viewConfiguration</stringProp>
                  <stringProp name="EXPECTED_VALUE">${viewConfiguration_3}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Updated Basic Form Template - Components Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Map data conflicts with groovy script syntax and will be asserted separately</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.components</stringProp>
                  <stringProp name="EXPECTED_VALUE">${components_3}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Form Template" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose Form Template record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Verbose Form Template" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;form-template&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_4}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;restrictToCreatedBy&quot;: ${restrictToCreatedBy_4},&#xd;
      &quot;viewConfiguration&quot;: ${viewConfiguration_4},&#xd;
      &quot;components&quot;: ${components_4}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/form-template/${verbose_form-template_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Verbose Form Template" enabled="true">
              <stringProp name="TestPlan.comments">Retrieves the verbose record that was updated and asserts all values are set as expected</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Verbose Form Template Updated" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/form-template/${verbose_form-template_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Updated Verbose Form Template - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_4}&quot;
assert attr.restrictToCreatedBy == ${restrictToCreatedBy_4}
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Updated Verbose Form Template - View Configuration Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Map data conflicts with groovy script syntax and will be asserted separately</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.viewConfiguration</stringProp>
                  <stringProp name="EXPECTED_VALUE">${viewConfiguration_4}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Updated Verbose Form Template - Components Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Map data conflicts with groovy script syntax and will be asserted separately</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.components</stringProp>
                  <stringProp name="EXPECTED_VALUE">${components_4}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Form Template w/ Empty Body" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose record while providing no fields to update and asserts that no changes were made.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Verbose Form Template w/ Empty Body" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;form-template&quot;,&#xd;
    &quot;attributes&quot;: {}&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/form-template/${verbose_form-template_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Validate Verbose Form Template" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="-1921065329">Form Template End2End Thread Group</stringProp>
                <stringProp name="-1754979095">Update</stringProp>
                <stringProp name="-1912176104">Verbose Form Template</stringProp>
                <stringProp name="-1611929938">Validate Verbose Form Template</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Form Template w/ Invalid UUID" enabled="true">
            <stringProp name="TestPlan.comments">Attempts to update a record with an invalid UUID specified and asserts the expected error.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Form Template w/ Invalid UUID" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;form-template&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_3}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;restrictToCreatedBy&quot;: ${restrictToCreatedBy_3},&#xd;
      &quot;viewConfiguration&quot;: ${viewConfiguration_3},&#xd;
      &quot;components&quot;: ${components_3}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/form-template/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Form Template" enabled="true">
            <stringProp name="TestPlan.comments">Deletes the verbose record and asserts that the record was properly removed.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Verbose Form Template" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/form-template/${verbose_form-template_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Verbose Form Template" enabled="true">
              <stringProp name="TestPlan.comments">Attempts to retrieve the deleted verbose record and asserts that the correct response is returned.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Verbose Form Template Removed" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/form-template/${verbose_form-template_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Form Template" enabled="true">
            <stringProp name="TestPlan.comments">Deletes the basic record and asserts that the record was properly removed.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Basic Form Template" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/form-template/${basic_form-template_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Basic Form Template" enabled="true">
              <stringProp name="TestPlan.comments">Attempts to retrieve the deleted basic record and asserts that the correct response is returned.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Basic Form Template Removed" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/form-template/${basic_form-template_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Form Template w/ Invalid UUID" enabled="true">
            <stringProp name="TestPlan.comments">Attempts to delete a record with an invalid UUID specified and asserts the expected error.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Form Template w/ Invalid UUID" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/form-template/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Organism End2End Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="TestPlan.comments">Thread group for testing the &apos;organism</stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Organism Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="isTarget_1" elementType="Argument">
              <stringProp name="Argument.name">isTarget_1</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="isTarget_2" elementType="Argument">
              <stringProp name="Argument.name">isTarget_2</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="isTarget_3" elementType="Argument">
              <stringProp name="Argument.name">isTarget_3</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="isTarget_4" elementType="Argument">
              <stringProp name="Argument.name">isTarget_4</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="lifeStage_1" elementType="Argument">
              <stringProp name="Argument.name">lifeStage_1</stringProp>
              <stringProp name="Argument.value">lifeStage_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="lifeStage_2" elementType="Argument">
              <stringProp name="Argument.name">lifeStage_2</stringProp>
              <stringProp name="Argument.value">lifeStage_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="lifeStage_3" elementType="Argument">
              <stringProp name="Argument.name">lifeStage_3</stringProp>
              <stringProp name="Argument.value">lifeStage_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="lifeStage_4" elementType="Argument">
              <stringProp name="Argument.name">lifeStage_4</stringProp>
              <stringProp name="Argument.value">lifeStage_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="sex_1" elementType="Argument">
              <stringProp name="Argument.name">sex_1</stringProp>
              <stringProp name="Argument.value">sex_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="sex_2" elementType="Argument">
              <stringProp name="Argument.name">sex_2</stringProp>
              <stringProp name="Argument.value">sex_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="sex_3" elementType="Argument">
              <stringProp name="Argument.name">sex_3</stringProp>
              <stringProp name="Argument.value">sex_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="sex_4" elementType="Argument">
              <stringProp name="Argument.name">sex_4</stringProp>
              <stringProp name="Argument.value">sex_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="remarks_1" elementType="Argument">
              <stringProp name="Argument.name">remarks_1</stringProp>
              <stringProp name="Argument.value">remarks_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="remarks_2" elementType="Argument">
              <stringProp name="Argument.name">remarks_2</stringProp>
              <stringProp name="Argument.value">remarks_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="remarks_3" elementType="Argument">
              <stringProp name="Argument.name">remarks_3</stringProp>
              <stringProp name="Argument.value">remarks_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="remarks_4" elementType="Argument">
              <stringProp name="Argument.name">remarks_4</stringProp>
              <stringProp name="Argument.value">remarks_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_verbatimScientificName_1" elementType="Argument">
              <stringProp name="Argument.name">determination_verbatimScientificName_1</stringProp>
              <stringProp name="Argument.value">verbatimScientificName_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_verbatimScientificName_2" elementType="Argument">
              <stringProp name="Argument.name">determination_verbatimScientificName_2</stringProp>
              <stringProp name="Argument.value">verbatimScientificName_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_verbatimScientificName_3" elementType="Argument">
              <stringProp name="Argument.name">determination_verbatimScientificName_3</stringProp>
              <stringProp name="Argument.value">verbatimScientificName_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_verbatimScientificName_4" elementType="Argument">
              <stringProp name="Argument.name">determination_verbatimScientificName_4</stringProp>
              <stringProp name="Argument.value">verbatimScientificName_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_verbatimDeterminer_1" elementType="Argument">
              <stringProp name="Argument.name">determination_verbatimDeterminer_1</stringProp>
              <stringProp name="Argument.value">verbatimDeterminer_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_verbatimDeterminer_2" elementType="Argument">
              <stringProp name="Argument.name">determination_verbatimDeterminer_2</stringProp>
              <stringProp name="Argument.value">verbatimDeterminer_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_verbatimDeterminer_3" elementType="Argument">
              <stringProp name="Argument.name">determination_verbatimDeterminer_3</stringProp>
              <stringProp name="Argument.value">verbatimDeterminer_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_verbatimDeterminer_4" elementType="Argument">
              <stringProp name="Argument.name">determination_verbatimDeterminer_4</stringProp>
              <stringProp name="Argument.value">verbatimDeterminer_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_verbatimDate_1" elementType="Argument">
              <stringProp name="Argument.name">determination_verbatimDate_1</stringProp>
              <stringProp name="Argument.value">2019-02-06</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_verbatimDate_2" elementType="Argument">
              <stringProp name="Argument.name">determination_verbatimDate_2</stringProp>
              <stringProp name="Argument.value">2020-02-06</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_verbatimDate_3" elementType="Argument">
              <stringProp name="Argument.name">determination_verbatimDate_3</stringProp>
              <stringProp name="Argument.value">2021-02-06</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_verbatimDate_4" elementType="Argument">
              <stringProp name="Argument.name">determination_verbatimDate_4</stringProp>
              <stringProp name="Argument.value">2022-02-06</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_transcriberRemarks_1" elementType="Argument">
              <stringProp name="Argument.name">determination_transcriberRemarks_1</stringProp>
              <stringProp name="Argument.value">transcriberRemarks_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_transcriberRemarks_2" elementType="Argument">
              <stringProp name="Argument.name">determination_transcriberRemarks_2</stringProp>
              <stringProp name="Argument.value">transcriberRemarks_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_transcriberRemarks_3" elementType="Argument">
              <stringProp name="Argument.name">determination_transcriberRemarks_3</stringProp>
              <stringProp name="Argument.value">transcriberRemarks_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_transcriberRemarks_4" elementType="Argument">
              <stringProp name="Argument.name">determination_transcriberRemarks_4</stringProp>
              <stringProp name="Argument.value">transcriberRemarks_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_verbatimRemarks_1" elementType="Argument">
              <stringProp name="Argument.name">determination_verbatimRemarks_1</stringProp>
              <stringProp name="Argument.value">verbatimRemarks_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_verbatimRemarks_2" elementType="Argument">
              <stringProp name="Argument.name">determination_verbatimRemarks_2</stringProp>
              <stringProp name="Argument.value">verbatimRemarks_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_verbatimRemarks_3" elementType="Argument">
              <stringProp name="Argument.name">determination_verbatimRemarks_3</stringProp>
              <stringProp name="Argument.value">verbatimRemarks_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_verbatimRemarks_4" elementType="Argument">
              <stringProp name="Argument.name">determination_verbatimRemarks_4</stringProp>
              <stringProp name="Argument.value">verbatimRemarks_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_determinationRemarks_1" elementType="Argument">
              <stringProp name="Argument.name">determination_determinationRemarks_1</stringProp>
              <stringProp name="Argument.value">determinationRemarks_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_determinationRemarks_2" elementType="Argument">
              <stringProp name="Argument.name">determination_determinationRemarks_2</stringProp>
              <stringProp name="Argument.value">determinationRemarks_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_determinationRemarks_3" elementType="Argument">
              <stringProp name="Argument.name">determination_determinationRemarks_3</stringProp>
              <stringProp name="Argument.value">determinationRemarks_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_determinationRemarks_4" elementType="Argument">
              <stringProp name="Argument.name">determination_determinationRemarks_4</stringProp>
              <stringProp name="Argument.value">determinationRemarks_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_typeStatus_1" elementType="Argument">
              <stringProp name="Argument.name">determination_typeStatus_1</stringProp>
              <stringProp name="Argument.value">typeStatus_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_typeStatus_2" elementType="Argument">
              <stringProp name="Argument.name">determination_typeStatus_2</stringProp>
              <stringProp name="Argument.value">typeStatus_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_typeStatus_3" elementType="Argument">
              <stringProp name="Argument.name">determination_typeStatus_3</stringProp>
              <stringProp name="Argument.value">typeStatus_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_typeStatus_4" elementType="Argument">
              <stringProp name="Argument.name">determination_typeStatus_4</stringProp>
              <stringProp name="Argument.value">typeStatus_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_typeStatusEvidence_1" elementType="Argument">
              <stringProp name="Argument.name">determination_typeStatusEvidence_1</stringProp>
              <stringProp name="Argument.value">typeStatusEvidence_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_typeStatusEvidence_2" elementType="Argument">
              <stringProp name="Argument.name">determination_typeStatusEvidence_2</stringProp>
              <stringProp name="Argument.value">typeStatusEvidence_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_typeStatusEvidence_3" elementType="Argument">
              <stringProp name="Argument.name">determination_typeStatusEvidence_3</stringProp>
              <stringProp name="Argument.value">typeStatusEvidence_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_typeStatusEvidence_4" elementType="Argument">
              <stringProp name="Argument.name">determination_typeStatusEvidence_4</stringProp>
              <stringProp name="Argument.value">typeStatusEvidence_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_determiner_1" elementType="Argument">
              <stringProp name="Argument.name">determination_determiner_1</stringProp>
              <stringProp name="Argument.value">[]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_determiner_2" elementType="Argument">
              <stringProp name="Argument.name">determination_determiner_2</stringProp>
              <stringProp name="Argument.value">[&quot;123e4567-e89b-12d3-a456-426614174000&quot;]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_determiner_3" elementType="Argument">
              <stringProp name="Argument.name">determination_determiner_3</stringProp>
              <stringProp name="Argument.value">[&quot;123e4567-e89b-12d3-a456-426614174000&quot;, &quot;123e4567-e89b-12d3-a456-426614174001&quot;]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_determiner_4" elementType="Argument">
              <stringProp name="Argument.name">determination_determiner_4</stringProp>
              <stringProp name="Argument.value">[&quot;123e4567-e89b-12d3-a456-426614174000&quot;, &quot;123e4567-e89b-12d3-a456-426614174001&quot;, &quot;123e4567-e89b-12d3-a456-426614174002&quot;]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_determinedOn_1" elementType="Argument">
              <stringProp name="Argument.name">determination_determinedOn_1</stringProp>
              <stringProp name="Argument.value">2001-02-06</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_determinedOn_2" elementType="Argument">
              <stringProp name="Argument.name">determination_determinedOn_2</stringProp>
              <stringProp name="Argument.value">2001-02-06</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_determinedOn_3" elementType="Argument">
              <stringProp name="Argument.name">determination_determinedOn_3</stringProp>
              <stringProp name="Argument.value">2001-02-06</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_determinedOn_4" elementType="Argument">
              <stringProp name="Argument.name">determination_determinedOn_4</stringProp>
              <stringProp name="Argument.value">2001-02-06</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_qualifier_1" elementType="Argument">
              <stringProp name="Argument.name">determination_qualifier_1</stringProp>
              <stringProp name="Argument.value">qualifier_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_qualifier_2" elementType="Argument">
              <stringProp name="Argument.name">determination_qualifier_2</stringProp>
              <stringProp name="Argument.value">qualifier_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_qualifier_3" elementType="Argument">
              <stringProp name="Argument.name">determination_qualifier_3</stringProp>
              <stringProp name="Argument.value">qualifier_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_qualifier_4" elementType="Argument">
              <stringProp name="Argument.name">determination_qualifier_4</stringProp>
              <stringProp name="Argument.value">qualifier_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameSource_1" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameSource_1</stringProp>
              <stringProp name="Argument.value">null </stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameSource_2" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameSource_2</stringProp>
              <stringProp name="Argument.value">GNA</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameSource_3" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameSource_3</stringProp>
              <stringProp name="Argument.value">CUSTOM</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameSource_4" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameSource_4</stringProp>
              <stringProp name="Argument.value">COLPLUS</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_isPrimary_1" elementType="Argument">
              <stringProp name="Argument.name">determination_isPrimary_1</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_isPrimary_2" elementType="Argument">
              <stringProp name="Argument.name">determination_isPrimary_2</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_isPrimary_3" elementType="Argument">
              <stringProp name="Argument.name">determination_isPrimary_3</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_isPrimary_4" elementType="Argument">
              <stringProp name="Argument.name">determination_isPrimary_4</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_isFiledAs_1" elementType="Argument">
              <stringProp name="Argument.name">determination_isFiledAs_1</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_isFiledAs_2" elementType="Argument">
              <stringProp name="Argument.name">determination_isFiledAs_2</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_isFiledAs_3" elementType="Argument">
              <stringProp name="Argument.name">determination_isFiledAs_3</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_isFiledAs_4" elementType="Argument">
              <stringProp name="Argument.name">determination_isFiledAs_4</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_labelHtml_1" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_labelHtml_1</stringProp>
              <stringProp name="Argument.value">labelHtml_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_labelHtml_2" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_labelHtml_2</stringProp>
              <stringProp name="Argument.value">labelHtml_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_labelHtml_3" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_labelHtml_3</stringProp>
              <stringProp name="Argument.value">labelHtml_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_labelHtml_4" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_labelHtml_4</stringProp>
              <stringProp name="Argument.value">labelHtml_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_classificationPath_1" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_classificationPath_1</stringProp>
              <stringProp name="Argument.value">classificationPath_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_classificationPath_2" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_classificationPath_2</stringProp>
              <stringProp name="Argument.value">classificationPath_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_classificationPath_3" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_classificationPath_3</stringProp>
              <stringProp name="Argument.value">classificationPath_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_classificationPath_4" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_classificationPath_4</stringProp>
              <stringProp name="Argument.value">classificationPath_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_classificationRanks_1" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_classificationRanks_1</stringProp>
              <stringProp name="Argument.value">classificationRanks_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_classificationRanks_2" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_classificationRanks_2</stringProp>
              <stringProp name="Argument.value">classificationRanks_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_classificationRanks_3" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_classificationRanks_3</stringProp>
              <stringProp name="Argument.value">classificationRanks_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_classificationRanks_4" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_classificationRanks_4</stringProp>
              <stringProp name="Argument.value">classificationRanks_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_sourceUrl_1" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_sourceUrl_1</stringProp>
              <stringProp name="Argument.value">http://example_1.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_sourceUrl_2" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_sourceUrl_2</stringProp>
              <stringProp name="Argument.value">http://example_2.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_sourceUrl_3" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_sourceUrl_3</stringProp>
              <stringProp name="Argument.value">http://example_3.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_sourceUrl_4" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_sourceUrl_4</stringProp>
              <stringProp name="Argument.value">http://example_4.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_recordedOn_1" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_recordedOn_1</stringProp>
              <stringProp name="Argument.value">2011-02-06</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_recordedOn_2" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_recordedOn_2</stringProp>
              <stringProp name="Argument.value">2012-02-06</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_recordedOn_3" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_recordedOn_3</stringProp>
              <stringProp name="Argument.value">2013-02-06</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_recordedOn_4" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_recordedOn_4</stringProp>
              <stringProp name="Argument.value">2014-02-06</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_currentName_1" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_currentName_1</stringProp>
              <stringProp name="Argument.value">currentName_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_currentName_2" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_currentName_2</stringProp>
              <stringProp name="Argument.value">currentName_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_currentName_3" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_currentName_3</stringProp>
              <stringProp name="Argument.value">currentName_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_currentName_4" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_currentName_4</stringProp>
              <stringProp name="Argument.value">currentName_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_isSynonym_1" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_isSynonym_1</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_isSynonym_2" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_isSynonym_2</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_isSynonym_3" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_isSynonym_3</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_isSynonym_4" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_isSynonym_4</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Thread Group Request Headers" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__P(access_token)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/vnd.api+json</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">Required headers to perform API requests</stringProp>
        </HeaderManager>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Token Controller" enabled="true">
          <stringProp name="TestPlan.comments">Runs the Token Controller in the setUp thread group to refresh the access token</stringProp>
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
            <stringProp name="1506430348">setUp Thread Group</stringProp>
            <stringProp name="52452451">Token Controller</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="setUp Controller" enabled="true">
            <stringProp name="TestPlan.comments">Sets random variables and creates relationship entities required for Organism testing</stringProp>
          </GenericController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Set Random Variables" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def ctx = org.apache.jmeter.threads.JMeterContextService.getContext()

ctx.getVariables().put(&quot;determination_scientificName_1&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;determination_scientificName_2&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;determination_scientificName_3&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;determination_scientificName_4&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)

ctx.getVariables().put(&quot;determination_verbatimScientificName_1&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;determination_verbatimScientificName_2&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;determination_verbatimScientificName_3&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;determination_verbatimScientificName_4&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Organism" enabled="true">
            <stringProp name="TestPlan.comments">Creates a basic Organism record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Basic Organism" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;organism&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/organism</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Basic Organism UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">basic_organism_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Basic Organism" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the basic Organism have been created and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Basic Organism Creation" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/organism/${basic_organism_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Created Basic Organism - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Organism" enabled="true">
            <stringProp name="TestPlan.comments">Creates a verbose Organism record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Verbose Organism" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;organism&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;isTarget&quot;: ${isTarget_2},&#xd;
      &quot;lifeStage&quot;: &quot;${lifeStage_2}&quot;,&#xd;
      &quot;sex&quot;: &quot;${sex_2}&quot;,&#xd;
      &quot;remarks&quot;: &quot;${remarks_2}&quot;,&#xd;
      &quot;determination&quot;: [&#xd;
	      {&#xd;
	      	&quot;verbatimScientificName&quot;: &quot;${determination_verbatimScientificName_2}&quot;,&#xd;
	      	&quot;verbatimDeterminer&quot;: &quot;${determination_verbatimDeterminer_2}&quot;,&#xd;
	      	&quot;verbatimDate&quot;: &quot;${determination_verbatimDate_2}&quot;,&#xd;
	      	&quot;scientificName&quot;: &quot;${determination_scientificName_2}&quot;,&#xd;
	      	&quot;transcriberRemarks&quot;: &quot;${determination_transcriberRemarks_2}&quot;,&#xd;
	      	&quot;verbatimRemarks&quot;: &quot;${determination_verbatimRemarks_2}&quot;,&#xd;
	      	&quot;determinationRemarks&quot;: &quot;${determination_determinationRemarks_2}&quot;,&#xd;
	      	&quot;typeStatus&quot;: &quot;${determination_typeStatus_2}&quot;,&#xd;
	      	&quot;typeStatusEvidence&quot;: &quot;${determination_typeStatusEvidence_2}&quot;,&#xd;
	      	&quot;determiner&quot;: ${determination_determiner_2},&#xd;
	      	&quot;determinedOn&quot;: &quot;${determination_determinedOn_2}&quot;,&#xd;
	      	&quot;qualifier&quot;: &quot;${determination_qualifier_2}&quot;,&#xd;
	      	&quot;scientificNameSource&quot;: &quot;${determination_scientificNameSource_2}&quot;,&#xd;
	      	&quot;scientificNameDetails&quot;: {&#xd;
	      		&quot;classificationPath&quot;: &quot;${determination_scientificNameDetails_classificationPath_2}&quot;,&#xd;
	      		&quot;classificationRanks&quot;: &quot;${determination_scientificNameDetails_classificationRanks_2}&quot;,&#xd;
	      		&quot;sourceUrl&quot;: &quot;${determination_scientificNameDetails_sourceUrl_2}&quot;,&#xd;
	      		&quot;labelHtml&quot;: &quot;${determination_scientificNameDetails_labelHtml_2}&quot;,&#xd;
	      		&quot;recordedOn&quot;: &quot;${determination_scientificNameDetails_recordedOn_2}&quot;,&#xd;
	      		&quot;currentName&quot;: &quot;${determination_scientificNameDetails_currentName_2}&quot;,&#xd;
	      		&quot;isSynonym&quot;: ${determination_scientificNameDetails_isSynonym_2}&#xd;
	      	},&#xd;
	      	&quot;isPrimary&quot;: ${determination_isPrimary_2},&#xd;
	      	&quot;isFiledAs&quot;: ${determination_isFiledAs_2}&#xd;
	      }&#xd;
      ]&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/organism</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Verbose Organism UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">verbose_organism_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Verbose Organism" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the verbose Organism have been created and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Verbose Organism Creation" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/organism/${verbose_organism_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Created Verbose Organism - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.group == &quot;${user_group}&quot;
assert attr.isTarget == ${isTarget_2}
assert attr.lifeStage == &quot;${lifeStage_2}&quot;
assert attr.sex == &quot;${sex_2}&quot;
assert attr.remarks == &quot;${remarks_2}&quot;
assert attr.determination[0].verbatimScientificName  == &quot;${determination_verbatimScientificName_2}&quot;
assert attr.determination[0].verbatimDeterminer == &quot;${determination_verbatimDeterminer_2}&quot;
assert attr.determination[0].verbatimDate == &quot;${determination_verbatimDate_2}&quot;
assert attr.determination[0].scientificName == &quot;${determination_scientificName_2}&quot;
assert attr.determination[0].transcriberRemarks == &quot;${determination_transcriberRemarks_2}&quot;
assert attr.determination[0].verbatimRemarks == &quot;${determination_verbatimRemarks_2}&quot;
assert attr.determination[0].determinationRemarks == &quot;${determination_determinationRemarks_2}&quot;
assert attr.determination[0].typeStatus == &quot;${determination_typeStatus_2}&quot;
assert attr.determination[0].typeStatusEvidence == &quot;${determination_typeStatusEvidence_2}&quot;
assert attr.determination[0].determiner == ${determination_determiner_2}
assert attr.determination[0].determinedOn == &quot;${determination_determinedOn_2}&quot;
assert attr.determination[0].qualifier == &quot;${determination_qualifier_2}&quot;
assert attr.determination[0].scientificNameSource == &quot;${determination_scientificNameSource_2}&quot;
assert attr.determination[0].scientificNameDetails.classificationPath == &quot;${determination_scientificNameDetails_classificationPath_2}&quot;
assert attr.determination[0].scientificNameDetails.classificationRanks == &quot;${determination_scientificNameDetails_classificationRanks_2}&quot;
assert attr.determination[0].scientificNameDetails.sourceUrl == &quot;${determination_scientificNameDetails_sourceUrl_2}&quot;
assert attr.determination[0].scientificNameDetails.labelHtml == &quot;${determination_scientificNameDetails_labelHtml_2}&quot;
assert attr.determination[0].scientificNameDetails.recordedOn == &quot;${determination_scientificNameDetails_recordedOn_2}&quot;
assert attr.determination[0].scientificNameDetails.currentName == &quot;${determination_scientificNameDetails_currentName_2}&quot;
assert attr.determination[0].scientificNameDetails.isSynonym == ${determination_scientificNameDetails_isSynonym_2}
assert attr.determination[0].isPrimary == true // Should automaticlly become true as it is only determination
assert attr.determination[0].isFiledAs == ${determination_isFiledAs_2}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Organism w/ Empty Attributes" enabled="true">
            <stringProp name="TestPlan.comments">Creates a Organism without any attributes specified - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Organism w/ Empty Attributes" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;organism&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/organism</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 403 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;403&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Organism w/ Incorrect TYpe" enabled="true">
            <stringProp name="TestPlan.comments">Creates a Organism the incorrect type specified - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Organism w/ Incorrect Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;material-sample&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/organism</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 400 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;400&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Organism" enabled="true">
            <stringProp name="TestPlan.comments">Updates the basic Organism record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Basic Organism" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;organism&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;isTarget&quot;: ${isTarget_3},&#xd;
      &quot;lifeStage&quot;: &quot;${lifeStage_3}&quot;,&#xd;
      &quot;sex&quot;: &quot;${sex_3}&quot;,&#xd;
      &quot;remarks&quot;: &quot;${remarks_3}&quot;,&#xd;
      &quot;determination&quot;: [&#xd;
	      {&#xd;
	      	&quot;verbatimScientificName&quot;: &quot;${determination_verbatimScientificName_3}&quot;,&#xd;
	      	&quot;verbatimDeterminer&quot;: &quot;${determination_verbatimDeterminer_3}&quot;,&#xd;
	      	&quot;verbatimDate&quot;: &quot;${determination_verbatimDate_3}&quot;,&#xd;
	      	&quot;transcriberRemarks&quot;: &quot;${determination_transcriberRemarks_3}&quot;,&#xd;
	      	&quot;verbatimRemarks&quot;: &quot;${determination_verbatimRemarks_3}&quot;,&#xd;
	      	&quot;determinationRemarks&quot;: &quot;${determination_determinationRemarks_3}&quot;,&#xd;
	      	&quot;typeStatus&quot;: &quot;${determination_typeStatus_3}&quot;,&#xd;
	      	&quot;typeStatusEvidence&quot;: &quot;${determination_typeStatusEvidence_3}&quot;,&#xd;
	      	&quot;determiner&quot;: ${determination_determiner_3},&#xd;
	      	&quot;determinedOn&quot;: &quot;${determination_determinedOn_3}&quot;,&#xd;
	      	&quot;qualifier&quot;: &quot;${determination_qualifier_3}&quot;,&#xd;
	      	&quot;scientificNameSource&quot;: &quot;${determination_scientificNameSource_3}&quot;,&#xd;
	      	&quot;scientificNameDetails&quot;: {&#xd;
	      		&quot;classificationPath&quot;: &quot;${determination_scientificNameDetails_classificationPath_3}&quot;,&#xd;
	      		&quot;classificationRanks&quot;: &quot;${determination_scientificNameDetails_classificationRanks_3}&quot;,&#xd;
	      		&quot;sourceUrl&quot;: &quot;${determination_scientificNameDetails_sourceUrl_3}&quot;,&#xd;
	      		&quot;labelHtml&quot;: &quot;${determination_scientificNameDetails_labelHtml_3}&quot;,&#xd;
	      		&quot;recordedOn&quot;: &quot;${determination_scientificNameDetails_recordedOn_3}&quot;,&#xd;
	      		&quot;currentName&quot;: &quot;${determination_scientificNameDetails_currentName_3}&quot;,&#xd;
	      		&quot;isSynonym&quot;: ${determination_scientificNameDetails_isSynonym_3}&#xd;
	      	},&#xd;
	      	&quot;isPrimary&quot;: ${determination_isPrimary_3},&#xd;
	      	&quot;isFiledAs&quot;: ${determination_isFiledAs_3}&#xd;
	      }&#xd;
      ]&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/organism/${basic_organism_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Basic Organism" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the basic Organism have been updated and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Basic Organism Updated" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/organism/${basic_organism_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Updated Basic Organism - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.group == &quot;${user_group}&quot;
assert attr.isTarget == ${isTarget_3}
assert attr.lifeStage == &quot;${lifeStage_3}&quot;
assert attr.sex == &quot;${sex_3}&quot;
assert attr.remarks == &quot;${remarks_3}&quot;
assert attr.determination[0].verbatimScientificName  == &quot;${determination_verbatimScientificName_3}&quot;
assert attr.determination[0].verbatimDeterminer == &quot;${determination_verbatimDeterminer_3}&quot;
assert attr.determination[0].verbatimDate == &quot;${determination_verbatimDate_3}&quot;
assert attr.determination[0].transcriberRemarks == &quot;${determination_transcriberRemarks_3}&quot;
assert attr.determination[0].verbatimRemarks == &quot;${determination_verbatimRemarks_3}&quot;
assert attr.determination[0].determinationRemarks == &quot;${determination_determinationRemarks_3}&quot;
assert attr.determination[0].typeStatus == &quot;${determination_typeStatus_3}&quot;
assert attr.determination[0].typeStatusEvidence == &quot;${determination_typeStatusEvidence_3}&quot;
assert attr.determination[0].determiner == ${determination_determiner_3}
assert attr.determination[0].determinedOn == &quot;${determination_determinedOn_3}&quot;
assert attr.determination[0].qualifier == &quot;${determination_qualifier_3}&quot;
assert attr.determination[0].scientificNameSource == &quot;${determination_scientificNameSource_3}&quot;
assert attr.determination[0].scientificNameDetails.classificationPath == &quot;${determination_scientificNameDetails_classificationPath_3}&quot;
assert attr.determination[0].scientificNameDetails.classificationRanks == &quot;${determination_scientificNameDetails_classificationRanks_3}&quot;
assert attr.determination[0].scientificNameDetails.sourceUrl == &quot;${determination_scientificNameDetails_sourceUrl_3}&quot;
assert attr.determination[0].scientificNameDetails.labelHtml == &quot;${determination_scientificNameDetails_labelHtml_3}&quot;
assert attr.determination[0].scientificNameDetails.recordedOn == &quot;${determination_scientificNameDetails_recordedOn_3}&quot;
assert attr.determination[0].scientificNameDetails.currentName == &quot;${determination_scientificNameDetails_currentName_3}&quot;
assert attr.determination[0].scientificNameDetails.isSynonym == ${determination_scientificNameDetails_isSynonym_3}
assert attr.determination[0].isPrimary == true // Should automaticlly become true as it is only determination
assert attr.determination[0].isFiledAs == ${determination_isFiledAs_3}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Organism" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose Organism record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validate Verbose Organism" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;organism&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;isTarget&quot;: ${isTarget_4},&#xd;
      &quot;lifeStage&quot;: &quot;${lifeStage_4}&quot;,&#xd;
      &quot;sex&quot;: &quot;${sex_4}&quot;,&#xd;
      &quot;remarks&quot;: &quot;${remarks_4}&quot;,&#xd;
      &quot;determination&quot;: [&#xd;
	      {&#xd;
	      	&quot;verbatimScientificName&quot;: &quot;${determination_verbatimScientificName_4}&quot;,&#xd;
	      	&quot;verbatimDeterminer&quot;: &quot;${determination_verbatimDeterminer_4}&quot;,&#xd;
	      	&quot;verbatimDate&quot;: &quot;${determination_verbatimDate_4}&quot;,&#xd;
	      	&quot;scientificName&quot;: &quot;${determination_scientificName_4}&quot;,&#xd;
	      	&quot;transcriberRemarks&quot;: &quot;${determination_transcriberRemarks_4}&quot;,&#xd;
	      	&quot;verbatimRemarks&quot;: &quot;${determination_verbatimRemarks_4}&quot;,&#xd;
	      	&quot;determinationRemarks&quot;: &quot;${determination_determinationRemarks_4}&quot;,&#xd;
	      	&quot;typeStatus&quot;: &quot;${determination_typeStatus_4}&quot;,&#xd;
	      	&quot;typeStatusEvidence&quot;: &quot;${determination_typeStatusEvidence_4}&quot;,&#xd;
	      	&quot;determiner&quot;: ${determination_determiner_4},&#xd;
	      	&quot;determinedOn&quot;: &quot;${determination_determinedOn_4}&quot;,&#xd;
	      	&quot;qualifier&quot;: &quot;${determination_qualifier_4}&quot;,&#xd;
	      	&quot;scientificNameSource&quot;: &quot;${determination_scientificNameSource_4}&quot;,&#xd;
	      	&quot;scientificNameDetails&quot;: {&#xd;
	      		&quot;classificationPath&quot;: &quot;${determination_scientificNameDetails_classificationPath_4}&quot;,&#xd;
	      		&quot;classificationRanks&quot;: &quot;${determination_scientificNameDetails_classificationRanks_4}&quot;,&#xd;
	      		&quot;sourceUrl&quot;: &quot;${determination_scientificNameDetails_sourceUrl_4}&quot;,&#xd;
	      		&quot;labelHtml&quot;: &quot;${determination_scientificNameDetails_labelHtml_4}&quot;,&#xd;
	      		&quot;recordedOn&quot;: &quot;${determination_scientificNameDetails_recordedOn_4}&quot;,&#xd;
	      		&quot;currentName&quot;: &quot;${determination_scientificNameDetails_currentName_4}&quot;,&#xd;
	      		&quot;isSynonym&quot;: ${determination_scientificNameDetails_isSynonym_4}&#xd;
	      	},&#xd;
	      	&quot;isPrimary&quot;: ${determination_isPrimary_4},&#xd;
	      	&quot;isFiledAs&quot;: ${determination_isFiledAs_4}&#xd;
	      }&#xd;
      ]&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/organism/${verbose_organism_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Verbose Organism" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the verbose Organism have been updated and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Verbose Organism Updated" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/organism/${verbose_organism_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Updated Verbose Orgnaism - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.group == &quot;${user_group}&quot;
assert attr.isTarget == ${isTarget_4}
assert attr.lifeStage == &quot;${lifeStage_4}&quot;
assert attr.sex == &quot;${sex_4}&quot;
assert attr.remarks == &quot;${remarks_4}&quot;
assert attr.determination[0].verbatimScientificName  == &quot;${determination_verbatimScientificName_4}&quot;
assert attr.determination[0].verbatimDeterminer == &quot;${determination_verbatimDeterminer_4}&quot;
assert attr.determination[0].verbatimDate == &quot;${determination_verbatimDate_4}&quot;
assert attr.determination[0].scientificName == &quot;${determination_scientificName_4}&quot;
assert attr.determination[0].transcriberRemarks == &quot;${determination_transcriberRemarks_4}&quot;
assert attr.determination[0].verbatimRemarks == &quot;${determination_verbatimRemarks_4}&quot;
assert attr.determination[0].determinationRemarks == &quot;${determination_determinationRemarks_4}&quot;
assert attr.determination[0].typeStatus == &quot;${determination_typeStatus_4}&quot;
assert attr.determination[0].typeStatusEvidence == &quot;${determination_typeStatusEvidence_4}&quot;
assert attr.determination[0].determiner == ${determination_determiner_4}
assert attr.determination[0].determinedOn == &quot;${determination_determinedOn_4}&quot;
assert attr.determination[0].qualifier == &quot;${determination_qualifier_4}&quot;
assert attr.determination[0].scientificNameSource == &quot;${determination_scientificNameSource_4}&quot;
assert attr.determination[0].scientificNameDetails.classificationPath == &quot;${determination_scientificNameDetails_classificationPath_4}&quot;
assert attr.determination[0].scientificNameDetails.classificationRanks == &quot;${determination_scientificNameDetails_classificationRanks_4}&quot;
assert attr.determination[0].scientificNameDetails.sourceUrl == &quot;${determination_scientificNameDetails_sourceUrl_4}&quot;
assert attr.determination[0].scientificNameDetails.labelHtml == &quot;${determination_scientificNameDetails_labelHtml_4}&quot;
assert attr.determination[0].scientificNameDetails.recordedOn == &quot;${determination_scientificNameDetails_recordedOn_4}&quot;
assert attr.determination[0].scientificNameDetails.currentName == &quot;${determination_scientificNameDetails_currentName_4}&quot;
assert attr.determination[0].scientificNameDetails.isSynonym == ${determination_scientificNameDetails_isSynonym_4}
assert attr.determination[0].isPrimary == true // Should automaticlly become true as it is only determination
assert attr.determination[0].isFiledAs == ${determination_isFiledAs_4}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Organism w/ Empty Body" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose Organism record w/ an empty body request</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Verbose Organism w/ Empty Body" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;organism&quot;,&#xd;
    &quot;attributes&quot;: {}&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/organism/${verbose_organism_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Validate Update Verbose Organism" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="1860862835">Organism End2End Thread Group</stringProp>
                <stringProp name="-1754979095">Update</stringProp>
                <stringProp name="-1843846672">Verbose Organism</stringProp>
                <stringProp name="1958786970">Validate Verbose Organism</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Organism w/ Invalid UUID" enabled="true">
            <stringProp name="TestPlan.comments">Updates a Organism at a UUID that does not correspond to any Organism - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Organism w/ Invalid UUID" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;organism&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;isTarget&quot;: ${isTarget_3},&#xd;
      &quot;lifeStage&quot;: &quot;${lifeStage_3}&quot;,&#xd;
      &quot;sex&quot;: &quot;${sex_3}&quot;,&#xd;
      &quot;remarks&quot;: &quot;${remarks_3}&quot;,&#xd;
      &quot;determination&quot;: [&#xd;
	      {&#xd;
	      	&quot;verbatimScientificName&quot;: &quot;${determination_verbatimScientificName_3}&quot;,&#xd;
	      	&quot;verbatimDeterminer&quot;: &quot;${determination_verbatimDeterminer_3}&quot;,&#xd;
	      	&quot;verbatimDate&quot;: &quot;${determination_verbatimDate_3}&quot;,&#xd;
	      	&quot;transcriberRemarks&quot;: &quot;${determination_transcriberRemarks_3}&quot;,&#xd;
	      	&quot;verbatimRemarks&quot;: &quot;${determination_verbatimRemarks_3}&quot;,&#xd;
	      	&quot;determinationRemarks&quot;: &quot;${determination_determinationRemarks_3}&quot;,&#xd;
	      	&quot;typeStatus&quot;: &quot;${determination_typeStatus_3}&quot;,&#xd;
	      	&quot;typeStatusEvidence&quot;: &quot;${determination_typeStatusEvidence_3}&quot;,&#xd;
	      	&quot;determiner&quot;: ${determination_determiner_3},&#xd;
	      	&quot;determinedOn&quot;: &quot;${determination_determinedOn_3}&quot;,&#xd;
	      	&quot;qualifier&quot;: &quot;${determination_qualifier_3}&quot;,&#xd;
	      	&quot;scientificNameSource&quot;: &quot;${determination_scientificNameSource_3}&quot;,&#xd;
	      	&quot;scientificNameDetails&quot;: {&#xd;
	      		&quot;classificationPath&quot;: &quot;${determination_scientificNameDetails_classificationPath_3}&quot;,&#xd;
	      		&quot;classificationRanks&quot;: &quot;${determination_scientificNameDetails_classificationRanks_3}&quot;,&#xd;
	      		&quot;sourceUrl&quot;: &quot;${determination_scientificNameDetails_sourceUrl_3}&quot;,&#xd;
	      		&quot;labelHtml&quot;: &quot;${determination_scientificNameDetails_labelHtml_3}&quot;,&#xd;
	      		&quot;recordedOn&quot;: &quot;${determination_scientificNameDetails_recordedOn_3}&quot;,&#xd;
	      		&quot;currentName&quot;: &quot;${determination_scientificNameDetails_currentName_3}&quot;,&#xd;
	      		&quot;isSynonym&quot;: ${determination_scientificNameDetails_isSynonym_3}&#xd;
	      	},&#xd;
	      	&quot;isPrimary&quot;: ${determination_isPrimary_3},&#xd;
	      	&quot;isFiledAs&quot;: ${determination_isFiledAs_3}&#xd;
	      }&#xd;
      ]&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/organism/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Organism" enabled="true">
            <stringProp name="TestPlan.comments">Removes the verbose Organism record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Verbose Organism" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/organism/${verbose_organism_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Delete Verbose" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the verbose Organism has been removed</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Verbose Organism Removed" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/organism/${verbose_organism_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 410 Error" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;410&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Organism" enabled="true">
            <stringProp name="TestPlan.comments">Removes the basic Organism record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Basic Organism" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/organism/${basic_organism_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Delete Basic" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the basic Organism has been removed</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Basic Organism Removed" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/organism/${basic_organism_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 410 Error" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;410&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Organism w/ Invalid UUId" enabled="true">
            <stringProp name="TestPlan.comments">Removes a Organism record at a UUID that does not correspond to any Organism - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Organism w/ Invalid UUID" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/organism/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Assemblage End2End Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Assemblage Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="multilingualTitle_1" elementType="Argument">
              <stringProp name="Argument.name">multilingualTitle_1</stringProp>
              <stringProp name="Argument.value">{&quot;titles&quot;:[{&quot;lang&quot;:&quot;en&quot;,&quot;title&quot;:&quot;title_1&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multilingualTitle_2" elementType="Argument">
              <stringProp name="Argument.name">multilingualTitle_2</stringProp>
              <stringProp name="Argument.value">{&quot;titles&quot;:[{&quot;lang&quot;:&quot;en&quot;,&quot;title&quot;:&quot;title_2&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multilingualTitle_3" elementType="Argument">
              <stringProp name="Argument.name">multilingualTitle_3</stringProp>
              <stringProp name="Argument.value">{&quot;titles&quot;:[{&quot;lang&quot;:&quot;fr&quot;,&quot;title&quot;:&quot;title_3&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multilingualTitle_4" elementType="Argument">
              <stringProp name="Argument.name">multilingualTitle_4</stringProp>
              <stringProp name="Argument.value">{&quot;titles&quot;:[{&quot;lang&quot;:&quot;fr&quot;,&quot;title&quot;:&quot;title_4&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multilingualDescription_1" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_1</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;en&quot;,&quot;desc&quot;:&quot;desc_1&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multilingualDescription_2" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_2</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;en&quot;,&quot;desc&quot;:&quot;desc_2&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multilingualDescription_3" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_3</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;fr&quot;,&quot;desc&quot;:&quot;desc_3&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multilingualDescription_4" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_4</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;fr&quot;,&quot;desc&quot;:&quot;desc_4&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Thread Group Request Headers" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__P(access_token)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/vnd.api+json</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">Required headers to perform API requests</stringProp>
        </HeaderManager>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Token Controller" enabled="true">
          <stringProp name="TestPlan.comments">Runs the Token Controller in the setUp thread group to refresh the access token</stringProp>
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
            <stringProp name="1506430348">setUp Thread Group</stringProp>
            <stringProp name="52452451">Token Controller</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="setUp Controller" enabled="true">
            <stringProp name="TestPlan.comments">Sets random variables and creates relationship entities required for Assemblage testing</stringProp>
          </GenericController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Set Random Variables" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def ctx = org.apache.jmeter.threads.JMeterContextService.getContext()

ctx.getVariables().put(&quot;name_1&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_2&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_3&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_4&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Assemblage" enabled="true">
            <stringProp name="TestPlan.comments">Creates a basic Assemblage record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Basic Assemblage" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;assemblage&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    	 &quot;name&quot;: &quot;${name_1}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/assemblage</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Basic Assemblage UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">basic_assemblage_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Basic Assemblage" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the basic Assemblage have been created and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Basic Assemblage Creation" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/assemblage/${basic_assemblage_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Created Basic Assemblage - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_1}&quot;
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Assemblage" enabled="true">
            <stringProp name="TestPlan.comments">Creates a verbose Assemblage record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Verbose Assemblage" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;assemblage&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    	 &quot;name&quot;: &quot;${name_2}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;multilingualTitle&quot;: ${multilingualTitle_2},&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_2}&#xd;
    },&#xd;
    &quot;relationships&quot;: {&#xd;
      &quot;attachment&quot;: {&#xd;
        &quot;data&quot;: {&#xd;
        	&quot;type&quot;: &quot;metadata&quot;,&#xd;
        	&quot;id&quot;: &quot;${__P(attachment_uuid_1)}&quot;&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/assemblage</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Verbose Assemblage UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">verbose_assemblage_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Verbose Assemblage" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the verbose Assemblage have been created and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Verbose Assemblage Creation" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/assemblage/${verbose_assemblage_uuid}?include=attachment</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Created Verbose Assemblage - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_2}&quot;
assert attr.group == &quot;${user_group}&quot;

def rel = object.data.relationships

assert rel.attachment.data[0].id == &quot;${__P(attachment_uuid_1)}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Created Verbose Assemblage - Multilingual Title Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Map data conflicts with groovy script syntax and will be asserted separately</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.multilingualTitle</stringProp>
                  <stringProp name="EXPECTED_VALUE">${multilingualTitle_2}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Created Verbose Assemblage - Multilingual Description Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Map data conflicts with groovy script syntax and will be asserted separately</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.multilingualDescription</stringProp>
                  <stringProp name="EXPECTED_VALUE">${multilingualDescription_2}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Assemblage w/ Empty Attributes" enabled="true">
            <stringProp name="TestPlan.comments">Creates a Assemblage without any attributes specified - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Empty Attributes - Create Assemblage" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;assemblage&quot;,&#xd;
    &quot;attributes&quot;: {}&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/assemblage</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 403 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;403&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Assemblage w/ Only User Group" enabled="true">
            <stringProp name="TestPlan.comments">Creates a Assemblage with only user group specified - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Only User Group - Create Assemblage" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;assemblage&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/assemblage</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 422 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;422&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Assemblage w/ Incorrect Type" enabled="true">
            <stringProp name="TestPlan.comments">Creates a Assemblage with the incorrect type specified - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Incorrect Type - Create Assemblage" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;material-sample&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    	 &quot;name&quot;: &quot;${name_1}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/assemblage</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 400 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;400&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Assemblage" enabled="true">
            <stringProp name="TestPlan.comments">Updates the basic Assemblage record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Basic Assemblage" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;assemblage&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    	 &quot;name&quot;: &quot;${name_3}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;multilingualTitle&quot;: ${multilingualTitle_3},&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_3}&#xd;
    },&#xd;
    &quot;relationships&quot;: {&#xd;
      &quot;attachment&quot;: {&#xd;
        &quot;data&quot;: {&#xd;
        	&quot;type&quot;: &quot;metadata&quot;,&#xd;
        	&quot;id&quot;: &quot;${__P(attachment_uuid_2)}&quot;&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/assemblage/${basic_assemblage_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Basic Assemblage" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the basic Assemblage have been updated and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Basic Assemblage Updated" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/assemblage/${basic_assemblage_uuid}?include=attachment</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Updated Basic Assemblage - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_3}&quot;
assert attr.group == &quot;${user_group}&quot;

def rel = object.data.relationships

assert rel.attachment.data[0].id == &quot;${__P(attachment_uuid_2)}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Updated Basic Assemblage - Multilingual Title Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Map data conflicts with groovy script syntax and will be asserted separately</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.multilingualTitle</stringProp>
                  <stringProp name="EXPECTED_VALUE">${multilingualTitle_3}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Updated Basic Assemblage - Multilingual Description Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Map data conflicts with groovy script syntax and will be asserted separately</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.multilingualDescription</stringProp>
                  <stringProp name="EXPECTED_VALUE">${multilingualDescription_3}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Assemblage" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose Assemblage record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Verbose Assemblage" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;assemblage&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    	 &quot;name&quot;: &quot;${name_4}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;multilingualTitle&quot;: ${multilingualTitle_4},&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_4}&#xd;
    },&#xd;
    &quot;relationships&quot;: {&#xd;
      &quot;attachment&quot;: {&#xd;
        &quot;data&quot;: {&#xd;
        	&quot;type&quot;: &quot;metadata&quot;,&#xd;
        	&quot;id&quot;: &quot;${__P(attachment_uuid_2)}&quot;&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/assemblage/${verbose_assemblage_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Verbose Assemblage" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the verbose Assemblage have been updated and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Verbose Assemblage Updated" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/assemblage/${verbose_assemblage_uuid}?include=attachment</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Updated Verbose Assemblage - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_4}&quot;
assert attr.group == &quot;${user_group}&quot;

def rel = object.data.relationships

assert rel.attachment.data[0].id == &quot;${__P(attachment_uuid_2)}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Updated Verbose Assemblage - Multilingual Title Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Map data conflicts with groovy script syntax and will be asserted separately</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.multilingualTitle</stringProp>
                  <stringProp name="EXPECTED_VALUE">${multilingualTitle_4}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Updated Verbose Assemblage - Multilingual Description Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Map data conflicts with groovy script syntax and will be asserted separately</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.multilingualDescription</stringProp>
                  <stringProp name="EXPECTED_VALUE">${multilingualDescription_4}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Assemblage w/ Empty Body" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose Assemblage record w/ an empty body request</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Verbose Assemblage w/ Empty Body" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;assemblage&quot;,&#xd;
    &quot;attributes&quot;: {}&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/assemblage/${verbose_assemblage_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="1661393241">Assemblage End2End Thread Group</stringProp>
                <stringProp name="-1754979095">Update</stringProp>
                <stringProp name="1487200458">Verbose Assemblage</stringProp>
                <stringProp name="800961524">Validate Verbose Assemblage</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Assemblage w/ Invalid UUID" enabled="true">
            <stringProp name="TestPlan.comments">Updates a Assemblage at a UUID that does not correspond to any Assemblage - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Invalid Assemblage" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;assemblage&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    	 &quot;name&quot;: &quot;${name_3}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;multilingualTitle&quot;: ${multilingualTitle_3},&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_3}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/assemblage/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Assemblage" enabled="true">
            <stringProp name="TestPlan.comments">Removes the verbose Assemblage record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Verbose Assemblage" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/assemblage/${verbose_assemblage_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Verbose Assemblage" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the verbose Assemblage has been removed</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Delete Verbose - Retrieve Verbose Assemblage" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/assemblage/${verbose_assemblage_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 410 Error" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;410&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Assemblage" enabled="true">
            <stringProp name="TestPlan.comments">Removes the basic Assemblage record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Basic Assemblage" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/assemblage/${basic_assemblage_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Basic Assemblage" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the basic Assemblage has been removed</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Delete Basic - Retrieve Basic Assemblage" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/assemblage/${basic_assemblage_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 410 Error" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;410&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Assemblage w/ Invalid UUID" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Assemblage w/ Invalid UUID" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/assemblage/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Removes a Assemblage record at a UUID that does not correspond to any Assemblage - Produces an Error
</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Project End2End Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Project Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="startDate_1" elementType="Argument">
              <stringProp name="Argument.name">startDate_1</stringProp>
              <stringProp name="Argument.value">2012-08-02</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="startDate_2" elementType="Argument">
              <stringProp name="Argument.name">startDate_2</stringProp>
              <stringProp name="Argument.value">2013-08-02</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="startDate_3" elementType="Argument">
              <stringProp name="Argument.name">startDate_3</stringProp>
              <stringProp name="Argument.value">2014-08-02</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="startDate_4" elementType="Argument">
              <stringProp name="Argument.name">startDate_4</stringProp>
              <stringProp name="Argument.value">2012-09-02</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="endDate_1" elementType="Argument">
              <stringProp name="Argument.name">endDate_1</stringProp>
              <stringProp name="Argument.value">2012-09-02</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="endDate_2" elementType="Argument">
              <stringProp name="Argument.name">endDate_2</stringProp>
              <stringProp name="Argument.value">2015-09-02</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="endDate_3" elementType="Argument">
              <stringProp name="Argument.name">endDate_3</stringProp>
              <stringProp name="Argument.value">2018-09-02</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="endDate_4" elementType="Argument">
              <stringProp name="Argument.name">endDate_4</stringProp>
              <stringProp name="Argument.value">2019-09-02</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="status_1" elementType="Argument">
              <stringProp name="Argument.name">status_1</stringProp>
              <stringProp name="Argument.value">ongoing</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="status_2" elementType="Argument">
              <stringProp name="Argument.name">status_2</stringProp>
              <stringProp name="Argument.value">pending</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="status_3" elementType="Argument">
              <stringProp name="Argument.name">status_3</stringProp>
              <stringProp name="Argument.value">processing</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="status_4" elementType="Argument">
              <stringProp name="Argument.name">status_4</stringProp>
              <stringProp name="Argument.value">completed</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multilingualDescription_1" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_1</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;en&quot;,&quot;desc&quot;:&quot;desc_1&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multilingualDescription_2" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_2</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;en&quot;,&quot;desc&quot;:&quot;desc_2&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multilingualDescription_3" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_3</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;fr&quot;,&quot;desc&quot;:&quot;desc_3&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multilingualDescription_4" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_4</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;fr&quot;,&quot;desc&quot;:&quot;desc_4&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Thread Group Request Headers" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__P(access_token)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/vnd.api+json</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">Required headers to perform API requests</stringProp>
        </HeaderManager>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Token Controller" enabled="true">
          <stringProp name="TestPlan.comments">Runs the Token Controller in the setUp thread group to refresh the access token</stringProp>
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
            <stringProp name="1506430348">setUp Thread Group</stringProp>
            <stringProp name="52452451">Token Controller</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="setUp Controller" enabled="true">
            <stringProp name="TestPlan.comments">Sets random variables and creates relationship entities required for Project testing</stringProp>
          </GenericController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Set Random Variables" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def ctx = org.apache.jmeter.threads.JMeterContextService.getContext()

ctx.getVariables().put(&quot;name_1&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_2&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_3&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_4&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Project" enabled="true">
            <stringProp name="TestPlan.comments">Creates a basic Project record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Basic Project" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;project&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    	 &quot;name&quot;: &quot;${name_1}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/project</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Basic Project UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">basic_project_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Basic Project" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the basic Project have been created and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Basic Project Creation" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/project/${basic_project_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Created Basic Project - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_1}&quot;
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Project" enabled="true">
            <stringProp name="TestPlan.comments">Creates a verbose Project record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Verbose Project" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;project&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    	 &quot;name&quot;: &quot;${name_2}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;startDate&quot;: &quot;${startDate_2}&quot;,&#xd;
      &quot;endDate&quot;: &quot;${endDate_2}&quot;,&#xd;
      &quot;status&quot;: &quot;${status_2}&quot;,&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_2}&#xd;
    },&#xd;
    &quot;relationships&quot;: {&#xd;
      &quot;attachment&quot;: {&#xd;
        &quot;data&quot;: {&#xd;
        	&quot;type&quot;: &quot;metadata&quot;,&#xd;
        	&quot;id&quot;: &quot;${__P(attachment_uuid_1)}&quot;&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/project</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Verbose Project UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">verbose_project_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Verbose Project" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the verbose Project have been created and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Verbose Project Creation" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/project/${verbose_project_uuid}?include=attachment</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Created Verbose Project - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_2}&quot;
assert attr.group == &quot;${user_group}&quot;
assert attr.startDate == &quot;${startDate_2}&quot;
assert attr.endDate == &quot;${endDate_2}&quot;
assert attr.status == &quot;${status_2}&quot;

def rel = object.data.relationships

assert rel.attachment.data[0].id == &quot;${__P(attachment_uuid_1)}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Created Verbose Project - Multilingual Description Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Map data conflicts with groovy script syntax and will be asserted separately</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.multilingualDescription</stringProp>
                  <stringProp name="EXPECTED_VALUE">${multilingualDescription_2}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Project w/ Empty Attributes" enabled="true">
            <stringProp name="TestPlan.comments">Creates a Project without any attributes specified - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Project w/ Empty Attributes" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;project&quot;,&#xd;
    &quot;attributes&quot;: {}&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/project</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 403 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;403&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Project w/ Only User Group" enabled="true">
            <stringProp name="TestPlan.comments">Creates a Project with only user group specified - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Project w/ Only User Group" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;project&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/project</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 422 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;422&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Project w/ Incorrect Type" enabled="true">
            <stringProp name="TestPlan.comments">Creates a Project with the incorrect type specified - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Project w/ Incorrect Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;material-sample&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    	 &quot;name&quot;: &quot;${name_1}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/project</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 400 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;400&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Project" enabled="true">
            <stringProp name="TestPlan.comments">Updates the basic Project record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Basic Project" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;project&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    	 &quot;name&quot;: &quot;${name_3}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;startDate&quot;: &quot;${startDate_3}&quot;,&#xd;
      &quot;endDate&quot;: &quot;${endDate_3}&quot;,&#xd;
      &quot;status&quot;: &quot;${status_3}&quot;,&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_3}&#xd;
    },&#xd;
    &quot;relationships&quot;: {&#xd;
      &quot;attachment&quot;: {&#xd;
        &quot;data&quot;: {&#xd;
        	&quot;type&quot;: &quot;metadata&quot;,&#xd;
        	&quot;id&quot;: &quot;${__P(attachment_uuid_2)}&quot;&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/project/${basic_project_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Basic Project" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the basic Project have been updated and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Basic Project Updated" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/project/${basic_project_uuid}?include=attachment</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Updated Basic Project - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_3}&quot;
assert attr.group == &quot;${user_group}&quot;
assert attr.startDate == &quot;${startDate_3}&quot;
assert attr.endDate == &quot;${endDate_3}&quot;
assert attr.status == &quot;${status_3}&quot;

def rel = object.data.relationships

assert rel.attachment.data[0].id == &quot;${__P(attachment_uuid_2)}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Updated Basic Project - Multilingual Description Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Map data conflicts with groovy script syntax and will be asserted separately</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.multilingualDescription</stringProp>
                  <stringProp name="EXPECTED_VALUE">${multilingualDescription_3}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Project" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose Project record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Verbose Project" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;project&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    	 &quot;name&quot;: &quot;${name_4}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;startDate&quot;: &quot;${startDate_4}&quot;,&#xd;
      &quot;endDate&quot;: &quot;${endDate_4}&quot;,&#xd;
      &quot;status&quot;: &quot;${status_4}&quot;,&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_4}&#xd;
    },&#xd;
    &quot;relationships&quot;: {&#xd;
      &quot;attachment&quot;: {&#xd;
        &quot;data&quot;: {&#xd;
        	&quot;type&quot;: &quot;metadata&quot;,&#xd;
        	&quot;id&quot;: &quot;${__P(attachment_uuid_2)}&quot;&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/project/${verbose_project_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Verbose Project" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the verbose Project have been updated and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Verbose Project Updated" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/project/${verbose_project_uuid}?include=attachment</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Updated Verbose Project - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_4}&quot;
assert attr.group == &quot;${user_group}&quot;
assert attr.startDate == &quot;${startDate_4}&quot;
assert attr.endDate == &quot;${endDate_4}&quot;
assert attr.status == &quot;${status_4}&quot;

def rel = object.data.relationships

assert rel.attachment.data[0].id == &quot;${__P(attachment_uuid_2)}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Updated Verbose Project - Multilingual Description Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Map data conflicts with groovy script syntax and will be asserted separately</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.multilingualDescription</stringProp>
                  <stringProp name="EXPECTED_VALUE">${multilingualDescription_4}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Project w/ Empty Body" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose Project record w/ an empty body request</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Verbose Project w/ Empty Body" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;project&quot;,&#xd;
    &quot;attributes&quot;: {}&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/project/${verbose_project_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="1302683596">Project End2End Thread Group</stringProp>
                <stringProp name="-1754979095">Update</stringProp>
                <stringProp name="-1935274437">Verbose Project</stringProp>
                <stringProp name="-1119872175">Validate Verbose Project</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Project w/ Invalid UUID" enabled="true">
            <stringProp name="TestPlan.comments">Updates a Project at a UUID that does not correspond to any Project - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Project w/ Invalid UUID" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;project&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    	 &quot;name&quot;: &quot;${name_3}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;startDate&quot;: &quot;${startDate_3}&quot;,&#xd;
      &quot;endDate&quot;: &quot;${endDate_3}&quot;,&#xd;
      &quot;status&quot;: &quot;${status_3}&quot;,&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_3}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/project/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Project" enabled="true">
            <stringProp name="TestPlan.comments">Removes the verbose Project record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Verbose Project" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/project/${verbose_project_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Verbose Project" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the verbose Project has been removed</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Verbose Project Removed" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/project/${verbose_project_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 410 Error" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;410&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Project" enabled="true">
            <stringProp name="TestPlan.comments">Removes the basic Project record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Basic Project" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/project/${basic_project_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Basic Project" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the basic Project has been removed</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Basic Project Removed" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/project/${basic_project_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 410 Error" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;410&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Project w/ Invalid UUID" enabled="true">
            <stringProp name="TestPlan.comments">Removes a Project record at a UUID that does not correspond to any Project - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Project w/ Invalid UUID" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/project/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Protocol End2End Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Protocol Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="protocolType_1" elementType="Argument">
              <stringProp name="Argument.name">protocolType_1</stringProp>
              <stringProp name="Argument.value">dna_extraction</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="protocolType_2" elementType="Argument">
              <stringProp name="Argument.name">protocolType_2</stringProp>
              <stringProp name="Argument.value">pcr_reaction</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="protocolType_3" elementType="Argument">
              <stringProp name="Argument.name">protocolType_3</stringProp>
              <stringProp name="Argument.value">sequence_reaction</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="protocolType_4" elementType="Argument">
              <stringProp name="Argument.name">protocolType_4</stringProp>
              <stringProp name="Argument.value">collection_method</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multilingualDescription_1" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_1</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;en&quot;,&quot;desc&quot;:&quot;desc_1&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multilingualDescription_2" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_2</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;en&quot;,&quot;desc&quot;:&quot;desc_2&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multilingualDescription_3" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_3</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;fr&quot;,&quot;desc&quot;:&quot;desc_3&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multilingualDescription_4" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_4</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;fr&quot;,&quot;desc&quot;:&quot;desc_4&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="protocolData_1" elementType="Argument">
              <stringProp name="Argument.name">protocolData_1</stringProp>
              <stringProp name="Argument.value">[]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="protocolData_2" elementType="Argument">
              <stringProp name="Argument.name">protocolData_2</stringProp>
              <stringProp name="Argument.value">[{&quot;key&quot;:&quot;forward_primer&quot;,&quot;vocabularyBased&quot;:true,&quot;protocolDataElement&quot;:[{&quot;elementType&quot;:&quot;concentration&quot;,&quot;value&quot;:&quot;0.10&quot;,&quot;vocabularyBased&quot;:false,&quot;unit&quot;:&quot;uM&quot;}]}]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="protocolData_3" elementType="Argument">
              <stringProp name="Argument.name">protocolData_3</stringProp>
              <stringProp name="Argument.value">[{&quot;key&quot;:&quot;forward_primer&quot;,&quot;vocabularyBased&quot;:true,&quot;protocolDataElement&quot;:[{&quot;elementType&quot;:&quot;concentration&quot;,&quot;value&quot;:&quot;0.10&quot;,&quot;vocabularyBased&quot;:false,&quot;unit&quot;:&quot;uM&quot;}]},{&quot;key&quot;:&quot;reverse_primer&quot;,&quot;vocabularyBased&quot;:true,&quot;protocolDataElement&quot;:[{&quot;elementType&quot;:&quot;concentration&quot;,&quot;value&quot;:&quot;0.10&quot;,&quot;vocabularyBased&quot;:false,&quot;unit&quot;:&quot;uM&quot;}]}]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="protocolData_4" elementType="Argument">
              <stringProp name="Argument.name">protocolData_4</stringProp>
              <stringProp name="Argument.value">[{&quot;key&quot;:&quot;forward_primer&quot;,&quot;vocabularyBased&quot;:true,&quot;protocolDataElement&quot;:[{&quot;elementType&quot;:&quot;concentration&quot;,&quot;value&quot;:&quot;0.10&quot;,&quot;vocabularyBased&quot;:false,&quot;unit&quot;:&quot;uM&quot;}]},{&quot;key&quot;:&quot;reverse_primer&quot;,&quot;vocabularyBased&quot;:true,&quot;protocolDataElement&quot;:[{&quot;elementType&quot;:&quot;concentration&quot;,&quot;value&quot;:&quot;0.10&quot;,&quot;vocabularyBased&quot;:false,&quot;unit&quot;:&quot;uM&quot;}]},{&quot;key&quot;:&quot;universal_primer&quot;,&quot;vocabularyBased&quot;:false,&quot;protocolDataElement&quot;:[{&quot;elementType&quot;:&quot;concentration&quot;,&quot;value&quot;:&quot;0.10&quot;,&quot;vocabularyBased&quot;:false,&quot;unit&quot;:&quot;uM&quot;}]}]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Thread Group Request Headers" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__P(access_token)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/vnd.api+json</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">Required headers to perform API requests</stringProp>
        </HeaderManager>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Token Controller" enabled="true">
          <stringProp name="TestPlan.comments">Runs the Token Controller in the setUp thread group to refresh the access token</stringProp>
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
            <stringProp name="1506430348">setUp Thread Group</stringProp>
            <stringProp name="52452451">Token Controller</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Protocol setUp" enabled="true">
            <stringProp name="TestPlan.comments">Sets random variables and creates relationship entities required for Protocol testing</stringProp>
          </GenericController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Set Random Variables" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def ctx = org.apache.jmeter.threads.JMeterContextService.getContext()

ctx.getVariables().put(&quot;name_1&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_2&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_3&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_4&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Protocol" enabled="true">
            <stringProp name="TestPlan.comments">Creates a basic Protocol record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Basic Protocol" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;protocol&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    	 &quot;name&quot; : &quot;${name_1}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/protocol</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Sets random variables and creates relationship entities required for Protocol testing</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Basic Protocol UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">basic_protocol_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Basic Protocol" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the basic Protocol have been created and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Basic Protocol" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/protocol/${basic_protocol_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Created Basic Protocol - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_1}&quot;
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Protocol" enabled="true">
            <stringProp name="TestPlan.comments">Creates a verbose Protocol record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Verbose Protocol" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;protocol&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    	 &quot;name&quot; : &quot;${name_2}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;protocolType&quot;: &quot;${protocolType_2}&quot;,&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_2},&#xd;
      &quot;protocolData&quot;: ${protocolData_2}&#xd;
    },&#xd;
    &quot;relationships&quot;: {&#xd;
      &quot;attachments&quot;: {&#xd;
        &quot;data&quot;: {&#xd;
        	&quot;type&quot;: &quot;metadata&quot;,&#xd;
        	&quot;id&quot;: &quot;${__P(attachment_uuid_1)}&quot;&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/protocol</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Verbose Protocol UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">verbose_protocol_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Verbose Protocol" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the verbose Protocol have been created and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Verbose Protocol" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/protocol/${verbose_protocol_uuid}?include=attachments</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Created Verbose Protocol - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_2}&quot;
assert attr.group == &quot;${user_group}&quot;
assert attr.protocolType == &quot;${protocolType_2}&quot;

def rel = object.data.relationships

assert rel.attachments.data[0].id == &quot;${__P(attachment_uuid_1)}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Created Verbose Protocol - Multilingual Description Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Map data conflicts with groovy script syntax and will be asserted separately</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.multilingualDescription</stringProp>
                  <stringProp name="EXPECTED_VALUE">${multilingualDescription_2}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Created Verbose Protocol - Protocol Data Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Map data conflicts with groovy script syntax and will be asserted separately</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.protocolData</stringProp>
                  <stringProp name="EXPECTED_VALUE">${protocolData_2}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Protocol w/ Empty Attributes" enabled="true">
            <stringProp name="TestPlan.comments">Creates a Protocol without any attributes specified - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Protocol w/ Empty Attributes" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;protocol&quot;,&#xd;
    &quot;attributes&quot;: {}&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/protocol</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 403 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;403&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Protocol w/ Only User Group" enabled="true">
            <stringProp name="TestPlan.comments">Creates a Protocol with only user group specified - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Protocol w/ Only User Group" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;protocol&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/protocol</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 422 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;422&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Protocol w/ Incorrect Type" enabled="true">
            <stringProp name="TestPlan.comments">Creates a Protocol with the incorrect type specified - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Protocol w/ Incorrect Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;material-sample&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    	 &quot;name&quot; : &quot;${name_1}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/protocol</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 400 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;400&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Protocol" enabled="true">
            <stringProp name="TestPlan.comments">Updates the basic Protocol record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Basic Protocol" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;protocol&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    	 &quot;name&quot; : &quot;${name_3}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;protocolType&quot;: &quot;${protocolType_3}&quot;,&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_3},&#xd;
      &quot;protocolData&quot;: ${protocolData_3}&#xd;
    },&#xd;
    &quot;relationships&quot;: {&#xd;
      &quot;attachments&quot;: {&#xd;
        &quot;data&quot;: {&#xd;
        	&quot;type&quot;: &quot;metadata&quot;,&#xd;
        	&quot;id&quot;: &quot;${__P(attachment_uuid_2)}&quot;&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/protocol/${basic_protocol_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Basic Protocol" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the basic Protocol have been updated and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Basic Protocol Updated" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/protocol/${basic_protocol_uuid}?include=attachments</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Updated Basic Protocol - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_3}&quot;
assert attr.group == &quot;${user_group}&quot;
assert attr.protocolType == &quot;${protocolType_3}&quot;

def rel = object.data.relationships

assert rel.attachments.data[0].id == &quot;${__P(attachment_uuid_2)}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Updated Basic Protocol - Multilingual Description Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Map data conflicts with groovy script syntax and will be asserted separately</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.multilingualDescription</stringProp>
                  <stringProp name="EXPECTED_VALUE">${multilingualDescription_3}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Updated Basic Protocol - Protocol Data Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Map data conflicts with groovy script syntax and will be asserted separately</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.protocolData</stringProp>
                  <stringProp name="EXPECTED_VALUE">${protocolData_3}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Protocol" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose Protocol record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Verbose Protocol" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;protocol&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    	 &quot;name&quot; : &quot;${name_4}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;protocolType&quot;: &quot;${protocolType_4}&quot;,&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_4},&#xd;
      &quot;protocolData&quot;: ${protocolData_4}&#xd;
    },&#xd;
    &quot;relationships&quot;: {&#xd;
      &quot;attachments&quot;: {&#xd;
        &quot;data&quot;: {&#xd;
        	&quot;type&quot;: &quot;metadata&quot;,&#xd;
        	&quot;id&quot;: &quot;${__P(attachment_uuid_2)}&quot;&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/protocol/${verbose_protocol_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Verbose Protocol" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the verbose Protocol have been updated and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Verbose Protocol Updated" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/protocol/${verbose_protocol_uuid}?include=attachments</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Updated Verbose Protocol - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_4}&quot;
assert attr.group == &quot;${user_group}&quot;
assert attr.protocolType == &quot;${protocolType_4}&quot;

def rel = object.data.relationships

assert rel.attachments.data[0].id == &quot;${__P(attachment_uuid_2)}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Updated Verbose Protocol - Multilingual Description Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Map data conflicts with groovy script syntax and will be asserted separately</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.multilingualDescription</stringProp>
                  <stringProp name="EXPECTED_VALUE">${multilingualDescription_4}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Updated Verbose Protocol - Protocol Data Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Map data conflicts with groovy script syntax and will be asserted separately</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.protocolData</stringProp>
                  <stringProp name="EXPECTED_VALUE">${protocolData_4}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Protocol w/ Empty Body" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose Protocol record w/ an empty body request</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Verbose Protocol w/ Empty Body" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;protocol&quot;,&#xd;
    &quot;attributes&quot;: {}&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/protocol/${verbose_protocol_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="1925115245">Protocol End2End Thread Group</stringProp>
                <stringProp name="-1754979095">Update</stringProp>
                <stringProp name="145567670">Verbose Protocol</stringProp>
                <stringProp name="-346765984">Validate Verbose Protocol</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Protocol w/ Invalid UUID" enabled="true">
            <stringProp name="TestPlan.comments">
Updates a Protocol at a UUID that does not correspond to any Protocol - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Protocol w/ Invalid UUID" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;protocol&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    	 &quot;name&quot; : &quot;${name_3}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;protocolType&quot;: &quot;${protocolType_3}&quot;,&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_3},&#xd;
      &quot;protocolData&quot;: ${protocolData_3}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/protocol/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Protocol" enabled="true">
            <stringProp name="TestPlan.comments">Removes the verbose Protocol record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Verbose Protocol" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/protocol/${verbose_protocol_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Delete Verbose" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the verbose Protocol has been removed</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Delete Verbose - Retrieve Verbose Protocol" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/protocol/${verbose_protocol_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 410 Error" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;410&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Protocol" enabled="true">
            <stringProp name="TestPlan.comments">Removes the basic Protocol record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Basic Protocol" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/protocol/${basic_protocol_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Delete Basic" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the basic Protocol has been removed</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Delete Basic - Retrieve Basic Protocol" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/protocol/${basic_protocol_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 410 Error" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;410&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Protocol w/ Invalid UUID" enabled="true">
            <stringProp name="TestPlan.comments">Removes a Protocol record at a UUID that does not correspond to any Protocol - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Protocol w/ Invalid UUID" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/protocol/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Collecting Event End2End Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Collecting Event Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="dwcVerbatimCoordinates_1" elementType="Argument">
              <stringProp name="Argument.name">dwcVerbatimCoordinates_1</stringProp>
              <stringProp name="Argument.value">dwcVerbatimCoordinates_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcVerbatimCoordinates_2" elementType="Argument">
              <stringProp name="Argument.name">dwcVerbatimCoordinates_2</stringProp>
              <stringProp name="Argument.value">dwcVerbatimCoordinates_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcVerbatimCoordinates_3" elementType="Argument">
              <stringProp name="Argument.name">dwcVerbatimCoordinates_3</stringProp>
              <stringProp name="Argument.value">dwcVerbatimCoordinates_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcVerbatimCoordinates_4" elementType="Argument">
              <stringProp name="Argument.name">dwcVerbatimCoordinates_4</stringProp>
              <stringProp name="Argument.value">dwcVerbatimCoordinates_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcRecordedBy_1" elementType="Argument">
              <stringProp name="Argument.name">dwcRecordedBy_1</stringProp>
              <stringProp name="Argument.value">dwcRecordedBy_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcRecordedBy_2" elementType="Argument">
              <stringProp name="Argument.name">dwcRecordedBy_2</stringProp>
              <stringProp name="Argument.value">dwcRecordedBy_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcRecordedBy_3" elementType="Argument">
              <stringProp name="Argument.name">dwcRecordedBy_3</stringProp>
              <stringProp name="Argument.value">dwcRecordedBy_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcRecordedBy_4" elementType="Argument">
              <stringProp name="Argument.name">dwcRecordedBy_4</stringProp>
              <stringProp name="Argument.value">dwcRecordedBy_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcVerbatimLatitude_1" elementType="Argument">
              <stringProp name="Argument.name">dwcVerbatimLatitude_1</stringProp>
              <stringProp name="Argument.value">dwcVerbatimLatitude_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcVerbatimLatitude_2" elementType="Argument">
              <stringProp name="Argument.name">dwcVerbatimLatitude_2</stringProp>
              <stringProp name="Argument.value">dwcVerbatimLatitude_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcVerbatimLatitude_3" elementType="Argument">
              <stringProp name="Argument.name">dwcVerbatimLatitude_3</stringProp>
              <stringProp name="Argument.value">dwcVerbatimLatitude_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcVerbatimLatitude_4" elementType="Argument">
              <stringProp name="Argument.name">dwcVerbatimLatitude_4</stringProp>
              <stringProp name="Argument.value">dwcVerbatimLatitude_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcVerbatimLongitude_1" elementType="Argument">
              <stringProp name="Argument.name">dwcVerbatimLongitude_1</stringProp>
              <stringProp name="Argument.value">dwcVerbatimLongitude_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcVerbatimLongitude_2" elementType="Argument">
              <stringProp name="Argument.name">dwcVerbatimLongitude_2</stringProp>
              <stringProp name="Argument.value">dwcVerbatimLongitude_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcVerbatimLongitude_3" elementType="Argument">
              <stringProp name="Argument.name">dwcVerbatimLongitude_3</stringProp>
              <stringProp name="Argument.value">dwcVerbatimLongitude_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcVerbatimLongitude_4" elementType="Argument">
              <stringProp name="Argument.name">dwcVerbatimLongitude_4</stringProp>
              <stringProp name="Argument.value">dwcVerbatimLongitude_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcVerbatimCoordinateSystem_1" elementType="Argument">
              <stringProp name="Argument.name">dwcVerbatimCoordinateSystem_1</stringProp>
              <stringProp name="Argument.value">dwcVerbatimCoordinateSystem_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcVerbatimCoordinateSystem_2" elementType="Argument">
              <stringProp name="Argument.name">dwcVerbatimCoordinateSystem_2</stringProp>
              <stringProp name="Argument.value">dwcVerbatimCoordinateSystem_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcVerbatimCoordinateSystem_3" elementType="Argument">
              <stringProp name="Argument.name">dwcVerbatimCoordinateSystem_3</stringProp>
              <stringProp name="Argument.value">dwcVerbatimCoordinateSystem_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcVerbatimCoordinateSystem_4" elementType="Argument">
              <stringProp name="Argument.name">dwcVerbatimCoordinateSystem_4</stringProp>
              <stringProp name="Argument.value">dwcVerbatimCoordinateSystem_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcVerbatimSRS_1" elementType="Argument">
              <stringProp name="Argument.name">dwcVerbatimSRS_1</stringProp>
              <stringProp name="Argument.value">dwcVerbatimSRS_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcVerbatimSRS_2" elementType="Argument">
              <stringProp name="Argument.name">dwcVerbatimSRS_2</stringProp>
              <stringProp name="Argument.value">dwcVerbatimSRS_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcVerbatimSRS_3" elementType="Argument">
              <stringProp name="Argument.name">dwcVerbatimSRS_3</stringProp>
              <stringProp name="Argument.value">dwcVerbatimSRS_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcVerbatimSRS_4" elementType="Argument">
              <stringProp name="Argument.name">dwcVerbatimSRS_4</stringProp>
              <stringProp name="Argument.value">dwcVerbatimSRS_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcVerbatimElevation_1" elementType="Argument">
              <stringProp name="Argument.name">dwcVerbatimElevation_1</stringProp>
              <stringProp name="Argument.value">dwcVerbatimElevation_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcVerbatimElevation_2" elementType="Argument">
              <stringProp name="Argument.name">dwcVerbatimElevation_2</stringProp>
              <stringProp name="Argument.value">dwcVerbatimElevation_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcVerbatimElevation_3" elementType="Argument">
              <stringProp name="Argument.name">dwcVerbatimElevation_3</stringProp>
              <stringProp name="Argument.value">dwcVerbatimElevation_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcVerbatimElevation_4" elementType="Argument">
              <stringProp name="Argument.name">dwcVerbatimElevation_4</stringProp>
              <stringProp name="Argument.value">dwcVerbatimElevation_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcVerbatimDepth_1" elementType="Argument">
              <stringProp name="Argument.name">dwcVerbatimDepth_1</stringProp>
              <stringProp name="Argument.value">dwcVerbatimDepth_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcVerbatimDepth_2" elementType="Argument">
              <stringProp name="Argument.name">dwcVerbatimDepth_2</stringProp>
              <stringProp name="Argument.value">dwcVerbatimDepth_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcVerbatimDepth_3" elementType="Argument">
              <stringProp name="Argument.name">dwcVerbatimDepth_3</stringProp>
              <stringProp name="Argument.value">dwcVerbatimDepth_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcVerbatimDepth_4" elementType="Argument">
              <stringProp name="Argument.name">dwcVerbatimDepth_4</stringProp>
              <stringProp name="Argument.value">dwcVerbatimDepth_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcFieldNumber_1" elementType="Argument">
              <stringProp name="Argument.name">dwcFieldNumber_1</stringProp>
              <stringProp name="Argument.value">dwcFieldNumber_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcFieldNumber_2" elementType="Argument">
              <stringProp name="Argument.name">dwcFieldNumber_2</stringProp>
              <stringProp name="Argument.value">dwcFieldNumber_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcFieldNumber_3" elementType="Argument">
              <stringProp name="Argument.name">dwcFieldNumber_3</stringProp>
              <stringProp name="Argument.value">dwcFieldNumber_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcFieldNumber_4" elementType="Argument">
              <stringProp name="Argument.name">dwcFieldNumber_4</stringProp>
              <stringProp name="Argument.value">dwcFieldNumber_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcRecordNumber_1" elementType="Argument">
              <stringProp name="Argument.name">dwcRecordNumber_1</stringProp>
              <stringProp name="Argument.value">dwcRecordNumber_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcRecordNumber_2" elementType="Argument">
              <stringProp name="Argument.name">dwcRecordNumber_2</stringProp>
              <stringProp name="Argument.value">dwcRecordNumber_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcRecordNumber_3" elementType="Argument">
              <stringProp name="Argument.name">dwcRecordNumber_3</stringProp>
              <stringProp name="Argument.value">dwcRecordNumber_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcRecordNumber_4" elementType="Argument">
              <stringProp name="Argument.name">dwcRecordNumber_4</stringProp>
              <stringProp name="Argument.value">dwcRecordNumber_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="otherRecordNumbers_1" elementType="Argument">
              <stringProp name="Argument.name">otherRecordNumbers_1</stringProp>
              <stringProp name="Argument.value">[&quot;otherRecordNumbers_1&quot;]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="otherRecordNumbers_2" elementType="Argument">
              <stringProp name="Argument.name">otherRecordNumbers_2</stringProp>
              <stringProp name="Argument.value">[&quot;otherRecordNumbers_2&quot;]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="otherRecordNumbers_3" elementType="Argument">
              <stringProp name="Argument.name">otherRecordNumbers_3</stringProp>
              <stringProp name="Argument.value">[&quot;otherRecordNumbers_3&quot;]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="otherRecordNumbers_4" elementType="Argument">
              <stringProp name="Argument.name">otherRecordNumbers_4</stringProp>
              <stringProp name="Argument.value">[&quot;otherRecordNumbers_4&quot;]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcCountry_1" elementType="Argument">
              <stringProp name="Argument.name">dwcCountry_1</stringProp>
              <stringProp name="Argument.value">dwcCountry_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcCountry_2" elementType="Argument">
              <stringProp name="Argument.name">dwcCountry_2</stringProp>
              <stringProp name="Argument.value">dwcCountry_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcCountry_3" elementType="Argument">
              <stringProp name="Argument.name">dwcCountry_3</stringProp>
              <stringProp name="Argument.value">dwcCountry_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcCountry_4" elementType="Argument">
              <stringProp name="Argument.name">dwcCountry_4</stringProp>
              <stringProp name="Argument.value">dwcCountry_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcCountryCode_1" elementType="Argument">
              <stringProp name="Argument.name">dwcCountryCode_1</stringProp>
              <stringProp name="Argument.value">CA</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcCountryCode_2" elementType="Argument">
              <stringProp name="Argument.name">dwcCountryCode_2</stringProp>
              <stringProp name="Argument.value">US</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcCountryCode_3" elementType="Argument">
              <stringProp name="Argument.name">dwcCountryCode_3</stringProp>
              <stringProp name="Argument.value">CN</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcCountryCode_4" elementType="Argument">
              <stringProp name="Argument.name">dwcCountryCode_4</stringProp>
              <stringProp name="Argument.value">JP</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcStateProvince_1" elementType="Argument">
              <stringProp name="Argument.name">dwcStateProvince_1</stringProp>
              <stringProp name="Argument.value">dwcStateProvince_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcStateProvince_2" elementType="Argument">
              <stringProp name="Argument.name">dwcStateProvince_2</stringProp>
              <stringProp name="Argument.value">dwcStateProvince_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcStateProvince_3" elementType="Argument">
              <stringProp name="Argument.name">dwcStateProvince_3</stringProp>
              <stringProp name="Argument.value">dwcStateProvince_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcStateProvince_4" elementType="Argument">
              <stringProp name="Argument.name">dwcStateProvince_4</stringProp>
              <stringProp name="Argument.value">dwcStateProvince_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcMinimumElevationInMeters_1" elementType="Argument">
              <stringProp name="Argument.name">dwcMinimumElevationInMeters_1</stringProp>
              <stringProp name="Argument.value">31.21</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcMinimumElevationInMeters_2" elementType="Argument">
              <stringProp name="Argument.name">dwcMinimumElevationInMeters_2</stringProp>
              <stringProp name="Argument.value">32.32</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcMinimumElevationInMeters_3" elementType="Argument">
              <stringProp name="Argument.name">dwcMinimumElevationInMeters_3</stringProp>
              <stringProp name="Argument.value">134.13</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcMinimumElevationInMeters_4" elementType="Argument">
              <stringProp name="Argument.name">dwcMinimumElevationInMeters_4</stringProp>
              <stringProp name="Argument.value">121.3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcMinimumDepthInMeters_1" elementType="Argument">
              <stringProp name="Argument.name">dwcMinimumDepthInMeters_1</stringProp>
              <stringProp name="Argument.value">312.12</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcMinimumDepthInMeters_2" elementType="Argument">
              <stringProp name="Argument.name">dwcMinimumDepthInMeters_2</stringProp>
              <stringProp name="Argument.value">12.33</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcMinimumDepthInMeters_3" elementType="Argument">
              <stringProp name="Argument.name">dwcMinimumDepthInMeters_3</stringProp>
              <stringProp name="Argument.value">12.3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcMinimumDepthInMeters_4" elementType="Argument">
              <stringProp name="Argument.name">dwcMinimumDepthInMeters_4</stringProp>
              <stringProp name="Argument.value">121.30</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcMaximumElevationInMeters_1" elementType="Argument">
              <stringProp name="Argument.name">dwcMaximumElevationInMeters_1</stringProp>
              <stringProp name="Argument.value">430.21</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcMaximumElevationInMeters_2" elementType="Argument">
              <stringProp name="Argument.name">dwcMaximumElevationInMeters_2</stringProp>
              <stringProp name="Argument.value">431.21</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcMaximumElevationInMeters_3" elementType="Argument">
              <stringProp name="Argument.name">dwcMaximumElevationInMeters_3</stringProp>
              <stringProp name="Argument.value">432.21</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcMaximumElevationInMeters_4" elementType="Argument">
              <stringProp name="Argument.name">dwcMaximumElevationInMeters_4</stringProp>
              <stringProp name="Argument.value">501.2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcMaximumDepthInMeters_1" elementType="Argument">
              <stringProp name="Argument.name">dwcMaximumDepthInMeters_1</stringProp>
              <stringProp name="Argument.value">430.21</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcMaximumDepthInMeters_2" elementType="Argument">
              <stringProp name="Argument.name">dwcMaximumDepthInMeters_2</stringProp>
              <stringProp name="Argument.value">431.21</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcMaximumDepthInMeters_3" elementType="Argument">
              <stringProp name="Argument.name">dwcMaximumDepthInMeters_3</stringProp>
              <stringProp name="Argument.value">432.21</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcMaximumDepthInMeters_4" elementType="Argument">
              <stringProp name="Argument.name">dwcMaximumDepthInMeters_4</stringProp>
              <stringProp name="Argument.value">501.2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="habitat_1" elementType="Argument">
              <stringProp name="Argument.name">habitat_1</stringProp>
              <stringProp name="Argument.value">habitat_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="habitat_2" elementType="Argument">
              <stringProp name="Argument.name">habitat_2</stringProp>
              <stringProp name="Argument.value">habitat_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="habitat_3" elementType="Argument">
              <stringProp name="Argument.name">habitat_3</stringProp>
              <stringProp name="Argument.value">habitat_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="habitat_4" elementType="Argument">
              <stringProp name="Argument.name">habitat_4</stringProp>
              <stringProp name="Argument.value">habitat_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="substrate_1" elementType="Argument">
              <stringProp name="Argument.name">substrate_1</stringProp>
              <stringProp name="Argument.value">substrate_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="substrate_2" elementType="Argument">
              <stringProp name="Argument.name">substrate_2</stringProp>
              <stringProp name="Argument.value">substrate_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="substrate_3" elementType="Argument">
              <stringProp name="Argument.name">substrate_3</stringProp>
              <stringProp name="Argument.value">substrate_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="substrate_4" elementType="Argument">
              <stringProp name="Argument.name">substrate_4</stringProp>
              <stringProp name="Argument.value">substrate_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="remarks_1" elementType="Argument">
              <stringProp name="Argument.name">remarks_1</stringProp>
              <stringProp name="Argument.value">remarks_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="remarks_2" elementType="Argument">
              <stringProp name="Argument.name">remarks_2</stringProp>
              <stringProp name="Argument.value">remarks_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="remarks_3" elementType="Argument">
              <stringProp name="Argument.name">remarks_3</stringProp>
              <stringProp name="Argument.value">remarks_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="remarks_4" elementType="Argument">
              <stringProp name="Argument.name">remarks_4</stringProp>
              <stringProp name="Argument.value">remarks_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="verbatimEventDateTime_1" elementType="Argument">
              <stringProp name="Argument.name">verbatimEventDateTime_1</stringProp>
              <stringProp name="Argument.value">2013-02-12</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="verbatimEventDateTime_2" elementType="Argument">
              <stringProp name="Argument.name">verbatimEventDateTime_2</stringProp>
              <stringProp name="Argument.value">2014-02-12</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="verbatimEventDateTime_3" elementType="Argument">
              <stringProp name="Argument.name">verbatimEventDateTime_3</stringProp>
              <stringProp name="Argument.value">2016-02-12</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="verbatimEventDateTime_4" elementType="Argument">
              <stringProp name="Argument.name">verbatimEventDateTime_4</stringProp>
              <stringProp name="Argument.value">2017-02-12</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="startEventDateTime_1" elementType="Argument">
              <stringProp name="Argument.name">startEventDateTime_1</stringProp>
              <stringProp name="Argument.value">2013-01-04</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="startEventDateTime_2" elementType="Argument">
              <stringProp name="Argument.name">startEventDateTime_2</stringProp>
              <stringProp name="Argument.value">2014-03-13</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="startEventDateTime_3" elementType="Argument">
              <stringProp name="Argument.name">startEventDateTime_3</stringProp>
              <stringProp name="Argument.value">2016-01-04</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="startEventDateTime_4" elementType="Argument">
              <stringProp name="Argument.name">startEventDateTime_4</stringProp>
              <stringProp name="Argument.value">2017-03-13</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="endEventDateTime_1" elementType="Argument">
              <stringProp name="Argument.name">endEventDateTime_1</stringProp>
              <stringProp name="Argument.value">2014-03-13</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="endEventDateTime_2" elementType="Argument">
              <stringProp name="Argument.name">endEventDateTime_2</stringProp>
              <stringProp name="Argument.value">2016-01-04</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="endEventDateTime_3" elementType="Argument">
              <stringProp name="Argument.name">endEventDateTime_3</stringProp>
              <stringProp name="Argument.value">2017-03-13</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="endEventDateTime_4" elementType="Argument">
              <stringProp name="Argument.name">endEventDateTime_4</stringProp>
              <stringProp name="Argument.value">2018-03-13</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcVerbatimLocality_1" elementType="Argument">
              <stringProp name="Argument.name">dwcVerbatimLocality_1</stringProp>
              <stringProp name="Argument.value">dwcVerbatimLocality_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcVerbatimLocality_2" elementType="Argument">
              <stringProp name="Argument.name">dwcVerbatimLocality_2</stringProp>
              <stringProp name="Argument.value">dwcVerbatimLocality_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcVerbatimLocality_3" elementType="Argument">
              <stringProp name="Argument.name">dwcVerbatimLocality_3</stringProp>
              <stringProp name="Argument.value">dwcVerbatimLocality_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcVerbatimLocality_4" elementType="Argument">
              <stringProp name="Argument.name">dwcVerbatimLocality_4</stringProp>
              <stringProp name="Argument.value">dwcVerbatimLocality_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="publiclyReleasable_1" elementType="Argument">
              <stringProp name="Argument.name">publiclyReleasable_1</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="publiclyReleasable_2" elementType="Argument">
              <stringProp name="Argument.name">publiclyReleasable_2</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="publiclyReleasable_3" elementType="Argument">
              <stringProp name="Argument.name">publiclyReleasable_3</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="publiclyReleasable_4" elementType="Argument">
              <stringProp name="Argument.name">publiclyReleasable_4</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="notPubliclyReleasableReason_1" elementType="Argument">
              <stringProp name="Argument.name">notPubliclyReleasableReason_1</stringProp>
              <stringProp name="Argument.value">notPubliclyReleasableReason_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="notPubliclyReleasableReason_2" elementType="Argument">
              <stringProp name="Argument.name">notPubliclyReleasableReason_2</stringProp>
              <stringProp name="Argument.value">notPubliclyReleasableReason_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="notPubliclyReleasableReason_3" elementType="Argument">
              <stringProp name="Argument.name">notPubliclyReleasableReason_3</stringProp>
              <stringProp name="Argument.value">notPubliclyReleasableReason_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="notPubliclyReleasableReason_4" elementType="Argument">
              <stringProp name="Argument.name">notPubliclyReleasableReason_4</stringProp>
              <stringProp name="Argument.value">notPubliclyReleasableReason_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSource_1" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSource_1</stringProp>
              <stringProp name="Argument.value">OSM</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSource_2" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSource_2</stringProp>
              <stringProp name="Argument.value">OSM</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSource_3" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSource_3</stringProp>
              <stringProp name="Argument.value">OSM</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSource_4" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSource_4</stringProp>
              <stringProp name="Argument.value">OSM</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="tags_1" elementType="Argument">
              <stringProp name="Argument.name">tags_1</stringProp>
              <stringProp name="Argument.value">[&quot;tags_1&quot;]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="tags_2" elementType="Argument">
              <stringProp name="Argument.name">tags_2</stringProp>
              <stringProp name="Argument.value">[&quot;tags_2&quot;]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="tags_3" elementType="Argument">
              <stringProp name="Argument.name">tags_3</stringProp>
              <stringProp name="Argument.value">[&quot;tags_3&quot;]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="tags_4" elementType="Argument">
              <stringProp name="Argument.name">tags_4</stringProp>
              <stringProp name="Argument.value">[&quot;tags_4&quot;]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="host_1" elementType="Argument">
              <stringProp name="Argument.name">host_1</stringProp>
              <stringProp name="Argument.value">host_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="host_2" elementType="Argument">
              <stringProp name="Argument.name">host_2</stringProp>
              <stringProp name="Argument.value">host_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="host_3" elementType="Argument">
              <stringProp name="Argument.name">host_3</stringProp>
              <stringProp name="Argument.value">host_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="host_4" elementType="Argument">
              <stringProp name="Argument.name">host_4</stringProp>
              <stringProp name="Argument.value">host_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_sourceUrl_1" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_sourceUrl_1</stringProp>
              <stringProp name="Argument.value">https://example_1.ca</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_sourceUrl_2" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_sourceUrl_2</stringProp>
              <stringProp name="Argument.value">https://example_2.ca</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_sourceUrl_3" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_sourceUrl_3</stringProp>
              <stringProp name="Argument.value">https://example_3.ca</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_sourceUrl_4" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_sourceUrl_4</stringProp>
              <stringProp name="Argument.value">https://example_4.ca</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_customGeographPlace_1" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_customGeographPlace_1</stringProp>
              <stringProp name="Argument.value">geoplace_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_customGeographPlace_2" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_customGeographPlace_2</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_customGeographPlace_3" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_customGeographPlace_3</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_customGeographPlace_4" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_customGeographPlace_4</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_selectedGeographicPlace_id_1" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_selectedGeographicPlace_id_1</stringProp>
              <stringProp name="Argument.value">identifier_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_selectedGeographicPlace_id_2" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_selectedGeographicPlace_id_2</stringProp>
              <stringProp name="Argument.value">identifier_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_selectedGeographicPlace_id_3" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_selectedGeographicPlace_id_3</stringProp>
              <stringProp name="Argument.value">identifier_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_selectedGeographicPlace_id_4" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_selectedGeographicPlace_id_4</stringProp>
              <stringProp name="Argument.value">identifier_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_selectedGeographicPlace_element_1" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_selectedGeographicPlace_element_1</stringProp>
              <stringProp name="Argument.value">N</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_selectedGeographicPlace_element_2" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_selectedGeographicPlace_element_2</stringProp>
              <stringProp name="Argument.value">W</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_selectedGeographicPlace_element_3" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_selectedGeographicPlace_element_3</stringProp>
              <stringProp name="Argument.value">R</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_selectedGeographicPlace_element_4" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_selectedGeographicPlace_element_4</stringProp>
              <stringProp name="Argument.value">N</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_selectedGeographicPlace_placeType_1" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_selectedGeographicPlace_placeType_1</stringProp>
              <stringProp name="Argument.value">placeType_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_selectedGeographicPlace_placeType_2" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_selectedGeographicPlace_placeType_2</stringProp>
              <stringProp name="Argument.value">placeType_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_selectedGeographicPlace_placeType_3" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_selectedGeographicPlace_placeType_3</stringProp>
              <stringProp name="Argument.value">placeType_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_selectedGeographicPlace_placeType_4" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_selectedGeographicPlace_placeType_4</stringProp>
              <stringProp name="Argument.value">placeType_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_selectedGeographicPlace_name_1" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_selectedGeographicPlace_name_1</stringProp>
              <stringProp name="Argument.value">name_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_selectedGeographicPlace_name_2" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_selectedGeographicPlace_name_2</stringProp>
              <stringProp name="Argument.value">name_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_selectedGeographicPlace_name_3" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_selectedGeographicPlace_name_3</stringProp>
              <stringProp name="Argument.value">name_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_selectedGeographicPlace_name_4" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_selectedGeographicPlace_name_4</stringProp>
              <stringProp name="Argument.value">name_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_higherGeographicPlace_1" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_higherGeographicPlace_1</stringProp>
              <stringProp name="Argument.value">[{&quot;id&quot;:&quot;id_1&quot;,&quot;element&quot;:&quot;ele1&quot;,&quot;placeType&quot;:&quot;pType_1&quot;,&quot;name&quot;:&quot;name_1&quot;}]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_higherGeographicPlace_2" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_higherGeographicPlace_2</stringProp>
              <stringProp name="Argument.value">[{&quot;id&quot;:&quot;id_2&quot;,&quot;element&quot;:&quot;ele2&quot;,&quot;placeType&quot;:&quot;pType_2&quot;,&quot;name&quot;:&quot;name_2&quot;}]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_higherGeographicPlace_3" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_higherGeographicPlace_3</stringProp>
              <stringProp name="Argument.value">[{&quot;id&quot;:&quot;id_3&quot;,&quot;element&quot;:&quot;ele3&quot;,&quot;placeType&quot;:&quot;pType_3&quot;,&quot;name&quot;:&quot;name_3&quot;}]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_higherGeographicPlace_4" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_higherGeographicPlace_4</stringProp>
              <stringProp name="Argument.value">[{&quot;id&quot;:&quot;id_4&quot;,&quot;element&quot;:&quot;ele4&quot;,&quot;placeType&quot;:&quot;pType_4&quot;,&quot;name&quot;:&quot;name_4&quot;}]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_stateProvince_id_1" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_stateProvince_id_1</stringProp>
              <stringProp name="Argument.value">identifiant_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_stateProvince_id_2" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_stateProvince_id_2</stringProp>
              <stringProp name="Argument.value">identifiant_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_stateProvince_id_3" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_stateProvince_id_3</stringProp>
              <stringProp name="Argument.value">identifiant_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_stateProvince_id_4" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_stateProvince_id_4</stringProp>
              <stringProp name="Argument.value">identifiant_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_stateProvince_element_1" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_stateProvince_element_1</stringProp>
              <stringProp name="Argument.value">ele_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_stateProvince_element_2" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_stateProvince_element_2</stringProp>
              <stringProp name="Argument.value">ele_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_stateProvince_element_3" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_stateProvince_element_3</stringProp>
              <stringProp name="Argument.value">ele_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_stateProvince_element_4" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_stateProvince_element_4</stringProp>
              <stringProp name="Argument.value">ele_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_stateProvince_placeType_1" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_stateProvince_placeType_1</stringProp>
              <stringProp name="Argument.value">lieuTaper_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_stateProvince_placeType_2" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_stateProvince_placeType_2</stringProp>
              <stringProp name="Argument.value">lieuTaper_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_stateProvince_placeType_3" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_stateProvince_placeType_3</stringProp>
              <stringProp name="Argument.value">lieuTaper_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_stateProvince_placeType_4" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_stateProvince_placeType_4</stringProp>
              <stringProp name="Argument.value">lieuTaper_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_stateProvince_name_1" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_stateProvince_name_1</stringProp>
              <stringProp name="Argument.value">nom_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_stateProvince_name_2" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_stateProvince_name_2</stringProp>
              <stringProp name="Argument.value">nom_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_stateProvince_name_3" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_stateProvince_name_3</stringProp>
              <stringProp name="Argument.value">nom_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_stateProvince_name_4" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_stateProvince_name_4</stringProp>
              <stringProp name="Argument.value">nom_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_country_code_1" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_country_code_1</stringProp>
              <stringProp name="Argument.value">RU</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_country_code_2" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_country_code_2</stringProp>
              <stringProp name="Argument.value">CN</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_country_code_3" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_country_code_3</stringProp>
              <stringProp name="Argument.value">JP</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_country_code_4" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_country_code_4</stringProp>
              <stringProp name="Argument.value">CA</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_country_name_1" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_country_name_1</stringProp>
              <stringProp name="Argument.value">Russia</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_country_name_2" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_country_name_2</stringProp>
              <stringProp name="Argument.value">China</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_country_name_3" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_country_name_3</stringProp>
              <stringProp name="Argument.value">Japan</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_country_name_4" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_country_name_4</stringProp>
              <stringProp name="Argument.value">Canada</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_recordedOn_1" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_recordedOn_1</stringProp>
              <stringProp name="Argument.value">2012-02-04T14:15:22Z</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_recordedOn_2" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_recordedOn_2</stringProp>
              <stringProp name="Argument.value">2012-05-01T12:11:22Z</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_recordedOn_3" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_recordedOn_3</stringProp>
              <stringProp name="Argument.value">2015-04-04T10:12:22Z</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geographicPlaceNameSourceDetail_recordedOn_4" elementType="Argument">
              <stringProp name="Argument.name">geographicPlaceNameSourceDetail_recordedOn_4</stringProp>
              <stringProp name="Argument.value">2016-03-05T23:41:22Z</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_dwcDecimalLatitude_1" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_dwcDecimalLatitude_1</stringProp>
              <stringProp name="Argument.value">45.12</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_dwcDecimalLatitude_2" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_dwcDecimalLatitude_2</stringProp>
              <stringProp name="Argument.value">64.13</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_dwcDecimalLatitude_3" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_dwcDecimalLatitude_3</stringProp>
              <stringProp name="Argument.value">21.11</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_dwcDecimalLatitude_4" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_dwcDecimalLatitude_4</stringProp>
              <stringProp name="Argument.value">89.02</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_dwcDecimalLongitude_1" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_dwcDecimalLongitude_1</stringProp>
              <stringProp name="Argument.value">34.12</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_dwcDecimalLongitude_2" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_dwcDecimalLongitude_2</stringProp>
              <stringProp name="Argument.value">12.31</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_dwcDecimalLongitude_3" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_dwcDecimalLongitude_3</stringProp>
              <stringProp name="Argument.value">16.21</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_dwcDecimalLongitude_4" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_dwcDecimalLongitude_4</stringProp>
              <stringProp name="Argument.value">87.33</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_dwcCoordinateUncertaintyInMeters_1" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_dwcCoordinateUncertaintyInMeters_1</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_dwcCoordinateUncertaintyInMeters_2" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_dwcCoordinateUncertaintyInMeters_2</stringProp>
              <stringProp name="Argument.value">4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_dwcCoordinateUncertaintyInMeters_3" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_dwcCoordinateUncertaintyInMeters_3</stringProp>
              <stringProp name="Argument.value">7</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_dwcCoordinateUncertaintyInMeters_4" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_dwcCoordinateUncertaintyInMeters_4</stringProp>
              <stringProp name="Argument.value">23</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_dwcGeoreferencedDate_1" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_dwcGeoreferencedDate_1</stringProp>
              <stringProp name="Argument.value">2014-02-01</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_dwcGeoreferencedDate_2" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_dwcGeoreferencedDate_2</stringProp>
              <stringProp name="Argument.value">2015-01-03</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_dwcGeoreferencedDate_3" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_dwcGeoreferencedDate_3</stringProp>
              <stringProp name="Argument.value">2016-09-02</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_dwcGeoreferencedDate_4" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_dwcGeoreferencedDate_4</stringProp>
              <stringProp name="Argument.value">2017-11-11</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_georeferencedBy_1" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_georeferencedBy_1</stringProp>
              <stringProp name="Argument.value">[]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_georeferencedBy_2" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_georeferencedBy_2</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_georeferencedBy_3" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_georeferencedBy_3</stringProp>
              <stringProp name="Argument.value">[&quot;e2e5dd60-5cd1-4082-b733-23b513a80c4d&quot;]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_georeferencedBy_4" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_georeferencedBy_4</stringProp>
              <stringProp name="Argument.value">[&quot;b00f4f78-2b29-4ed0-a9e1-8ba52ddb05e8&quot;, &quot;fa4e850a-37c9-4530-8472-6a0458008da1&quot;]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_literalGeoreferencedBy_1" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_literalGeoreferencedBy_1</stringProp>
              <stringProp name="Argument.value">John Doe</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_literalGeoreferencedBy_2" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_literalGeoreferencedBy_2</stringProp>
              <stringProp name="Argument.value">John Poe</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_literalGeoreferencedBy_3" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_literalGeoreferencedBy_3</stringProp>
              <stringProp name="Argument.value">John Throw</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_literalGeoreferencedBy_4" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_literalGeoreferencedBy_4</stringProp>
              <stringProp name="Argument.value">John Sow</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_dwcGeoreferenceProtocol_1" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_dwcGeoreferenceProtocol_1</stringProp>
              <stringProp name="Argument.value">geo_proto_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_dwcGeoreferenceProtocol_2" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_dwcGeoreferenceProtocol_2</stringProp>
              <stringProp name="Argument.value">geo_proto_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_dwcGeoreferenceProtocol_3" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_dwcGeoreferenceProtocol_3</stringProp>
              <stringProp name="Argument.value">geo_proto_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_dwcGeoreferenceProtocol_4" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_dwcGeoreferenceProtocol_4</stringProp>
              <stringProp name="Argument.value">geo_proto_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_dwcGeoreferenceSources_1" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_dwcGeoreferenceSources_1</stringProp>
              <stringProp name="Argument.value">map</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_dwcGeoreferenceSources_2" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_dwcGeoreferenceSources_2</stringProp>
              <stringProp name="Argument.value">gazetteer</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_dwcGeoreferenceSources_3" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_dwcGeoreferenceSources_3</stringProp>
              <stringProp name="Argument.value">compass</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_dwcGeoreferenceSources_4" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_dwcGeoreferenceSources_4</stringProp>
              <stringProp name="Argument.value">telescope</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_dwcGeoreferenceRemarks_1" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_dwcGeoreferenceRemarks_1</stringProp>
              <stringProp name="Argument.value">remarks_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_dwcGeoreferenceRemarks_2" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_dwcGeoreferenceRemarks_2</stringProp>
              <stringProp name="Argument.value">remarks_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_dwcGeoreferenceRemarks_3" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_dwcGeoreferenceRemarks_3</stringProp>
              <stringProp name="Argument.value">remarks_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_dwcGeoreferenceRemarks_4" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_dwcGeoreferenceRemarks_4</stringProp>
              <stringProp name="Argument.value">remarks_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_dwcGeodeticDatum_1" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_dwcGeodeticDatum_1</stringProp>
              <stringProp name="Argument.value">datum_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_dwcGeodeticDatum_2" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_dwcGeodeticDatum_2</stringProp>
              <stringProp name="Argument.value">datum_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_dwcGeodeticDatum_3" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_dwcGeodeticDatum_3</stringProp>
              <stringProp name="Argument.value">datum_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_dwcGeodeticDatum_4" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_dwcGeodeticDatum_4</stringProp>
              <stringProp name="Argument.value">datum_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_isPrimary_1" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_isPrimary_1</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_isPrimary_2" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_isPrimary_2</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_isPrimary_3" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_isPrimary_3</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_isPrimary_4" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_isPrimary_4</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_dwcGeoreferenceVerificationStatus_1" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_dwcGeoreferenceVerificationStatus_1</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_dwcGeoreferenceVerificationStatus_2" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_dwcGeoreferenceVerificationStatus_2</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_dwcGeoreferenceVerificationStatus_3" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_dwcGeoreferenceVerificationStatus_3</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="geoReferenceAssertions_dwcGeoreferenceVerificationStatus_4" elementType="Argument">
              <stringProp name="Argument.name">geoReferenceAssertions_dwcGeoreferenceVerificationStatus_4</stringProp>
              <stringProp name="Argument.value">null</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">Note for dev: Extension Values and Managed Attributes not considered at the moment</stringProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Thread Group Request Headers" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__P(access_token)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/vnd.api+json</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">Required headers to perform API requests</stringProp>
        </HeaderManager>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Token Controller" enabled="true">
          <stringProp name="TestPlan.comments">Runs the Token Controller in the setUp thread group to refresh the access token</stringProp>
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
            <stringProp name="1506430348">setUp Thread Group</stringProp>
            <stringProp name="52452451">Token Controller</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Collecting Event setUp" enabled="true">
            <stringProp name="TestPlan.comments">Sets random variables and creates relationship entities required for Collecting Event testing</stringProp>
          </GenericController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Set Random Variables" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def ctx = org.apache.jmeter.threads.JMeterContextService.getContext()

ctx.getVariables().put(&quot;name_1&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_2&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_3&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_4&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)

ctx.getVariables().put(&quot;collecting-event_managed-attribute_name&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Create Managed Attribute" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="-219911028">Collection Managed Attribute End2End Thread Group</stringProp>
                <stringProp name="2026540316">Create</stringProp>
                <stringProp name="117127494">COLLECTING_EVENT Collection Managed Attribute</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Create Protocol" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="1925115245">Protocol End2End Thread Group</stringProp>
                <stringProp name="2026540316">Create</stringProp>
                <stringProp name="-347627894">Basic Protocol</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Collecting Event" enabled="true">
            <stringProp name="TestPlan.comments">Creates a basic Collecting Event record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Basic Collecting Event" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;collecting-event&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/collecting-event</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Basic Collecting Event UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">basic_collecting-event_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Basic Collecting Event" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the basic Collecting Event have been created and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Basic Collecting Event Creation" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/collecting-event/${basic_collecting-event_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Created Basic Collecting Event - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Collecting Event" enabled="true">
            <stringProp name="TestPlan.comments">Creates a verbose Collecting Event record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Verbose Collecting Event" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;collecting-event&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;dwcVerbatimCoordinates&quot;: &quot;${dwcVerbatimCoordinates_2}&quot;,&#xd;
      &quot;dwcRecordedBy&quot;: &quot;${dwcRecordedBy_2}&quot;,&#xd;
      &quot;dwcVerbatimLatitude&quot;: &quot;${dwcVerbatimLatitude_2}&quot;,&#xd;
      &quot;dwcVerbatimLongitude&quot;: &quot;${dwcVerbatimLongitude_2}&quot;,&#xd;
      &quot;dwcVerbatimCoordinateSystem&quot;: &quot;${dwcVerbatimCoordinateSystem_2}&quot;,&#xd;
      &quot;dwcVerbatimSRS&quot;: &quot;${dwcVerbatimSRS_2}&quot;,&#xd;
      &quot;dwcVerbatimElevation&quot;: &quot;${dwcVerbatimElevation_2}&quot;,&#xd;
      &quot;dwcVerbatimDepth&quot;: &quot;${dwcVerbatimDepth_2}&quot;,&#xd;
      &quot;dwcFieldNumber&quot;: &quot;${dwcFieldNumber_2}&quot;,&#xd;
      &quot;dwcRecordNumber&quot;: &quot;${dwcRecordNumber_2}&quot;,&#xd;
      &quot;otherRecordNumbers&quot;: ${otherRecordNumbers_2},&#xd;
      &quot;dwcCountry&quot;: &quot;${dwcCountry_2}&quot;,&#xd;
      &quot;dwcCountryCode&quot;: &quot;${dwcCountryCode_2}&quot;,&#xd;
      &quot;dwcStateProvince&quot;: &quot;${dwcStateProvince_2}&quot;,&#xd;
      &quot;dwcMinimumElevationInMeters&quot;: ${dwcMinimumElevationInMeters_2},&#xd;
      &quot;dwcMinimumDepthInMeters&quot;: ${dwcMinimumDepthInMeters_2},&#xd;
      &quot;dwcMaximumElevationInMeters&quot;: ${dwcMaximumElevationInMeters_2},&#xd;
      &quot;dwcMaximumDepthInMeters&quot;: ${dwcMaximumDepthInMeters_2},&#xd;
      &quot;habitat&quot;: &quot;${habitat_2}&quot;,&#xd;
      &quot;substrate&quot;: &quot;${substrate_2}&quot;,&#xd;
      &quot;remarks&quot;: &quot;${remarks_2}&quot;,&#xd;
      &quot;verbatimEventDateTime&quot;: &quot;${verbatimEventDateTime_2}&quot;,&#xd;
      &quot;startEventDateTime&quot;: &quot;${startEventDateTime_2}&quot;,&#xd;
      &quot;endEventDateTime&quot;: &quot;${endEventDateTime_2}&quot;,&#xd;
      &quot;dwcVerbatimLocality&quot;: &quot;${dwcVerbatimLocality_2}&quot;,&#xd;
      &quot;publiclyReleasable&quot;: ${publiclyReleasable_2},&#xd;
      &quot;notPubliclyReleasableReason&quot;: &quot;${notPubliclyReleasableReason_2}&quot;,&#xd;
      &quot;geographicPlaceNameSource&quot;: &quot;${geographicPlaceNameSource_2}&quot;,&#xd;
      &quot;tags&quot;: ${tags_2},&#xd;
      &quot;host&quot;: &quot;${host_2}&quot;,&#xd;
      &quot;geographicPlaceNameSourceDetail&quot;: {&#xd;
      	&quot;sourceUrl&quot;: &quot;${geographicPlaceNameSourceDetail_sourceUrl_2}&quot;,&#xd;
      	&quot;customGeographPlace&quot;: ${geographicPlaceNameSourceDetail_customGeographPlace_2},&#xd;
      	&quot;selectedGeographicPlace&quot;: {&#xd;
      		&quot;id&quot;: &quot;${geographicPlaceNameSourceDetail_selectedGeographicPlace_id_2}&quot;,&#xd;
      		&quot;element&quot;: &quot;${geographicPlaceNameSourceDetail_selectedGeographicPlace_element_2}&quot;,&#xd;
      		&quot;placeType&quot;: &quot;${geographicPlaceNameSourceDetail_selectedGeographicPlace_placeType_2}&quot;,&#xd;
      		&quot;name&quot;: &quot;${geographicPlaceNameSourceDetail_selectedGeographicPlace_name_2}&quot;	&#xd;
      	},&#xd;
      	&quot;higherGeographicPlace&quot;: ${geographicPlaceNameSourceDetail_higherGeographicPlace_2},&#xd;
      	&quot;stateProvince&quot;: {&#xd;
      		&quot;id&quot;: &quot;${geographicPlaceNameSourceDetail_stateProvince_id_2}&quot;,&#xd;
      		&quot;element&quot;: &quot;${geographicPlaceNameSourceDetail_stateProvince_element_2}&quot;,&#xd;
      		&quot;placeType&quot;: &quot;${geographicPlaceNameSourceDetail_stateProvince_placeType_2}&quot;,&#xd;
      		&quot;name&quot;: &quot;${geographicPlaceNameSourceDetail_stateProvince_name_2}&quot;	&#xd;
      	},&#xd;
      	&quot;country&quot;: {&#xd;
      		&quot;code&quot;: &quot;${geographicPlaceNameSourceDetail_country_code_2}&quot;,&#xd;
      		&quot;name&quot;: &quot;${geographicPlaceNameSourceDetail_country_name_2}&quot;&#xd;
      	}&#xd;
      },&#xd;
      &quot;geoReferenceAssertions&quot;: [&#xd;
      	{&#xd;
      		&quot;dwcDecimalLatitude&quot;: ${geoReferenceAssertions_dwcDecimalLatitude_2},&#xd;
      		&quot;dwcDecimalLongitude&quot;: ${geoReferenceAssertions_dwcDecimalLongitude_2},&#xd;
      		&quot;dwcCoordinateUncertaintyInMeters&quot;: ${geoReferenceAssertions_dwcCoordinateUncertaintyInMeters_2},&#xd;
      		&quot;dwcGeoreferencedDate&quot;: &quot;${geoReferenceAssertions_dwcGeoreferencedDate_2}&quot;,&#xd;
      		&quot;georeferencedBy&quot;: ${geoReferenceAssertions_georeferencedBy_2},&#xd;
      		&quot;literalGeoreferencedBy&quot;: &quot;${geoReferenceAssertions_literalGeoreferencedBy_2}&quot;,&#xd;
      		&quot;dwcGeoreferenceProtocol&quot;: &quot;${geoReferenceAssertions_dwcGeoreferenceProtocol_2}&quot;,&#xd;
      		&quot;dwcGeoreferenceSources&quot;: &quot;${geoReferenceAssertions_dwcGeoreferenceSources_2}&quot;,&#xd;
      		&quot;dwcGeoreferenceRemarks&quot;: &quot;${geoReferenceAssertions_dwcGeoreferenceRemarks_2}&quot;,&#xd;
      		&quot;dwcGeodeticDatum&quot;: &quot;${geoReferenceAssertions_dwcGeodeticDatum_2}&quot;,&#xd;
      		&quot;isPrimary&quot;: ${geoReferenceAssertions_isPrimary_2},&#xd;
      		&quot;dwcGeoreferenceVerificationStatus&quot;: ${geoReferenceAssertions_dwcGeoreferenceVerificationStatus_2}&#xd;
      	}&#xd;
      ],&#xd;
      &quot;managedAttributes&quot;: {&#xd;
		&quot;${collecting-event_managed-attribute_name}&quot;: &quot;managed_attribute_1&quot;&#xd;
	}&#xd;
    },&#xd;
    &quot;relationships&quot;: {&#xd;
    	 &quot;protocol&quot;: {&#xd;
    	 	&quot;data&quot;: {&#xd;
    	 		&quot;type&quot;: &quot;protocol&quot;,&#xd;
    	 		&quot;id&quot;: &quot;${basic_protocol_uuid}&quot;&#xd;
    	 	}&#xd;
    	 },&#xd;
    	 &quot;collectors&quot;: {&#xd;
    	 	&quot;data&quot;: {&#xd;
			&quot;type&quot;: &quot;person&quot;,&#xd;
			&quot;id&quot;: &quot;${__P(person_uuid_1)}&quot;&#xd;
    	 	}&#xd;
    	 },&#xd;
    	 &quot;attachment&quot;: {&#xd;
    	 	&quot;data&quot;: {&#xd;
    	 		&quot;type&quot;: &quot;metadata&quot;,&#xd;
    	 		&quot;id&quot;: &quot;${__P(attachment_uuid_1)}&quot;&#xd;
    	 	}&#xd;
    	 }&#xd;
    }&#xd;
  }&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/collecting-event</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Verbose Collecting Event UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">verbose_collecting-event_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Verbose Collecting Event" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the verbose Collecting Event have been created and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Verbose Collecting Event Creation" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/collecting-event/${verbose_collecting-event_uuid}?include=attachment,protocol,collectors</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Created Verbose Collecting Eventt - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.group == &quot;${user_group}&quot;
assert attr.dwcVerbatimCoordinates == &quot;${dwcVerbatimCoordinates_2}&quot;
assert attr.dwcRecordedBy == &quot;${dwcRecordedBy_2}&quot;
assert attr.dwcVerbatimLatitude == &quot;${dwcVerbatimLatitude_2}&quot;
assert attr.dwcVerbatimLongitude == &quot;${dwcVerbatimLongitude_2}&quot;
assert attr.dwcVerbatimCoordinateSystem == &quot;${dwcVerbatimCoordinateSystem_2}&quot;
assert attr.dwcVerbatimSRS == &quot;${dwcVerbatimSRS_2}&quot;
assert attr.dwcVerbatimElevation == &quot;${dwcVerbatimElevation_2}&quot;
assert attr.dwcVerbatimDepth == &quot;${dwcVerbatimDepth_2}&quot;
assert attr.dwcFieldNumber == &quot;${dwcFieldNumber_2}&quot;
assert attr.dwcRecordNumber == &quot;${dwcRecordNumber_2}&quot;
assert attr.otherRecordNumbers == ${otherRecordNumbers_2}
assert attr.dwcCountry == &quot;${dwcCountry_2}&quot;
assert attr.dwcCountryCode == &quot;${dwcCountryCode_2}&quot;
assert attr.dwcStateProvince == &quot;${dwcStateProvince_2}&quot;
assert attr.dwcMinimumElevationInMeters == ${dwcMinimumElevationInMeters_2}
assert attr.dwcMinimumDepthInMeters == ${dwcMinimumDepthInMeters_2}
assert attr.dwcMaximumElevationInMeters == ${dwcMaximumElevationInMeters_2}
assert attr.dwcMaximumDepthInMeters == ${dwcMaximumDepthInMeters_2}
assert attr.habitat == &quot;${habitat_2}&quot;
assert attr.substrate == &quot;${substrate_2}&quot;
assert attr.remarks == &quot;${remarks_2}&quot;
assert attr.verbatimEventDateTime == &quot;${verbatimEventDateTime_2}&quot;
assert attr.startEventDateTime == &quot;${startEventDateTime_2}&quot;
assert attr.endEventDateTime == &quot;${endEventDateTime_2}&quot;
assert attr.dwcVerbatimLocality == &quot;${dwcVerbatimLocality_2}&quot;
assert attr.publiclyReleasable == ${publiclyReleasable_2}
assert attr.notPubliclyReleasableReason == &quot;${notPubliclyReleasableReason_2}&quot;
assert attr.geographicPlaceNameSource == &quot;${geographicPlaceNameSource_2}&quot;
assert attr.tags == ${tags_2}
assert attr.host == &quot;${host_2}&quot;
assert attr.geographicPlaceNameSourceDetail.sourceUrl == &quot;${geographicPlaceNameSourceDetail_sourceUrl_2}&quot;
assert attr.geographicPlaceNameSourceDetail.customGeographPlace == ${geographicPlaceNameSourceDetail_customGeographPlace_2}
assert attr.geographicPlaceNameSourceDetail.selectedGeographicPlace.id == &quot;${geographicPlaceNameSourceDetail_selectedGeographicPlace_id_2}&quot;
assert attr.geographicPlaceNameSourceDetail.selectedGeographicPlace.element == &quot;${geographicPlaceNameSourceDetail_selectedGeographicPlace_element_2}&quot;
assert attr.geographicPlaceNameSourceDetail.selectedGeographicPlace.placeType == &quot;${geographicPlaceNameSourceDetail_selectedGeographicPlace_placeType_2}&quot;
assert attr.geographicPlaceNameSourceDetail.selectedGeographicPlace.name == &quot;${geographicPlaceNameSourceDetail_selectedGeographicPlace_name_2}&quot;
assert attr.geographicPlaceNameSourceDetail.stateProvince.id == &quot;${geographicPlaceNameSourceDetail_stateProvince_id_2}&quot;
assert attr.geographicPlaceNameSourceDetail.stateProvince.element == &quot;${geographicPlaceNameSourceDetail_stateProvince_element_2}&quot;
assert attr.geographicPlaceNameSourceDetail.stateProvince.placeType == &quot;${geographicPlaceNameSourceDetail_stateProvince_placeType_2}&quot;
assert attr.geographicPlaceNameSourceDetail.stateProvince.name == &quot;${geographicPlaceNameSourceDetail_stateProvince_name_2}&quot;
assert attr.geographicPlaceNameSourceDetail.country.code == &quot;${geographicPlaceNameSourceDetail_country_code_2}&quot;
assert attr.geographicPlaceNameSourceDetail.country.name == &quot;${geographicPlaceNameSourceDetail_country_name_2}&quot;
assert attr.geoReferenceAssertions[0].dwcDecimalLatitude == ${geoReferenceAssertions_dwcDecimalLatitude_2}
assert attr.geoReferenceAssertions[0].dwcDecimalLongitude == ${geoReferenceAssertions_dwcDecimalLongitude_2}
assert attr.geoReferenceAssertions[0].dwcCoordinateUncertaintyInMeters == ${geoReferenceAssertions_dwcCoordinateUncertaintyInMeters_2}
assert attr.geoReferenceAssertions[0].dwcGeoreferencedDate == &quot;${geoReferenceAssertions_dwcGeoreferencedDate_2}&quot;
assert attr.geoReferenceAssertions[0].georeferencedBy == ${geoReferenceAssertions_georeferencedBy_2}
assert attr.geoReferenceAssertions[0].literalGeoreferencedBy == &quot;${geoReferenceAssertions_literalGeoreferencedBy_2}&quot;
assert attr.geoReferenceAssertions[0].dwcGeoreferenceProtocol == &quot;${geoReferenceAssertions_dwcGeoreferenceProtocol_2}&quot;
assert attr.geoReferenceAssertions[0].dwcGeoreferenceSources == &quot;${geoReferenceAssertions_dwcGeoreferenceSources_2}&quot;
assert attr.geoReferenceAssertions[0].dwcGeoreferenceRemarks == &quot;${geoReferenceAssertions_dwcGeoreferenceRemarks_2}&quot;
assert attr.geoReferenceAssertions[0].dwcGeodeticDatum == &quot;${geoReferenceAssertions_dwcGeodeticDatum_2}&quot;
assert attr.geoReferenceAssertions[0].isPrimary == ${geoReferenceAssertions_isPrimary_2}
assert attr.geoReferenceAssertions[0].dwcGeoreferenceVerificationStatus == ${geoReferenceAssertions_dwcGeoreferenceVerificationStatus_2}

def rel = object.data.relationships

assert rel.attachment.data[0].id == &quot;${__P(attachment_uuid_1)}&quot;
assert rel.collectors.data[0].id == &quot;${__P(person_uuid_1)}&quot;
assert rel.protocol.data.id == &quot;${basic_protocol_uuid}&quot;
</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Collecting Event w/ Empty Attributes" enabled="true">
            <stringProp name="TestPlan.comments">Creates a Collecting Event without any attributes specified - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Collecting Event w/ Empty Attributess" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;collecting-event&quot;,&#xd;
    &quot;attributes&quot;: {}&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/collecting-event</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 403 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;403&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Collecting Event w/ Incorrect Type" enabled="true">
            <stringProp name="TestPlan.comments">Creates a Collecting Event with the incorrect type specified - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Collecting Event w/ Incorrect Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;material-sample&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/collecting-event</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 400 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;400&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Collecting Event" enabled="true">
            <stringProp name="TestPlan.comments">Updates the basic Collecting Event record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Basic Collecting Event" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;collecting-event&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;dwcVerbatimCoordinates&quot;: &quot;${dwcVerbatimCoordinates_3}&quot;,&#xd;
      &quot;dwcRecordedBy&quot;: &quot;${dwcRecordedBy_3}&quot;,&#xd;
      &quot;dwcVerbatimLatitude&quot;: &quot;${dwcVerbatimLatitude_3}&quot;,&#xd;
      &quot;dwcVerbatimLongitude&quot;: &quot;${dwcVerbatimLongitude_3}&quot;,&#xd;
      &quot;dwcVerbatimCoordinateSystem&quot;: &quot;${dwcVerbatimCoordinateSystem_3}&quot;,&#xd;
      &quot;dwcVerbatimSRS&quot;: &quot;${dwcVerbatimSRS_3}&quot;,&#xd;
      &quot;dwcVerbatimElevation&quot;: &quot;${dwcVerbatimElevation_3}&quot;,&#xd;
      &quot;dwcVerbatimDepth&quot;: &quot;${dwcVerbatimDepth_3}&quot;,&#xd;
      &quot;dwcFieldNumber&quot;: &quot;${dwcFieldNumber_3}&quot;,&#xd;
      &quot;dwcRecordNumber&quot;: &quot;${dwcRecordNumber_3}&quot;,&#xd;
      &quot;otherRecordNumbers&quot;: ${otherRecordNumbers_3},&#xd;
      &quot;dwcCountry&quot;: &quot;${dwcCountry_3}&quot;,&#xd;
      &quot;dwcCountryCode&quot;: &quot;${dwcCountryCode_3}&quot;,&#xd;
      &quot;dwcStateProvince&quot;: &quot;${dwcStateProvince_3}&quot;,&#xd;
      &quot;dwcMinimumElevationInMeters&quot;: ${dwcMinimumElevationInMeters_3},&#xd;
      &quot;dwcMinimumDepthInMeters&quot;: ${dwcMinimumDepthInMeters_3},&#xd;
      &quot;dwcMaximumElevationInMeters&quot;: ${dwcMaximumElevationInMeters_3},&#xd;
      &quot;dwcMaximumDepthInMeters&quot;: ${dwcMaximumDepthInMeters_3},&#xd;
      &quot;habitat&quot;: &quot;${habitat_3}&quot;,&#xd;
      &quot;substrate&quot;: &quot;${substrate_3}&quot;,&#xd;
      &quot;remarks&quot;: &quot;${remarks_3}&quot;,&#xd;
      &quot;verbatimEventDateTime&quot;: &quot;${verbatimEventDateTime_3}&quot;,&#xd;
      &quot;startEventDateTime&quot;: &quot;${startEventDateTime_3}&quot;,&#xd;
      &quot;endEventDateTime&quot;: &quot;${endEventDateTime_3}&quot;,&#xd;
      &quot;dwcVerbatimLocality&quot;: &quot;${dwcVerbatimLocality_3}&quot;,&#xd;
      &quot;publiclyReleasable&quot;: ${publiclyReleasable_3},&#xd;
      &quot;notPubliclyReleasableReason&quot;: &quot;${notPubliclyReleasableReason_3}&quot;,&#xd;
      &quot;geographicPlaceNameSource&quot;: &quot;${geographicPlaceNameSource_3}&quot;,&#xd;
      &quot;tags&quot;: ${tags_3},&#xd;
      &quot;host&quot;: &quot;${host_3}&quot;,&#xd;
      &quot;geographicPlaceNameSourceDetail&quot;: {&#xd;
      	&quot;sourceUrl&quot;: &quot;${geographicPlaceNameSourceDetail_sourceUrl_3}&quot;,&#xd;
      	&quot;customGeographPlace&quot;: ${geographicPlaceNameSourceDetail_customGeographPlace_3},&#xd;
      	&quot;selectedGeographicPlace&quot;: {&#xd;
      		&quot;id&quot;: &quot;${geographicPlaceNameSourceDetail_selectedGeographicPlace_id_3}&quot;,&#xd;
      		&quot;element&quot;: &quot;${geographicPlaceNameSourceDetail_selectedGeographicPlace_element_3}&quot;,&#xd;
      		&quot;placeType&quot;: &quot;${geographicPlaceNameSourceDetail_selectedGeographicPlace_placeType_3}&quot;,&#xd;
      		&quot;name&quot;: &quot;${geographicPlaceNameSourceDetail_selectedGeographicPlace_name_3}&quot;	&#xd;
      	},&#xd;
      	&quot;higherGeographicPlace&quot;: ${geographicPlaceNameSourceDetail_higherGeographicPlace_3},&#xd;
      	&quot;stateProvince&quot;: {&#xd;
      		&quot;id&quot;: &quot;${geographicPlaceNameSourceDetail_stateProvince_id_3}&quot;,&#xd;
      		&quot;element&quot;: &quot;${geographicPlaceNameSourceDetail_stateProvince_element_3}&quot;,&#xd;
      		&quot;placeType&quot;: &quot;${geographicPlaceNameSourceDetail_stateProvince_placeType_3}&quot;,&#xd;
      		&quot;name&quot;: &quot;${geographicPlaceNameSourceDetail_stateProvince_name_3}&quot;	&#xd;
      	},&#xd;
      	&quot;country&quot;: {&#xd;
      		&quot;code&quot;: &quot;${geographicPlaceNameSourceDetail_country_code_3}&quot;,&#xd;
      		&quot;name&quot;: &quot;${geographicPlaceNameSourceDetail_country_name_3}&quot;&#xd;
      	}&#xd;
      },&#xd;
      &quot;geoReferenceAssertions&quot;: [&#xd;
      	{&#xd;
      		&quot;dwcDecimalLatitude&quot;: ${geoReferenceAssertions_dwcDecimalLatitude_3},&#xd;
      		&quot;dwcDecimalLongitude&quot;: ${geoReferenceAssertions_dwcDecimalLongitude_3},&#xd;
      		&quot;dwcCoordinateUncertaintyInMeters&quot;: ${geoReferenceAssertions_dwcCoordinateUncertaintyInMeters_3},&#xd;
      		&quot;dwcGeoreferencedDate&quot;: &quot;${geoReferenceAssertions_dwcGeoreferencedDate_3}&quot;,&#xd;
      		&quot;georeferencedBy&quot;: ${geoReferenceAssertions_georeferencedBy_3},&#xd;
      		&quot;literalGeoreferencedBy&quot;: &quot;${geoReferenceAssertions_literalGeoreferencedBy_3}&quot;,&#xd;
      		&quot;dwcGeoreferenceProtocol&quot;: &quot;${geoReferenceAssertions_dwcGeoreferenceProtocol_3}&quot;,&#xd;
      		&quot;dwcGeoreferenceSources&quot;: &quot;${geoReferenceAssertions_dwcGeoreferenceSources_3}&quot;,&#xd;
      		&quot;dwcGeoreferenceRemarks&quot;: &quot;${geoReferenceAssertions_dwcGeoreferenceRemarks_3}&quot;,&#xd;
      		&quot;dwcGeodeticDatum&quot;: &quot;${geoReferenceAssertions_dwcGeodeticDatum_3}&quot;,&#xd;
      		&quot;isPrimary&quot;: ${geoReferenceAssertions_isPrimary_3},&#xd;
      		&quot;dwcGeoreferenceVerificationStatus&quot;: ${geoReferenceAssertions_dwcGeoreferenceVerificationStatus_3}&#xd;
      	}&#xd;
      ]&#xd;
    },&#xd;
    &quot;relationships&quot;: {&#xd;
    	 &quot;protocol&quot;: {&#xd;
    	 	&quot;data&quot;: {&#xd;
    	 		&quot;type&quot;: &quot;protocol&quot;,&#xd;
    	 		&quot;id&quot;: &quot;${basic_protocol_uuid}&quot;&#xd;
    	 	}&#xd;
    	 },&#xd;
    	 &quot;collectors&quot;: {&#xd;
    	 	&quot;data&quot;: {&#xd;
			&quot;type&quot;: &quot;person&quot;,&#xd;
			&quot;id&quot;: &quot;${__P(person_uuid_2)}&quot;&#xd;
    	 	}&#xd;
    	 },&#xd;
    	 &quot;attachment&quot;: {&#xd;
    	 	&quot;data&quot;: {&#xd;
    	 		&quot;type&quot;: &quot;metadata&quot;,&#xd;
    	 		&quot;id&quot;: &quot;${__P(attachment_uuid_2)}&quot;&#xd;
    	 	}&#xd;
    	 }&#xd;
    }&#xd;
  }&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/collecting-event/${basic_collecting-event_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Basic Collecting Event" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the basic Collecting Event have been updated and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Basic Collecting Event Updated" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/collecting-event/${basic_collecting-event_uuid}?include=attachment,protocol,collectors</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Updated Basic Collecting Event - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.group == &quot;${user_group}&quot;
assert attr.dwcVerbatimCoordinates == &quot;${dwcVerbatimCoordinates_3}&quot;
assert attr.dwcRecordedBy == &quot;${dwcRecordedBy_3}&quot;
assert attr.dwcVerbatimLatitude == &quot;${dwcVerbatimLatitude_3}&quot;
assert attr.dwcVerbatimLongitude == &quot;${dwcVerbatimLongitude_3}&quot;
assert attr.dwcVerbatimCoordinateSystem == &quot;${dwcVerbatimCoordinateSystem_3}&quot;
assert attr.dwcVerbatimSRS == &quot;${dwcVerbatimSRS_3}&quot;
assert attr.dwcVerbatimElevation == &quot;${dwcVerbatimElevation_3}&quot;
assert attr.dwcVerbatimDepth == &quot;${dwcVerbatimDepth_3}&quot;
assert attr.dwcFieldNumber == &quot;${dwcFieldNumber_3}&quot;
assert attr.dwcRecordNumber == &quot;${dwcRecordNumber_3}&quot;
assert attr.otherRecordNumbers == ${otherRecordNumbers_3}
assert attr.dwcCountry == &quot;${dwcCountry_3}&quot;
assert attr.dwcCountryCode == &quot;${dwcCountryCode_3}&quot;
assert attr.dwcStateProvince == &quot;${dwcStateProvince_3}&quot;
assert attr.dwcMinimumElevationInMeters == ${dwcMinimumElevationInMeters_3}
assert attr.dwcMinimumDepthInMeters == ${dwcMinimumDepthInMeters_3}
assert attr.dwcMaximumElevationInMeters == ${dwcMaximumElevationInMeters_3}
assert attr.dwcMaximumDepthInMeters == ${dwcMaximumDepthInMeters_3}
assert attr.habitat == &quot;${habitat_3}&quot;
assert attr.substrate == &quot;${substrate_3}&quot;
assert attr.remarks == &quot;${remarks_3}&quot;
assert attr.verbatimEventDateTime == &quot;${verbatimEventDateTime_3}&quot;
assert attr.startEventDateTime == &quot;${startEventDateTime_3}&quot;
assert attr.endEventDateTime == &quot;${endEventDateTime_3}&quot;
assert attr.dwcVerbatimLocality == &quot;${dwcVerbatimLocality_3}&quot;
assert attr.publiclyReleasable == ${publiclyReleasable_3}
assert attr.notPubliclyReleasableReason == &quot;${notPubliclyReleasableReason_3}&quot;
assert attr.geographicPlaceNameSource == &quot;${geographicPlaceNameSource_3}&quot;
assert attr.tags == ${tags_3}
assert attr.host == &quot;${host_3}&quot;
assert attr.geographicPlaceNameSourceDetail.sourceUrl == &quot;${geographicPlaceNameSourceDetail_sourceUrl_3}&quot;
assert attr.geographicPlaceNameSourceDetail.customGeographPlace == ${geographicPlaceNameSourceDetail_customGeographPlace_3}
assert attr.geographicPlaceNameSourceDetail.selectedGeographicPlace.id == &quot;${geographicPlaceNameSourceDetail_selectedGeographicPlace_id_3}&quot;
assert attr.geographicPlaceNameSourceDetail.selectedGeographicPlace.element == &quot;${geographicPlaceNameSourceDetail_selectedGeographicPlace_element_3}&quot;
assert attr.geographicPlaceNameSourceDetail.selectedGeographicPlace.placeType == &quot;${geographicPlaceNameSourceDetail_selectedGeographicPlace_placeType_3}&quot;
assert attr.geographicPlaceNameSourceDetail.selectedGeographicPlace.name == &quot;${geographicPlaceNameSourceDetail_selectedGeographicPlace_name_3}&quot;
assert attr.geographicPlaceNameSourceDetail.stateProvince.id == &quot;${geographicPlaceNameSourceDetail_stateProvince_id_3}&quot;
assert attr.geographicPlaceNameSourceDetail.stateProvince.element == &quot;${geographicPlaceNameSourceDetail_stateProvince_element_3}&quot;
assert attr.geographicPlaceNameSourceDetail.stateProvince.placeType == &quot;${geographicPlaceNameSourceDetail_stateProvince_placeType_3}&quot;
assert attr.geographicPlaceNameSourceDetail.stateProvince.name == &quot;${geographicPlaceNameSourceDetail_stateProvince_name_3}&quot;
assert attr.geographicPlaceNameSourceDetail.country.code == &quot;${geographicPlaceNameSourceDetail_country_code_3}&quot;
assert attr.geographicPlaceNameSourceDetail.country.name == &quot;${geographicPlaceNameSourceDetail_country_name_3}&quot;
assert attr.geoReferenceAssertions[0].dwcDecimalLatitude == ${geoReferenceAssertions_dwcDecimalLatitude_3}
assert attr.geoReferenceAssertions[0].dwcDecimalLongitude == ${geoReferenceAssertions_dwcDecimalLongitude_3}
assert attr.geoReferenceAssertions[0].dwcCoordinateUncertaintyInMeters == ${geoReferenceAssertions_dwcCoordinateUncertaintyInMeters_3}
assert attr.geoReferenceAssertions[0].dwcGeoreferencedDate == &quot;${geoReferenceAssertions_dwcGeoreferencedDate_3}&quot;
assert attr.geoReferenceAssertions[0].georeferencedBy == ${geoReferenceAssertions_georeferencedBy_3}
assert attr.geoReferenceAssertions[0].literalGeoreferencedBy == &quot;${geoReferenceAssertions_literalGeoreferencedBy_3}&quot;
assert attr.geoReferenceAssertions[0].dwcGeoreferenceProtocol == &quot;${geoReferenceAssertions_dwcGeoreferenceProtocol_3}&quot;
assert attr.geoReferenceAssertions[0].dwcGeoreferenceSources == &quot;${geoReferenceAssertions_dwcGeoreferenceSources_3}&quot;
assert attr.geoReferenceAssertions[0].dwcGeoreferenceRemarks == &quot;${geoReferenceAssertions_dwcGeoreferenceRemarks_3}&quot;
assert attr.geoReferenceAssertions[0].dwcGeodeticDatum == &quot;${geoReferenceAssertions_dwcGeodeticDatum_3}&quot;
assert attr.geoReferenceAssertions[0].isPrimary == ${geoReferenceAssertions_isPrimary_3}
assert attr.geoReferenceAssertions[0].dwcGeoreferenceVerificationStatus == ${geoReferenceAssertions_dwcGeoreferenceVerificationStatus_3}

def rel = object.data.relationships

assert rel.attachment.data[0].id == &quot;${__P(attachment_uuid_2)}&quot;
assert rel.collectors.data[0].id == &quot;${__P(person_uuid_2)}&quot;
assert rel.protocol.data.id == &quot;${basic_protocol_uuid}&quot;
</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Collecting Event" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose Collecting Event record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Verbose Collecting Event" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;collecting-event&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;dwcVerbatimCoordinates&quot;: &quot;${dwcVerbatimCoordinates_4}&quot;,&#xd;
      &quot;dwcRecordedBy&quot;: &quot;${dwcRecordedBy_4}&quot;,&#xd;
      &quot;dwcVerbatimLatitude&quot;: &quot;${dwcVerbatimLatitude_4}&quot;,&#xd;
      &quot;dwcVerbatimLongitude&quot;: &quot;${dwcVerbatimLongitude_4}&quot;,&#xd;
      &quot;dwcVerbatimCoordinateSystem&quot;: &quot;${dwcVerbatimCoordinateSystem_4}&quot;,&#xd;
      &quot;dwcVerbatimSRS&quot;: &quot;${dwcVerbatimSRS_4}&quot;,&#xd;
      &quot;dwcVerbatimElevation&quot;: &quot;${dwcVerbatimElevation_4}&quot;,&#xd;
      &quot;dwcVerbatimDepth&quot;: &quot;${dwcVerbatimDepth_4}&quot;,&#xd;
      &quot;dwcFieldNumber&quot;: &quot;${dwcFieldNumber_4}&quot;,&#xd;
      &quot;dwcRecordNumber&quot;: &quot;${dwcRecordNumber_4}&quot;,&#xd;
      &quot;otherRecordNumbers&quot;: ${otherRecordNumbers_4},&#xd;
      &quot;dwcCountry&quot;: &quot;${dwcCountry_4}&quot;,&#xd;
      &quot;dwcCountryCode&quot;: &quot;${dwcCountryCode_4}&quot;,&#xd;
      &quot;dwcStateProvince&quot;: &quot;${dwcStateProvince_4}&quot;,&#xd;
      &quot;dwcMinimumElevationInMeters&quot;: ${dwcMinimumElevationInMeters_4},&#xd;
      &quot;dwcMinimumDepthInMeters&quot;: ${dwcMinimumDepthInMeters_4},&#xd;
      &quot;dwcMaximumElevationInMeters&quot;: ${dwcMaximumElevationInMeters_4},&#xd;
      &quot;dwcMaximumDepthInMeters&quot;: ${dwcMaximumDepthInMeters_4},&#xd;
      &quot;habitat&quot;: &quot;${habitat_4}&quot;,&#xd;
      &quot;substrate&quot;: &quot;${substrate_4}&quot;,&#xd;
      &quot;remarks&quot;: &quot;${remarks_4}&quot;,&#xd;
      &quot;verbatimEventDateTime&quot;: &quot;${verbatimEventDateTime_4}&quot;,&#xd;
      &quot;startEventDateTime&quot;: &quot;${startEventDateTime_4}&quot;,&#xd;
      &quot;endEventDateTime&quot;: &quot;${endEventDateTime_4}&quot;,&#xd;
      &quot;dwcVerbatimLocality&quot;: &quot;${dwcVerbatimLocality_4}&quot;,&#xd;
      &quot;publiclyReleasable&quot;: ${publiclyReleasable_4},&#xd;
      &quot;notPubliclyReleasableReason&quot;: &quot;${notPubliclyReleasableReason_4}&quot;,&#xd;
      &quot;geographicPlaceNameSource&quot;: &quot;${geographicPlaceNameSource_4}&quot;,&#xd;
      &quot;tags&quot;: ${tags_4},&#xd;
      &quot;host&quot;: &quot;${host_4}&quot;,&#xd;
      &quot;geographicPlaceNameSourceDetail&quot;: {&#xd;
      	&quot;sourceUrl&quot;: &quot;${geographicPlaceNameSourceDetail_sourceUrl_4}&quot;,&#xd;
      	&quot;customGeographPlace&quot;: ${geographicPlaceNameSourceDetail_customGeographPlace_4},&#xd;
      	&quot;selectedGeographicPlace&quot;: {&#xd;
      		&quot;id&quot;: &quot;${geographicPlaceNameSourceDetail_selectedGeographicPlace_id_4}&quot;,&#xd;
      		&quot;element&quot;: &quot;${geographicPlaceNameSourceDetail_selectedGeographicPlace_element_4}&quot;,&#xd;
      		&quot;placeType&quot;: &quot;${geographicPlaceNameSourceDetail_selectedGeographicPlace_placeType_4}&quot;,&#xd;
      		&quot;name&quot;: &quot;${geographicPlaceNameSourceDetail_selectedGeographicPlace_name_4}&quot;	&#xd;
      	},&#xd;
      	&quot;higherGeographicPlace&quot;: ${geographicPlaceNameSourceDetail_higherGeographicPlace_4},&#xd;
      	&quot;stateProvince&quot;: {&#xd;
      		&quot;id&quot;: &quot;${geographicPlaceNameSourceDetail_stateProvince_id_4}&quot;,&#xd;
      		&quot;element&quot;: &quot;${geographicPlaceNameSourceDetail_stateProvince_element_4}&quot;,&#xd;
      		&quot;placeType&quot;: &quot;${geographicPlaceNameSourceDetail_stateProvince_placeType_4}&quot;,&#xd;
      		&quot;name&quot;: &quot;${geographicPlaceNameSourceDetail_stateProvince_name_4}&quot;	&#xd;
      	},&#xd;
      	&quot;country&quot;: {&#xd;
      		&quot;code&quot;: &quot;${geographicPlaceNameSourceDetail_country_code_4}&quot;,&#xd;
      		&quot;name&quot;: &quot;${geographicPlaceNameSourceDetail_country_name_4}&quot;&#xd;
      	}&#xd;
      },&#xd;
      &quot;geoReferenceAssertions&quot;: [&#xd;
      	{&#xd;
      		&quot;dwcDecimalLatitude&quot;: ${geoReferenceAssertions_dwcDecimalLatitude_4},&#xd;
      		&quot;dwcDecimalLongitude&quot;: ${geoReferenceAssertions_dwcDecimalLongitude_4},&#xd;
      		&quot;dwcCoordinateUncertaintyInMeters&quot;: ${geoReferenceAssertions_dwcCoordinateUncertaintyInMeters_4},&#xd;
      		&quot;dwcGeoreferencedDate&quot;: &quot;${geoReferenceAssertions_dwcGeoreferencedDate_4}&quot;,&#xd;
      		&quot;georeferencedBy&quot;: ${geoReferenceAssertions_georeferencedBy_4},&#xd;
      		&quot;literalGeoreferencedBy&quot;: &quot;${geoReferenceAssertions_literalGeoreferencedBy_4}&quot;,&#xd;
      		&quot;dwcGeoreferenceProtocol&quot;: &quot;${geoReferenceAssertions_dwcGeoreferenceProtocol_4}&quot;,&#xd;
      		&quot;dwcGeoreferenceSources&quot;: &quot;${geoReferenceAssertions_dwcGeoreferenceSources_4}&quot;,&#xd;
      		&quot;dwcGeoreferenceRemarks&quot;: &quot;${geoReferenceAssertions_dwcGeoreferenceRemarks_4}&quot;,&#xd;
      		&quot;dwcGeodeticDatum&quot;: &quot;${geoReferenceAssertions_dwcGeodeticDatum_4}&quot;,&#xd;
      		&quot;isPrimary&quot;: ${geoReferenceAssertions_isPrimary_4},&#xd;
      		&quot;dwcGeoreferenceVerificationStatus&quot;: ${geoReferenceAssertions_dwcGeoreferenceVerificationStatus_4}&#xd;
      	}&#xd;
      ]&#xd;
    },&#xd;
    &quot;relationships&quot;: {&#xd;
    	 &quot;protocol&quot;: {&#xd;
    	 	&quot;data&quot;: {&#xd;
    	 		&quot;type&quot;: &quot;protocol&quot;,&#xd;
    	 		&quot;id&quot;: &quot;${basic_protocol_uuid}&quot;&#xd;
    	 	}&#xd;
    	 },&#xd;
    	 &quot;collectors&quot;: {&#xd;
    	 	&quot;data&quot;: {&#xd;
			&quot;type&quot;: &quot;person&quot;,&#xd;
			&quot;id&quot;: &quot;${__P(person_uuid_2)}&quot;&#xd;
    	 	}&#xd;
    	 },&#xd;
    	 &quot;attachment&quot;: {&#xd;
    	 	&quot;data&quot;: {&#xd;
    	 		&quot;type&quot;: &quot;metadata&quot;,&#xd;
    	 		&quot;id&quot;: &quot;${__P(attachment_uuid_2)}&quot;&#xd;
    	 	}&#xd;
    	 }&#xd;
    }&#xd;
  }&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/collecting-event/${verbose_collecting-event_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Verbose Collecting Event" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the verbose Collecting Event have been updated and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Verbose Collecting Event Updated" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/collecting-event/${verbose_collecting-event_uuid}?include=attachment,protocol,collectors</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Updated Verbose Collecting Event - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.group == &quot;${user_group}&quot;
assert attr.dwcVerbatimCoordinates == &quot;${dwcVerbatimCoordinates_4}&quot;
assert attr.dwcRecordedBy == &quot;${dwcRecordedBy_4}&quot;
assert attr.dwcVerbatimLatitude == &quot;${dwcVerbatimLatitude_4}&quot;
assert attr.dwcVerbatimLongitude == &quot;${dwcVerbatimLongitude_4}&quot;
assert attr.dwcVerbatimCoordinateSystem == &quot;${dwcVerbatimCoordinateSystem_4}&quot;
assert attr.dwcVerbatimSRS == &quot;${dwcVerbatimSRS_4}&quot;
assert attr.dwcVerbatimElevation == &quot;${dwcVerbatimElevation_4}&quot;
assert attr.dwcVerbatimDepth == &quot;${dwcVerbatimDepth_4}&quot;
assert attr.dwcFieldNumber == &quot;${dwcFieldNumber_4}&quot;
assert attr.dwcRecordNumber == &quot;${dwcRecordNumber_4}&quot;
assert attr.otherRecordNumbers == ${otherRecordNumbers_4}
assert attr.dwcCountry == &quot;${dwcCountry_4}&quot;
assert attr.dwcCountryCode == &quot;${dwcCountryCode_4}&quot;
assert attr.dwcStateProvince == &quot;${dwcStateProvince_4}&quot;
assert attr.dwcMinimumElevationInMeters == ${dwcMinimumElevationInMeters_4}
assert attr.dwcMinimumDepthInMeters == ${dwcMinimumDepthInMeters_4}
assert attr.dwcMaximumElevationInMeters == ${dwcMaximumElevationInMeters_4}
assert attr.dwcMaximumDepthInMeters == ${dwcMaximumDepthInMeters_4}
assert attr.habitat == &quot;${habitat_4}&quot;
assert attr.substrate == &quot;${substrate_4}&quot;
assert attr.remarks == &quot;${remarks_4}&quot;
assert attr.verbatimEventDateTime == &quot;${verbatimEventDateTime_4}&quot;
assert attr.startEventDateTime == &quot;${startEventDateTime_4}&quot;
assert attr.endEventDateTime == &quot;${endEventDateTime_4}&quot;
assert attr.dwcVerbatimLocality == &quot;${dwcVerbatimLocality_4}&quot;
assert attr.publiclyReleasable == ${publiclyReleasable_4}
assert attr.notPubliclyReleasableReason == &quot;${notPubliclyReleasableReason_4}&quot;
assert attr.geographicPlaceNameSource == &quot;${geographicPlaceNameSource_4}&quot;
assert attr.tags == ${tags_4}
assert attr.host == &quot;${host_4}&quot;
assert attr.geographicPlaceNameSourceDetail.sourceUrl == &quot;${geographicPlaceNameSourceDetail_sourceUrl_4}&quot;
assert attr.geographicPlaceNameSourceDetail.customGeographPlace == ${geographicPlaceNameSourceDetail_customGeographPlace_4}
assert attr.geographicPlaceNameSourceDetail.selectedGeographicPlace.id == &quot;${geographicPlaceNameSourceDetail_selectedGeographicPlace_id_4}&quot;
assert attr.geographicPlaceNameSourceDetail.selectedGeographicPlace.element == &quot;${geographicPlaceNameSourceDetail_selectedGeographicPlace_element_4}&quot;
assert attr.geographicPlaceNameSourceDetail.selectedGeographicPlace.placeType == &quot;${geographicPlaceNameSourceDetail_selectedGeographicPlace_placeType_4}&quot;
assert attr.geographicPlaceNameSourceDetail.selectedGeographicPlace.name == &quot;${geographicPlaceNameSourceDetail_selectedGeographicPlace_name_4}&quot;
assert attr.geographicPlaceNameSourceDetail.stateProvince.id == &quot;${geographicPlaceNameSourceDetail_stateProvince_id_4}&quot;
assert attr.geographicPlaceNameSourceDetail.stateProvince.element == &quot;${geographicPlaceNameSourceDetail_stateProvince_element_4}&quot;
assert attr.geographicPlaceNameSourceDetail.stateProvince.placeType == &quot;${geographicPlaceNameSourceDetail_stateProvince_placeType_4}&quot;
assert attr.geographicPlaceNameSourceDetail.stateProvince.name == &quot;${geographicPlaceNameSourceDetail_stateProvince_name_4}&quot;
assert attr.geographicPlaceNameSourceDetail.country.code == &quot;${geographicPlaceNameSourceDetail_country_code_4}&quot;
assert attr.geographicPlaceNameSourceDetail.country.name == &quot;${geographicPlaceNameSourceDetail_country_name_4}&quot;
assert attr.geoReferenceAssertions[0].dwcDecimalLatitude == ${geoReferenceAssertions_dwcDecimalLatitude_4}
assert attr.geoReferenceAssertions[0].dwcDecimalLongitude == ${geoReferenceAssertions_dwcDecimalLongitude_4}
assert attr.geoReferenceAssertions[0].dwcCoordinateUncertaintyInMeters == ${geoReferenceAssertions_dwcCoordinateUncertaintyInMeters_4}
assert attr.geoReferenceAssertions[0].dwcGeoreferencedDate == &quot;${geoReferenceAssertions_dwcGeoreferencedDate_4}&quot;
assert attr.geoReferenceAssertions[0].georeferencedBy == ${geoReferenceAssertions_georeferencedBy_4}
assert attr.geoReferenceAssertions[0].literalGeoreferencedBy == &quot;${geoReferenceAssertions_literalGeoreferencedBy_4}&quot;
assert attr.geoReferenceAssertions[0].dwcGeoreferenceProtocol == &quot;${geoReferenceAssertions_dwcGeoreferenceProtocol_4}&quot;
assert attr.geoReferenceAssertions[0].dwcGeoreferenceSources == &quot;${geoReferenceAssertions_dwcGeoreferenceSources_4}&quot;
assert attr.geoReferenceAssertions[0].dwcGeoreferenceRemarks == &quot;${geoReferenceAssertions_dwcGeoreferenceRemarks_4}&quot;
assert attr.geoReferenceAssertions[0].dwcGeodeticDatum == &quot;${geoReferenceAssertions_dwcGeodeticDatum_4}&quot;
assert attr.geoReferenceAssertions[0].isPrimary == ${geoReferenceAssertions_isPrimary_4}
assert attr.geoReferenceAssertions[0].dwcGeoreferenceVerificationStatus == ${geoReferenceAssertions_dwcGeoreferenceVerificationStatus_4}

def rel = object.data.relationships

assert rel.attachment.data[0].id == &quot;${__P(attachment_uuid_2)}&quot;
assert rel.collectors.data[0].id == &quot;${__P(person_uuid_2)}&quot;
assert rel.protocol.data.id == &quot;${basic_protocol_uuid}&quot;
</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Collecting Event w/ Empty Body" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose Collecting Event record w/ an empty body request</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Verbose Collecting Event w/ Empty Body" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;collecting-event&quot;,&#xd;
    &quot;attributes&quot;: {},&#xd;
    &quot;relationships&quot;: {}&#xd;
  }&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/collecting-event/${verbose_collecting-event_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Validate Verbose Collecting Event" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="868735347">Collecting Event End2End Thread Group</stringProp>
                <stringProp name="-1754979095">Update</stringProp>
                <stringProp name="1253846512">Verbose Collecting Event</stringProp>
                <stringProp name="-529499750">Validate Verbose Collecting Event</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Collecting Event w/ Invalid UUID" enabled="true">
            <stringProp name="TestPlan.comments">Removes the verbose Collecting Event record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Collecting Event w/ Invalid UUID" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;collecting-event&quot;,&#xd;
    &quot;attributes&quot;: {},&#xd;
    &quot;relationships&quot;: {}&#xd;
  }&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/collecting-event/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Collecting Event" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Verbose Collecting Event" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/collecting-event/${verbose_collecting-event_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Verbose Collecting Event" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the verbose Collecting Event has been removed</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Verbose Collecting Event Removed" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/collecting-event/${verbose_collecting-event_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 410 Error" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;410&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Collecting Event" enabled="true">
            <stringProp name="TestPlan.comments">Removes the basic Collecting Event record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Basic Collecting Event" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/collecting-event/${basic_collecting-event_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Basic Collecting Event" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the basic Collecting Event has been removed</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Basic Collecting Event Removed" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/collecting-event/${basic_collecting-event_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 410 Error" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;410&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Collecting Event w/ Invalid UUID" enabled="true">
            <stringProp name="TestPlan.comments">Removes a Collecting Event record at a UUID that does not correspond to any Collecting Event - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Collecting Event w/ Invalid UUID" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/collecting-event/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Collecting Event tearDown" enabled="true">
            <stringProp name="TestPlan.comments">Removes entities created in the &quot;Create &gt; Collecting Event setUp&quot; controller</stringProp>
          </GenericController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Delete Protocols" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="1925115245">Protocol End2End Thread Group</stringProp>
                <stringProp name="2043376075">Delete</stringProp>
                <stringProp name="-347627894">Basic Protocol</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Delete Managed Attribute" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="-219911028">Collection Managed Attribute End2End Thread Group</stringProp>
                <stringProp name="2043376075">Delete</stringProp>
                <stringProp name="117127494">COLLECTING_EVENT Collection Managed Attribute</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Collection End2End Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Collection Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="code_1" elementType="Argument">
              <stringProp name="Argument.name">code_1</stringProp>
              <stringProp name="Argument.value">code_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="code_2" elementType="Argument">
              <stringProp name="Argument.name">code_2</stringProp>
              <stringProp name="Argument.value">code_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="code_3" elementType="Argument">
              <stringProp name="Argument.name">code_3</stringProp>
              <stringProp name="Argument.value">code_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="code_4" elementType="Argument">
              <stringProp name="Argument.name">code_4</stringProp>
              <stringProp name="Argument.value">code_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="webpage_1" elementType="Argument">
              <stringProp name="Argument.name">webpage_1</stringProp>
              <stringProp name="Argument.value">https://webpage_1.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="webpage_2" elementType="Argument">
              <stringProp name="Argument.name">webpage_2</stringProp>
              <stringProp name="Argument.value">https://webpage_2.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="webpage_3" elementType="Argument">
              <stringProp name="Argument.name">webpage_3</stringProp>
              <stringProp name="Argument.value">https://webpage_3.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="webpage_4" elementType="Argument">
              <stringProp name="Argument.name">webpage_4</stringProp>
              <stringProp name="Argument.value">https://webpage_4.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="contact_1" elementType="Argument">
              <stringProp name="Argument.name">contact_1</stringProp>
              <stringProp name="Argument.value">contact_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="contact_2" elementType="Argument">
              <stringProp name="Argument.name">contact_2</stringProp>
              <stringProp name="Argument.value">contact_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="contact_3" elementType="Argument">
              <stringProp name="Argument.name">contact_3</stringProp>
              <stringProp name="Argument.value">contact_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="contact_4" elementType="Argument">
              <stringProp name="Argument.name">contact_4</stringProp>
              <stringProp name="Argument.value">contact_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="address_1" elementType="Argument">
              <stringProp name="Argument.name">address_1</stringProp>
              <stringProp name="Argument.value">address_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="address_2" elementType="Argument">
              <stringProp name="Argument.name">address_2</stringProp>
              <stringProp name="Argument.value">address_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="address_3" elementType="Argument">
              <stringProp name="Argument.name">address_3</stringProp>
              <stringProp name="Argument.value">address_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="address_4" elementType="Argument">
              <stringProp name="Argument.name">address_4</stringProp>
              <stringProp name="Argument.value">address_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="remarks_1" elementType="Argument">
              <stringProp name="Argument.name">remarks_1</stringProp>
              <stringProp name="Argument.value">remarks_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="remarks_2" elementType="Argument">
              <stringProp name="Argument.name">remarks_2</stringProp>
              <stringProp name="Argument.value">remarks_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="remarks_3" elementType="Argument">
              <stringProp name="Argument.name">remarks_3</stringProp>
              <stringProp name="Argument.value">remarks_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="remarks_4" elementType="Argument">
              <stringProp name="Argument.name">remarks_4</stringProp>
              <stringProp name="Argument.value">remarks_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Thread Group Request Headers" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__P(access_token)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/vnd.api+json</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">Required headers to perform API requests</stringProp>
        </HeaderManager>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Token Controller" enabled="true">
          <stringProp name="TestPlan.comments">Runs the Token Controller in the setUp thread group to refresh the access token</stringProp>
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
            <stringProp name="1506430348">setUp Thread Group</stringProp>
            <stringProp name="52452451">Token Controller</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Collection setUp" enabled="true">
            <stringProp name="TestPlan.comments">Sets random variables and creates relationship entities required for Collection testing</stringProp>
          </GenericController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Set Random Variables" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def ctx = org.apache.jmeter.threads.JMeterContextService.getContext()

ctx.getVariables().put(&quot;name_1&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_2&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_3&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_4&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Create Institution" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="-1804591475">Institution End2End Thread Group</stringProp>
                <stringProp name="2026540316">Create</stringProp>
                <stringProp name="286013574">Basic Institution</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Collection" enabled="true">
            <stringProp name="TestPlan.comments">Creates a basic Collection record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Basic Collection" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;collection&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_1}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/collection</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Basic Collection UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">basic_collection_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Basic Collection" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the basic Collection have been created and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Basic Collection Creation" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/collection/${basic_collection_uuid}?include=institution,parentCollection</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Created Basic Collection - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.group == &quot;${user_group}&quot;
assert attr.name == &quot;${name_1}&quot;
</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Collection" enabled="true">
            <stringProp name="TestPlan.comments">Creates a verbose Collection record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Verbose Collection" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;collection&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_2}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;code&quot;: &quot;${code_2}&quot;,&#xd;
         &quot;webpage&quot;: &quot;${webpage_2}&quot;,&#xd;
         &quot;contact&quot;: &quot;${contact_2}&quot;,&#xd;
          &quot;address&quot;: &quot;${address_2}&quot;,&#xd;
         &quot;remarks&quot;: &quot;${remarks_2}&quot;&#xd;
    },&#xd;
    &quot;relationships&quot;: {&#xd;
      &quot;institution&quot;: {&#xd;
        &quot;data&quot;: {&#xd;
          &quot;type&quot;: &quot;institution&quot;,&#xd;
          &quot;id&quot;: &quot;${basic_institution_uuid}&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;parentCollection&quot;: {&#xd;
        &quot;data&quot;: {&#xd;
          &quot;type&quot;: &quot;collection&quot;,&#xd;
          &quot;id&quot;: &quot;${basic_collection_uuid}&quot;&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/collection</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Verbose Collection UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">verbose_collection_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Verbose Collection" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the verbose Collection have been created and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Verbose Collection Creation" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/collection/${verbose_collection_uuid}?include=institution,parentCollection</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Created Verbose Collection - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.group == &quot;${user_group}&quot;
assert attr.name == &quot;${name_2}&quot;
assert attr.code == &quot;${code_2}&quot;
assert attr.webpage == &quot;${webpage_2}&quot;
assert attr.contact == &quot;${contact_2}&quot;
assert attr.address == &quot;${address_2}&quot;
assert attr.remarks == &quot;${remarks_2}&quot;

def rel = object.data.relationships

assert rel.institution.data.id == &quot;${basic_institution_uuid}&quot;
assert rel.parentCollection.data.id == &quot;${basic_collection_uuid}&quot;
</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Collection w/ Empty Atttributes" enabled="true">
            <stringProp name="TestPlan.comments">Creates a Collection without any attributes specified - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Created Collection w/ Empty Attributes" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;collection&quot;,&#xd;
    &quot;attributes&quot;: {}&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/collection</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 403 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;403&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Collection w/ Only User Group" enabled="true">
            <stringProp name="TestPlan.comments">Creates a Collection with only user group specified - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Collection w/ Only User Group" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;collection&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/collection</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 422 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;422&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Collection w/ Incorrect Type" enabled="true">
            <stringProp name="TestPlan.comments">Creates a Collection with the incorrect type specified - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Collection w/ Incorrect Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;material-sample&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_1}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/collection</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 400 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;400&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Collection" enabled="true">
            <stringProp name="TestPlan.comments">Updates the basic Collection record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Basic Collection" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;collection&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_3}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;code&quot;: &quot;${code_3}&quot;,&#xd;
         &quot;webpage&quot;: &quot;${webpage_3}&quot;,&#xd;
         &quot;contact&quot;: &quot;${contact_3}&quot;,&#xd;
          &quot;address&quot;: &quot;${address_3}&quot;,&#xd;
         &quot;remarks&quot;: &quot;${remarks_3}&quot;&#xd;
    },&#xd;
    &quot;relationships&quot;: {&#xd;
      &quot;institution&quot;: {&#xd;
        &quot;data&quot;: {&#xd;
          &quot;type&quot;: &quot;institution&quot;,&#xd;
          &quot;id&quot;: &quot;${basic_institution_uuid}&quot;&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/collection/${basic_collection_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Basic Collection" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the basic Collection have been updated and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Basic Collection Updated" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/collection/${basic_collection_uuid}?include=institution,parentCollection</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Update Basic Collection - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.group == &quot;${user_group}&quot;
assert attr.name == &quot;${name_3}&quot;
assert attr.code == &quot;${code_3}&quot;
assert attr.webpage == &quot;${webpage_3}&quot;
assert attr.contact == &quot;${contact_3}&quot;
assert attr.address == &quot;${address_3}&quot;
assert attr.remarks == &quot;${remarks_3}&quot;

def rel = object.data.relationships

assert rel.institution.data.id == &quot;${basic_institution_uuid}&quot;
</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Collection" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose Collection record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Verbose Collection" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;collection&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_4}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;code&quot;: &quot;${code_4}&quot;,&#xd;
         &quot;webpage&quot;: &quot;${webpage_4}&quot;,&#xd;
         &quot;contact&quot;: &quot;${contact_4}&quot;,&#xd;
          &quot;address&quot;: &quot;${address_4}&quot;,&#xd;
         &quot;remarks&quot;: &quot;${remarks_4}&quot;&#xd;
    },&#xd;
    &quot;relationships&quot;: {&#xd;
      &quot;parentCollection&quot;: {&#xd;
        &quot;data&quot;: null&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/collection/${verbose_collection_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Update Verbose" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the verbose Collection have been updated and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Verbose Collection Updated" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/collection/${verbose_collection_uuid}?include=institution,parentCollection</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Updated Verbose Collection - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.group == &quot;${user_group}&quot;
assert attr.name == &quot;${name_4}&quot;
assert attr.code == &quot;${code_4}&quot;
assert attr.webpage == &quot;${webpage_4}&quot;
assert attr.contact == &quot;${contact_4}&quot;
assert attr.address == &quot;${address_4}&quot;
assert attr.remarks == &quot;${remarks_4}&quot;

def rel = object.data.relationships

assert rel.institution.data.id == &quot;${basic_institution_uuid}&quot;
assert rel.parentCollection.data == null
</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Collection w/ Empty Body" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose Collection record w/ an empty body request</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Verbose Collection w/ Empty Body" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;attributes&quot;: {},&#xd;
    &quot;relationships&quot;: {}&#xd;
  }&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/collection/${verbose_collection_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Validate Update Verbose" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="1137554727">Collection End2End Thread Group</stringProp>
                <stringProp name="-1754979095">Update</stringProp>
                <stringProp name="2108981308">Verbose Collection</stringProp>
                <stringProp name="949670229">Validate Update Verbose</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Collection w/ Invalid UUID" enabled="true">
            <stringProp name="TestPlan.comments">Updates a Collection at a UUID that does not correspond to any Collection - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Collection w/ Invalid UUID" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;collection&quot;,&#xd;
    &quot;attributes&quot;: {},&#xd;
    &quot;relationships&quot;: {}&#xd;
  }&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/collection/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Vebose Collection" enabled="true">
            <stringProp name="TestPlan.comments">Removes the verbose Collection record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Verbose Collection" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/collection/${verbose_collection_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Verbose Collection" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the verbose Collection has been removed</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Verbose Collection Removed" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/collection/${verbose_collection_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 410 Error" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;410&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Collection" enabled="true">
            <stringProp name="TestPlan.comments">Removes the basic Collection record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Basic Collection" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/collection/${basic_collection_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Basic Collection" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the basic Collection has been removed</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Basic Collection Removed" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/collection/${basic_collection_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 410 Error" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;410&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Collection w/ Invalid UUID" enabled="true">
            <stringProp name="TestPlan.comments">Removes a Collection record at a UUID that does not correspond to any Collection - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Collection w/ Invalid UUID" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/collection/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Collection tearDown" enabled="true">
            <stringProp name="TestPlan.comments">Removes entities created in the &quot;Create &gt; Collection setUp&quot; controller</stringProp>
          </GenericController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Delete Institution" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="-1804591475">Institution End2End Thread Group</stringProp>
                <stringProp name="2043376075">Delete</stringProp>
                <stringProp name="286013574">Basic Institution</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Thread Group Request Headers" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__P(access_token)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/vnd.api+json</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">Required headers to perform API requests</stringProp>
        </HeaderManager>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Storage Unit End2End Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Storage Unit Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="barcode_1" elementType="Argument">
              <stringProp name="Argument.name">barcode_1</stringProp>
              <stringProp name="Argument.value">barcode_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="barcode_2" elementType="Argument">
              <stringProp name="Argument.name">barcode_2</stringProp>
              <stringProp name="Argument.value">barcode_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="barcode_3" elementType="Argument">
              <stringProp name="Argument.name">barcode_3</stringProp>
              <stringProp name="Argument.value">barcode_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="barcode_4" elementType="Argument">
              <stringProp name="Argument.name">barcode_4</stringProp>
              <stringProp name="Argument.value">barcode_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Thread Group Request Headers" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__P(access_token)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/vnd.api+json</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">Required headers to perform API requests</stringProp>
        </HeaderManager>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Token Controller" enabled="true">
          <stringProp name="TestPlan.comments">Runs the Token Controller in the setUp thread group to refresh the access token</stringProp>
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
            <stringProp name="1506430348">setUp Thread Group</stringProp>
            <stringProp name="52452451">Token Controller</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Storage Unit setUp" enabled="true">
            <stringProp name="TestPlan.comments">Sets random variables and creates relationship entities required for Storage Unit testing</stringProp>
          </GenericController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Set Random Variables" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def ctx = org.apache.jmeter.threads.JMeterContextService.getContext()

ctx.getVariables().put(&quot;name_1&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_2&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_3&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_4&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Create Storage Unit Type" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="-1347631884">Storage Unit Type End2End Thread Group</stringProp>
                <stringProp name="2026540316">Create</stringProp>
                <stringProp name="-569633473">Basic Storage Unit Type</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Storage Unit" enabled="true">
            <stringProp name="TestPlan.comments">Creates a basic Storage Unit record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Basic Storage Unit" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_1}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Basic Storage Unit UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">basic_storage-unit_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Basic Storage Unit" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the basic Storage Unit have been created and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validat Basic Storage Unit Creation" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit/${basic_storage-unit_uuid}?include=storageUnitType,parentStorageUnit</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Created Basic Storage Unit - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.group == &quot;${user_group}&quot;
assert attr.name == &quot;${name_1}&quot;
</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Storage Unit" enabled="true">
            <stringProp name="TestPlan.comments">Creates a verbose Storage Unit record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Verbose Storage Unit" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_2}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;barcode&quot;: &quot;${barcode_2}&quot;&#xd;
    },&#xd;
    &quot;relationships&quot;: {&#xd;
      &quot;storageUnitType&quot;: {&#xd;
        &quot;data&quot;: {&#xd;
          &quot;type&quot;: &quot;storage-unit-type&quot;,&#xd;
          &quot;id&quot;: &quot;${basic_storage_unit_type_uuid}&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;parentStorageUnit&quot;: {&#xd;
        &quot;data&quot;: {&#xd;
          &quot;type&quot;: &quot;storage-unit&quot;,&#xd;
          &quot;id&quot;: &quot;${basic_storage-unit_uuid}&quot;&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Verbose Storage Unit UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">verbose_storage-unit_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Verbose Storage Unit" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the verbose Material Sample have been created and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Verbose Storage Unit Creation" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit/${verbose_storage-unit_uuid}?include=storageUnitType,parentStorageUnit</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Created Verbose Storage Unit - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.group == &quot;${user_group}&quot;
assert attr.name == &quot;${name_2}&quot;
assert attr.barcode == &quot;${barcode_2}&quot;

def rel = object.data.relationships

assert rel.storageUnitType.data.id == &quot;${basic_storage_unit_type_uuid}&quot;
assert rel.parentStorageUnit.data.id == &quot;${basic_storage-unit_uuid}&quot;
</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Storage Unit w/ Empty Attributes" enabled="true">
            <stringProp name="TestPlan.comments">Creates a Storage Unit without any attributes specified - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Storage Unit w/ Empty Attributes" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;storage-unit&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 403 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;403&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Storage Unit w/ Only User Group" enabled="true">
            <stringProp name="TestPlan.comments">Creates a Storage Unit with only user group specified - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Storage Unit w/ Only User Group" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;storage-unit&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 422 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;422&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Storage Unit w/ Incorrect Type" enabled="true">
            <stringProp name="TestPlan.comments">Creates a Storage Unit with the incorrect type specified - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Storage Unit w/ Incorrect Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;material-sample&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_1}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 400 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;400&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Storage Unit" enabled="true">
            <stringProp name="TestPlan.comments">Updates the basic Storage Unit record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Basic Storage Unit" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_3}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;barcode&quot;: &quot;${barcode_3}&quot;&#xd;
    },&#xd;
    &quot;relationships&quot;: {&#xd;
      &quot;storageUnitType&quot;: {&#xd;
        &quot;data&quot;: {&#xd;
          &quot;type&quot;: &quot;storage-unit-type&quot;,&#xd;
          &quot;id&quot;: &quot;${basic_storage_unit_type_uuid}&quot;&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit/${basic_storage-unit_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Basic Storage Unit" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the basic Material Sample have been updated and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Basic Storage Unit Updated" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit/${basic_storage-unit_uuid}?include=storageUnitType,parentStorageUnit</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Updated Basic Storage Unit - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.group == &quot;${user_group}&quot;
assert attr.name == &quot;${name_3}&quot;
assert attr.barcode == &quot;${barcode_3}&quot;

def rel = object.data.relationships

assert rel.storageUnitType.data.id == &quot;${basic_storage_unit_type_uuid}&quot;
</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Storage Unit" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose Storage Unit record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Verbose Storage Unit" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_4}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;barcode&quot;: &quot;${barcode_4}&quot;&#xd;
    },&#xd;
    &quot;relationships&quot;: {&#xd;
      &quot;parentStorageUnit&quot;: {&#xd;
        &quot;data&quot;: null&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit/${verbose_storage-unit_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Verbose Storage Unit" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the basic Material Sample have been updated and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Verbose Storage Unit Updated" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit/${verbose_storage-unit_uuid}?include=storageUnitType,parentStorageUnit</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Updated Verbose Storage Unit - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.group == &quot;${user_group}&quot;
assert attr.name == &quot;${name_4}&quot;
assert attr.barcode == &quot;${barcode_4}&quot;

def rel = object.data.relationships

assert rel.storageUnitType.data.id == &quot;${basic_storage_unit_type_uuid}&quot;
assert rel.parentStorageUnit.data == null
</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Storage Unit w/ Empty Body" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose Storage Unit record w/ an empty body request</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Verbose Storage Unit w/ Empty Body" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;attributes&quot;: {}&#xd;
  }&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit/${verbose_storage-unit_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Validate Verbose Storage Unit" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="-1100509060">Storage Unit End2End Thread Group</stringProp>
                <stringProp name="-1754979095">Update</stringProp>
                <stringProp name="-1291242937">Verbose Storage Unit</stringProp>
                <stringProp name="658105073">Validate Verbose Storage Unit</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Storage Unit w/ Invalid UUID" enabled="true">
            <stringProp name="TestPlan.comments">Updates a Storage Unit at a UUID that does not correspond to any Storage Unit - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Storage Unit w/ Invalid UUID" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_3}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;barcode&quot;: &quot;${barcode_3}&quot;&#xd;
    },&#xd;
    &quot;relationships&quot;: {&#xd;
      &quot;storageUnitType&quot;: {&#xd;
        &quot;data&quot;: {&#xd;
          &quot;type&quot;: &quot;storage-unit-type&quot;,&#xd;
          &quot;id&quot;: &quot;${basic_storage_unit_type_uuid}&quot;&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Storage Unit" enabled="true">
            <stringProp name="TestPlan.comments">Removes the verbose Storage Unit record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Verbose Storage Unit" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit/${verbose_storage-unit_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Verbose Storage Unit" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the verbose Material Sample has been removed</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Verbose Storage Unit Removed" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit/${verbose_storage-unit_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 410 Error" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;410&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Storage Unit" enabled="true">
            <stringProp name="TestPlan.comments">Removes the basic Storage Unit record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Basic Storage Unit" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit/${basic_storage-unit_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Basic Storage Unit" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the basic Storage Unit has been removed</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Basic Storage Unit Removed" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit/${basic_storage-unit_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 410 Error" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;410&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Storage Unit w/ Invalid UUID" enabled="true">
            <stringProp name="TestPlan.comments">Removes a Storage Unit record at a UUID that does not correspond to any Storage Unit - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Storage Unit w/ Invalid UUID" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Storage Unit tearDown" enabled="true">
            <stringProp name="TestPlan.comments">Removes entities created in the &quot;Create &gt; Storage Unit setUp&quot; controller</stringProp>
          </GenericController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Delete Storage Unit Type" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="-1347631884">Storage Unit Type End2End Thread Group</stringProp>
                <stringProp name="2043376075">Delete</stringProp>
                <stringProp name="-569633473">Basic Storage Unit Type</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Material Sample End2End Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Material Sample Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="dwcCatalogNumber_1" elementType="Argument">
              <stringProp name="Argument.name">dwcCatalogNumber_1</stringProp>
              <stringProp name="Argument.value">dwcCatalogNumber_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcCatalogNumber_2" elementType="Argument">
              <stringProp name="Argument.name">dwcCatalogNumber_2</stringProp>
              <stringProp name="Argument.value">dwcCatalogNumber_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcCatalogNumber_3" elementType="Argument">
              <stringProp name="Argument.name">dwcCatalogNumber_3</stringProp>
              <stringProp name="Argument.value">dwcCatalogNumber_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcCatalogNumber_4" elementType="Argument">
              <stringProp name="Argument.name">dwcCatalogNumber_4</stringProp>
              <stringProp name="Argument.value">dwcCatalogNumber_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="materialSampleName_1" elementType="Argument">
              <stringProp name="Argument.name">materialSampleName_1</stringProp>
              <stringProp name="Argument.value">matSampleName_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="materialSampleName_2" elementType="Argument">
              <stringProp name="Argument.name">materialSampleName_2</stringProp>
              <stringProp name="Argument.value">matSampleName_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="materialSampleName_3" elementType="Argument">
              <stringProp name="Argument.name">materialSampleName_3</stringProp>
              <stringProp name="Argument.value">matSampleName_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="materialSampleName_4" elementType="Argument">
              <stringProp name="Argument.name">materialSampleName_4</stringProp>
              <stringProp name="Argument.value">matSampleName_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="materialSampleType_1" elementType="Argument">
              <stringProp name="Argument.name">materialSampleType_1</stringProp>
              <stringProp name="Argument.value">WHOLE_ORGANISM</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="materialSampleType_2" elementType="Argument">
              <stringProp name="Argument.name">materialSampleType_2</stringProp>
              <stringProp name="Argument.value">MOLECULAR_SAMPLE</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="materialSampleType_3" elementType="Argument">
              <stringProp name="Argument.name">materialSampleType_3</stringProp>
              <stringProp name="Argument.value">ORGANISM_PART</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="materialSampleType_4" elementType="Argument">
              <stringProp name="Argument.name">materialSampleType_4</stringProp>
              <stringProp name="Argument.value">MIXED_ORGANISMS</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="barcode_1" elementType="Argument">
              <stringProp name="Argument.name">barcode_1</stringProp>
              <stringProp name="Argument.value">barcode_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="barcode_2" elementType="Argument">
              <stringProp name="Argument.name">barcode_2</stringProp>
              <stringProp name="Argument.value">barcode_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="barcode_3" elementType="Argument">
              <stringProp name="Argument.name">barcode_3</stringProp>
              <stringProp name="Argument.value">barcode_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="barcode_4" elementType="Argument">
              <stringProp name="Argument.name">barcode_4</stringProp>
              <stringProp name="Argument.value">barcode_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcOtherCatalogNumbers_1" elementType="Argument">
              <stringProp name="Argument.name">dwcOtherCatalogNumbers_1</stringProp>
              <stringProp name="Argument.value">[&quot;dwcOtherCatalogNumbers_1&quot;]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcOtherCatalogNumbers_2" elementType="Argument">
              <stringProp name="Argument.name">dwcOtherCatalogNumbers_2</stringProp>
              <stringProp name="Argument.value">[&quot;dwcOtherCatalogNumbers_2&quot;]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcOtherCatalogNumbers_3" elementType="Argument">
              <stringProp name="Argument.name">dwcOtherCatalogNumbers_3</stringProp>
              <stringProp name="Argument.value">[&quot;dwcOtherCatalogNumbers_3&quot;]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcOtherCatalogNumbers_4" elementType="Argument">
              <stringProp name="Argument.name">dwcOtherCatalogNumbers_4</stringProp>
              <stringProp name="Argument.value">[&quot;dwcOtherCatalogNumbers_4&quot;]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="preservationType_1" elementType="Argument">
              <stringProp name="Argument.name">preservationType_1</stringProp>
              <stringProp name="Argument.value">preservationType_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="preservationType_2" elementType="Argument">
              <stringProp name="Argument.name">preservationType_2</stringProp>
              <stringProp name="Argument.value">preservationType_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="preservationType_3" elementType="Argument">
              <stringProp name="Argument.name">preservationType_3</stringProp>
              <stringProp name="Argument.value">preservationType_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="preservationType_4" elementType="Argument">
              <stringProp name="Argument.name">preservationType_4</stringProp>
              <stringProp name="Argument.value">preservationType_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="preparationFixative_1" elementType="Argument">
              <stringProp name="Argument.name">preparationFixative_1</stringProp>
              <stringProp name="Argument.value">preservationFixative_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="preparationFixative_2" elementType="Argument">
              <stringProp name="Argument.name">preparationFixative_2</stringProp>
              <stringProp name="Argument.value">preservationFixative_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="preparationFixative_3" elementType="Argument">
              <stringProp name="Argument.name">preparationFixative_3</stringProp>
              <stringProp name="Argument.value">preservationFixative_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="preparationFixative_4" elementType="Argument">
              <stringProp name="Argument.name">preparationFixative_4</stringProp>
              <stringProp name="Argument.value">preservationFixative_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="preparationMaterials_1" elementType="Argument">
              <stringProp name="Argument.name">preparationMaterials_1</stringProp>
              <stringProp name="Argument.value">preparationMaterials_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="preparationMaterials_2" elementType="Argument">
              <stringProp name="Argument.name">preparationMaterials_2</stringProp>
              <stringProp name="Argument.value">preparationMaterials_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="preparationMaterials_3" elementType="Argument">
              <stringProp name="Argument.name">preparationMaterials_3</stringProp>
              <stringProp name="Argument.value">preparationMaterials_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="preparationMaterials_4" elementType="Argument">
              <stringProp name="Argument.name">preparationMaterials_4</stringProp>
              <stringProp name="Argument.value">preparationMaterials_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="preparationSubstrate_1" elementType="Argument">
              <stringProp name="Argument.name">preparationSubstrate_1</stringProp>
              <stringProp name="Argument.value">preparationSubstrate_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="preparationSubstrate_2" elementType="Argument">
              <stringProp name="Argument.name">preparationSubstrate_2</stringProp>
              <stringProp name="Argument.value">preparationSubstrate_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="preparationSubstrate_3" elementType="Argument">
              <stringProp name="Argument.name">preparationSubstrate_3</stringProp>
              <stringProp name="Argument.value">preparationSubstrate_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="preparationSubstrate_4" elementType="Argument">
              <stringProp name="Argument.name">preparationSubstrate_4</stringProp>
              <stringProp name="Argument.value">preparationSubstrate_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="preparationDate_1" elementType="Argument">
              <stringProp name="Argument.name">preparationDate_1</stringProp>
              <stringProp name="Argument.value">2013-02-01</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="preparationDate_2" elementType="Argument">
              <stringProp name="Argument.name">preparationDate_2</stringProp>
              <stringProp name="Argument.value">2015-03-11</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="preparationDate_3" elementType="Argument">
              <stringProp name="Argument.name">preparationDate_3</stringProp>
              <stringProp name="Argument.value">2014-11-11</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="preparationDate_4" elementType="Argument">
              <stringProp name="Argument.name">preparationDate_4</stringProp>
              <stringProp name="Argument.value">2012-12-12</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="preparationRemarks_1" elementType="Argument">
              <stringProp name="Argument.name">preparationRemarks_1</stringProp>
              <stringProp name="Argument.value">preparationRemarks_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="preparationRemarks_2" elementType="Argument">
              <stringProp name="Argument.name">preparationRemarks_2</stringProp>
              <stringProp name="Argument.value">preparationRemarks_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="preparationRemarks_3" elementType="Argument">
              <stringProp name="Argument.name">preparationRemarks_3</stringProp>
              <stringProp name="Argument.value">preparationRemarks_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="preparationRemarks_4" elementType="Argument">
              <stringProp name="Argument.name">preparationRemarks_4</stringProp>
              <stringProp name="Argument.value">preparationRemarks_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcDegreeOfEstablishment_1" elementType="Argument">
              <stringProp name="Argument.name">dwcDegreeOfEstablishment_1</stringProp>
              <stringProp name="Argument.value">dwcDegreeOfEstablishment_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcDegreeOfEstablishment_2" elementType="Argument">
              <stringProp name="Argument.name">dwcDegreeOfEstablishment_2</stringProp>
              <stringProp name="Argument.value">dwcDegreeOfEstablishment_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcDegreeOfEstablishment_3" elementType="Argument">
              <stringProp name="Argument.name">dwcDegreeOfEstablishment_3</stringProp>
              <stringProp name="Argument.value">dwcDegreeOfEstablishment_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dwcDegreeOfEstablishment_4" elementType="Argument">
              <stringProp name="Argument.name">dwcDegreeOfEstablishment_4</stringProp>
              <stringProp name="Argument.value">dwcDegreeOfEstablishment_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="stateChangedOn_1" elementType="Argument">
              <stringProp name="Argument.name">stateChangedOn_1</stringProp>
              <stringProp name="Argument.value">2009-09-09</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="stateChangedOn_2" elementType="Argument">
              <stringProp name="Argument.name">stateChangedOn_2</stringProp>
              <stringProp name="Argument.value">2010-10-10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="stateChangedOn_3" elementType="Argument">
              <stringProp name="Argument.name">stateChangedOn_3</stringProp>
              <stringProp name="Argument.value">2012-12-12</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="stateChangedOn_4" elementType="Argument">
              <stringProp name="Argument.name">stateChangedOn_4</stringProp>
              <stringProp name="Argument.value">2011-11-11</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="stateChangeRemarks_1" elementType="Argument">
              <stringProp name="Argument.name">stateChangeRemarks_1</stringProp>
              <stringProp name="Argument.value">stateChangeRemarks_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="stateChangeRemarks_2" elementType="Argument">
              <stringProp name="Argument.name">stateChangeRemarks_2</stringProp>
              <stringProp name="Argument.value">stateChangeRemarks_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="stateChangeRemarks_3" elementType="Argument">
              <stringProp name="Argument.name">stateChangeRemarks_3</stringProp>
              <stringProp name="Argument.value">stateChangeRemarks_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="stateChangeRemarks_4" elementType="Argument">
              <stringProp name="Argument.name">stateChangeRemarks_4</stringProp>
              <stringProp name="Argument.value">stateChangeRemarks_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="materialSampleRemarks_1" elementType="Argument">
              <stringProp name="Argument.name">materialSampleRemarks_1</stringProp>
              <stringProp name="Argument.value">materialSampleRemarks_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="materialSampleRemarks_2" elementType="Argument">
              <stringProp name="Argument.name">materialSampleRemarks_2</stringProp>
              <stringProp name="Argument.value">materialSampleRemarks_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="materialSampleRemarks_3" elementType="Argument">
              <stringProp name="Argument.name">materialSampleRemarks_3</stringProp>
              <stringProp name="Argument.value">materialSampleRemarks_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="materialSampleRemarks_4" elementType="Argument">
              <stringProp name="Argument.name">materialSampleRemarks_4</stringProp>
              <stringProp name="Argument.value">materialSampleRemarks_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="restrictionRemarks_1" elementType="Argument">
              <stringProp name="Argument.name">restrictionRemarks_1</stringProp>
              <stringProp name="Argument.value">restrictionRemarks_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="restrictionRemarks_2" elementType="Argument">
              <stringProp name="Argument.name">restrictionRemarks_2</stringProp>
              <stringProp name="Argument.value">restrictionRemarks_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="restrictionRemarks_3" elementType="Argument">
              <stringProp name="Argument.name">restrictionRemarks_3</stringProp>
              <stringProp name="Argument.value">restrictionRemarks_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="restrictionRemarks_4" elementType="Argument">
              <stringProp name="Argument.name">restrictionRemarks_4</stringProp>
              <stringProp name="Argument.value">restrictionRemarks_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="isRestricted_1" elementType="Argument">
              <stringProp name="Argument.name">isRestricted_1</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="isRestricted_2" elementType="Argument">
              <stringProp name="Argument.name">isRestricted_2</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="isRestricted_3" elementType="Argument">
              <stringProp name="Argument.name">isRestricted_3</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="isRestricted_4" elementType="Argument">
              <stringProp name="Argument.name">isRestricted_4</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="publiclyReleasable_1" elementType="Argument">
              <stringProp name="Argument.name">publiclyReleasable_1</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="publiclyReleasable_2" elementType="Argument">
              <stringProp name="Argument.name">publiclyReleasable_2</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="publiclyReleasable_3" elementType="Argument">
              <stringProp name="Argument.name">publiclyReleasable_3</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="publiclyReleasable_4" elementType="Argument">
              <stringProp name="Argument.name">publiclyReleasable_4</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="notPubliclyReleasableReason_1" elementType="Argument">
              <stringProp name="Argument.name">notPubliclyReleasableReason_1</stringProp>
              <stringProp name="Argument.value">notPublicReason_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="notPubliclyReleasableReason_2" elementType="Argument">
              <stringProp name="Argument.name">notPubliclyReleasableReason_2</stringProp>
              <stringProp name="Argument.value">notPublicReason_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="notPubliclyReleasableReason_3" elementType="Argument">
              <stringProp name="Argument.name">notPubliclyReleasableReason_3</stringProp>
              <stringProp name="Argument.value">notPublicReason_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="notPubliclyReleasableReason_4" elementType="Argument">
              <stringProp name="Argument.name">notPubliclyReleasableReason_4</stringProp>
              <stringProp name="Argument.value">notPublicReason_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="allowDuplicateName_1" elementType="Argument">
              <stringProp name="Argument.name">allowDuplicateName_1</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="allowDuplicateName_2" elementType="Argument">
              <stringProp name="Argument.name">allowDuplicateName_2</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="allowDuplicateName_3" elementType="Argument">
              <stringProp name="Argument.name">allowDuplicateName_3</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="allowDuplicateName_4" elementType="Argument">
              <stringProp name="Argument.name">allowDuplicateName_4</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Thread Group Request Headers" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__P(access_token)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/vnd.api+json</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">Required headers to perform API requests</stringProp>
        </HeaderManager>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Token Controller" enabled="true">
          <stringProp name="TestPlan.comments">Runs the Token Controller in the setUp thread group to refresh the access token</stringProp>
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
            <stringProp name="1506430348">setUp Thread Group</stringProp>
            <stringProp name="52452451">Token Controller</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Material Sample setUp" enabled="true">
            <stringProp name="TestPlan.comments">Sets random variables and creates relationship entities required for Material Sample testing</stringProp>
          </GenericController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Set Random Variables" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">def ctx = org.apache.jmeter.threads.JMeterContextService.getContext()

ctx.getVariables().put(&quot;name_1&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_2&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_3&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_4&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)

ctx.getVariables().put(&quot;determination_scientificName_1&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;determination_verbatimScientificName_1&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)

ctx.getVariables().put(&quot;material-sample_managed-attribute_name&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Create Managed Attribute" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="-219911028">Collection Managed Attribute End2End Thread Group</stringProp>
                <stringProp name="2026540316">Create</stringProp>
                <stringProp name="151918039">MATERIAL_SAMPLE Collection Managed Attribute</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Create Perparation Type" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="-256151134">Preparation Type End2End Thread Group</stringProp>
                <stringProp name="2026540316">Create</stringProp>
                <stringProp name="764760373">Basic Preparation Type</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Create Preparation Method" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="-224228197">Preparation Method End2End Thread Group</stringProp>
                <stringProp name="2026540316">Create</stringProp>
                <stringProp name="276561948">Basic Preparation Method</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Create Organism" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="1860862835">Organism End2End Thread Group</stringProp>
                <stringProp name="2026540316">Create</stringProp>
                <stringProp name="1957925060">Basic Organism</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Create Assemblage" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="1661393241">Assemblage End2End Thread Group</stringProp>
                <stringProp name="2026540316">Create</stringProp>
                <stringProp name="-27333986">Basic Assemblage</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Create Project" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="1302683596">Project End2End Thread Group</stringProp>
                <stringProp name="2026540316">Create</stringProp>
                <stringProp name="542668007">Basic Project</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Create Protocol" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="1925115245">Protocol End2End Thread Group</stringProp>
                <stringProp name="2026540316">Create</stringProp>
                <stringProp name="-347627894">Basic Protocol</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Create Collecting Event" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="868735347">Collecting Event End2End Thread Group</stringProp>
                <stringProp name="2026540316">Create</stringProp>
                <stringProp name="599034052">Basic Collecting Event</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Create Collection" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="1137554727">Collection End2End Thread Group</stringProp>
                <stringProp name="2026540316">Create</stringProp>
                <stringProp name="594446864">Basic Collection</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Create Storage Unit" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="-1100509060">Storage Unit End2End Thread Group</stringProp>
                <stringProp name="2026540316">Create</stringProp>
                <stringProp name="-764930277">Basic Storage Unit</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Material Sample" enabled="true">
            <stringProp name="TestPlan.comments">Creates a basic Material Sample record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Basic Material Sample" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;material-sample&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/material-sample</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Basic Material Sample UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">basic_material-sample_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Basic Material Sample" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the basic Material Sample have been created and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Basic Material Sample Creation" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/material-sample/${basic_material-sample_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Created Basic Material Sample - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Material Sample" enabled="true">
            <stringProp name="TestPlan.comments">Creates a verbose Material Sample record with all fields populated</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Verbose Material Sample" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;material-sample&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;dwcCatalogNumber&quot;: &quot;${dwcCatalogNumber_2}&quot;,&#xd;
      &quot;materialSampleName&quot;: &quot;${materialSampleName_2}&quot;,&#xd;
      &quot;materialSampleType&quot;: &quot;${materialSampleType_2}&quot;,&#xd;
      &quot;barcode&quot;: &quot;${barcode_2}&quot;,&#xd;
      &quot;dwcOtherCatalogNumbers&quot;: ${dwcOtherCatalogNumbers_2},&#xd;
      &quot;preservationType&quot;: &quot;${preservationType_2}&quot;,&#xd;
      &quot;preparationFixative&quot;: &quot;${preparationFixative_2}&quot;,&#xd;
      &quot;preparationMaterials&quot;: &quot;${preparationMaterials_2}&quot;,&#xd;
      &quot;preparationSubstrate&quot;: &quot;${preparationSubstrate_2}&quot;,&#xd;
      &quot;preparationDate&quot;: &quot;${preparationDate_2}&quot;,&#xd;
      &quot;preparationRemarks&quot;: &quot;${preparationRemarks_2}&quot;,&#xd;
      &quot;dwcDegreeOfEstablishment&quot;: &quot;${dwcDegreeOfEstablishment_2}&quot;,&#xd;
      &quot;stateChangedOn&quot;: &quot;${stateChangedOn_2}&quot;,&#xd;
      &quot;stateChangeRemarks&quot;: &quot;${stateChangeRemarks_2}&quot;,&#xd;
      &quot;materialSampleRemarks&quot;: &quot;${materialSampleRemarks_2}&quot;,&#xd;
      &quot;restrictionRemarks&quot;: &quot;${restrictionRemarks_2}&quot;,&#xd;
      &quot;isRestricted&quot;: &quot;${isRestricted_2}&quot;,&#xd;
      &quot;publiclyReleasable&quot;: ${publiclyReleasable_2},&#xd;
      &quot;notPubliclyReleasableReason&quot;: &quot;${notPubliclyReleasableReason_2}&quot;,&#xd;
      &quot;allowDuplicateName&quot;: ${allowDuplicateName_2},&#xd;
      &quot;managedAttributes&quot;: {&#xd;
        &quot;${material-sample_managed-attribute_name}&quot;: &quot;managed_attribute_1&quot;&#xd;
      }&#xd;
    },&#xd;
    &quot;relationships&quot;: {&#xd;
      &quot;collectingEvent&quot;: {&#xd;
        &quot;data&quot;: {&#xd;
          &quot;type&quot;: &quot;collecting-event&quot;,&#xd;
          &quot;id&quot;: &quot;${basic_collecting-event_uuid}&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;collection&quot;: {&#xd;
        &quot;data&quot;: {&#xd;
          &quot;type&quot;: &quot;collection&quot;,&#xd;
          &quot;id&quot;: &quot;${basic_collection_uuid}&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;preparationType&quot;: {&#xd;
        &quot;data&quot;: {&#xd;
          &quot;type&quot;: &quot;preparation-type&quot;,&#xd;
          &quot;id&quot;: &quot;${basic_preparation-type_uuid}&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;preparationMethod&quot;: {&#xd;
        &quot;data&quot;: {&#xd;
          &quot;type&quot;: &quot;preparation-method&quot;,&#xd;
          &quot;id&quot;: &quot;${basic_preparation-method_uuid}&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;preparedBy&quot;: {&#xd;
        &quot;data&quot;: [{&#xd;
          &quot;type&quot;: &quot;person&quot;,&#xd;
          &quot;id&quot;: &quot;${__P(person_uuid_1)}&quot;&#xd;
        }]&#xd;
      },&#xd;
      &quot;attachment&quot;: {&#xd;
        &quot;data&quot;: [{&#xd;
          &quot;type&quot;: &quot;metadata&quot;,&#xd;
          &quot;id&quot;: &quot;${__P(attachment_uuid_1)}&quot;&#xd;
        }]&#xd;
      },&#xd;
      &quot;preparationProtocol&quot;: {&#xd;
        &quot;data&quot;: {&#xd;
          &quot;type&quot;: &quot;protocol&quot;,&#xd;
          &quot;id&quot;: &quot;${basic_protocol_uuid}&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;projects&quot;: {&#xd;
        &quot;data&quot;: [{&#xd;
          &quot;type&quot;: &quot;project&quot;,&#xd;
          &quot;id&quot;: &quot;${basic_project_uuid}&quot;&#xd;
        }]&#xd;
      },&#xd;
      &quot;assemblages&quot;: {&#xd;
        &quot;data&quot;: [{&#xd;
          &quot;type&quot;: &quot;assemblage&quot;,&#xd;
          &quot;id&quot;: &quot;${basic_assemblage_uuid}&quot;&#xd;
        }]&#xd;
      },&#xd;
      &quot;organism&quot;: {&#xd;
        &quot;data&quot;: [{&#xd;
          &quot;type&quot;: &quot;organism&quot;,&#xd;
          &quot;id&quot;: &quot;${basic_organism_uuid}&quot;&#xd;
        }]&#xd;
      },&#xd;
      &quot;storageUnit&quot;: {&#xd;
        &quot;data&quot;: {&#xd;
          &quot;type&quot;: &quot;storage-unit&quot;,&#xd;
          &quot;id&quot;: &quot;${basic_storage-unit_uuid}&quot;&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;material-sample&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;dwcCatalogNumber&quot;: &quot;${dwcCatalogNumber_2}&quot;,&#xd;
      &quot;materialSampleName&quot;: &quot;${materialSampleName_2}&quot;,&#xd;
      &quot;materialSampleType&quot;: &quot;${materialSampleType_2}&quot;,&#xd;
      &quot;barcode&quot;: &quot;${barcode_2}&quot;,&#xd;
      &quot;dwcOtherCatalogNumbers&quot;: ${dwcOtherCatalogNumbers_2},&#xd;
      &quot;preservationType&quot;: &quot;${preservationType_2}&quot;,&#xd;
      &quot;preparationFixative&quot;: &quot;${preparationFixative_2}&quot;,&#xd;
      &quot;preparationMaterials&quot;: &quot;${preparationMaterials_2}&quot;,&#xd;
      &quot;preparationSubstrate&quot;: &quot;${preparationSubstrate_2}&quot;,&#xd;
      &quot;preparationDate&quot;: &quot;${preparationDate_2}&quot;,&#xd;
      &quot;preparationRemarks&quot;: &quot;${preparationRemarks_2}&quot;,&#xd;
      &quot;dwcDegreeOfEstablishment&quot;: &quot;${dwcDegreeOfEstablishment_2}&quot;,&#xd;
      &quot;stateChangedOn&quot;: &quot;${stateChangedOn_2}&quot;,&#xd;
      &quot;stateChangeRemarks&quot;: &quot;${stateChangeRemarks_2}&quot;,&#xd;
      &quot;materialSampleRemarks&quot;: &quot;${materialSampleRemarks_2}&quot;,&#xd;
      &quot;restrictionRemarks&quot;: &quot;${restrictionRemarks_2}&quot;,&#xd;
      &quot;isRestricted&quot;: &quot;${isRestricted_2}&quot;,&#xd;
      &quot;publiclyReleasable&quot;: ${publiclyReleasable_2},&#xd;
      &quot;notPubliclyReleasableReason&quot;: &quot;${notPubliclyReleasableReason_2}&quot;,&#xd;
      &quot;allowDuplicateName&quot;: ${allowDuplicateName_2},&#xd;
      &quot;managedAttributes&quot;: {&#xd;
        &quot;${material-sample_managed-attribute_name}&quot;: &quot;managed_attribute_1&quot;&#xd;
      }&#xd;
    },&#xd;
    &quot;relationships&quot;: {&#xd;
      &quot;collectingEvent&quot;: {&#xd;
        &quot;data&quot;: {&#xd;
          &quot;type&quot;: &quot;collecting-event&quot;,&#xd;
          &quot;id&quot;: &quot;${basic_collecting-event_uuid}&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;collection&quot;: {&#xd;
        &quot;data&quot;: {&#xd;
          &quot;type&quot;: &quot;collection&quot;,&#xd;
          &quot;id&quot;: &quot;${basic_collection_uuid}&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;preparationType&quot;: {&#xd;
        &quot;data&quot;: {&#xd;
          &quot;type&quot;: &quot;preparation-type&quot;,&#xd;
          &quot;id&quot;: &quot;${basic_preparation-type_uuid}&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;preparationMethod&quot;: {&#xd;
        &quot;data&quot;: {&#xd;
          &quot;type&quot;: &quot;preparation-method&quot;,&#xd;
          &quot;id&quot;: &quot;${basic_preparation-method_uuid}&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;preparedBy&quot;: {&#xd;
        &quot;data&quot;: [{&#xd;
          &quot;type&quot;: &quot;person&quot;,&#xd;
          &quot;id&quot;: &quot;${__P(person_uuid_1)}&quot;&#xd;
        }]&#xd;
      },&#xd;
      &quot;attachment&quot;: {&#xd;
        &quot;data&quot;: [{&#xd;
          &quot;type&quot;: &quot;metadata&quot;,&#xd;
          &quot;id&quot;: &quot;${__P(attachment_uuid_1)}&quot;&#xd;
        }]&#xd;
      },&#xd;
      &quot;preparationProtocol&quot;: {&#xd;
        &quot;data&quot;: {&#xd;
          &quot;type&quot;: &quot;protocol&quot;,&#xd;
          &quot;id&quot;: &quot;${basic_protocol_uuid}&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;projects&quot;: {&#xd;
        &quot;data&quot;: [{&#xd;
          &quot;type&quot;: &quot;project&quot;,&#xd;
          &quot;id&quot;: &quot;${basic_project_uuid}&quot;&#xd;
        }]&#xd;
      },&#xd;
      &quot;assemblages&quot;: {&#xd;
        &quot;data&quot;: [{&#xd;
          &quot;type&quot;: &quot;assemblage&quot;,&#xd;
          &quot;id&quot;: &quot;${basic_assemblage_uuid}&quot;&#xd;
        }]&#xd;
      },&#xd;
      &quot;organism&quot;: {&#xd;
        &quot;data&quot;: [{&#xd;
          &quot;type&quot;: &quot;organism&quot;,&#xd;
          &quot;id&quot;: &quot;${basic_organism_uuid}&quot;&#xd;
        }]&#xd;
      },&#xd;
      &quot;storageUnit&quot;: {&#xd;
        &quot;data&quot;: {&#xd;
          &quot;type&quot;: &quot;storage-unit&quot;,&#xd;
          &quot;id&quot;: &quot;${basic_storage-unit_uuid}&quot;&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/material-sample</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Verbose Material Sample UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">verbose_material-sample_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Verbose Material Sample" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the verbose Material Sample have been created and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Verbose Material Sample Creation" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/material-sample/${verbose_material-sample_uuid}?include=collectingEvent,collection,preparationType,preparationMethod,preparedBy,attachment,preparationProtocol,projects,assemblages,organism,storageUnit</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Created Verbose Material Sample - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.group == &quot;${user_group}&quot;
assert attr.dwcCatalogNumber == &quot;${dwcCatalogNumber_2}&quot;
assert attr.materialSampleName == &quot;${materialSampleName_2}&quot;
assert attr.materialSampleType == &quot;${materialSampleType_2}&quot;
assert attr.barcode == &quot;${barcode_2}&quot;
assert attr.dwcOtherCatalogNumbers == ${dwcOtherCatalogNumbers_2}
assert attr.preservationType == &quot;${preservationType_2}&quot;
assert attr.preparationFixative == &quot;${preparationFixative_2}&quot;
assert attr.preparationMaterials == &quot;${preparationMaterials_2}&quot;
assert attr.preparationSubstrate == &quot;${preparationSubstrate_2}&quot;
assert attr.preparationDate == &quot;${preparationDate_2}&quot;
assert attr.preparationRemarks == &quot;${preparationRemarks_2}&quot;
assert attr.dwcDegreeOfEstablishment == &quot;${dwcDegreeOfEstablishment_2}&quot;
assert attr.stateChangedOn == &quot;${stateChangedOn_2}&quot;
assert attr.stateChangeRemarks == &quot;${stateChangeRemarks_2}&quot;
assert attr.materialSampleRemarks == &quot;${materialSampleRemarks_2}&quot;
assert attr.restrictionRemarks == &quot;${restrictionRemarks_2}&quot;
assert attr.isRestricted == ${isRestricted_2}
assert attr.publiclyReleasable == ${publiclyReleasable_2}
assert attr.notPubliclyReleasableReason == &quot;${notPubliclyReleasableReason_2}&quot;
assert attr.allowDuplicateName == ${allowDuplicateName_2}

def rel = object.data.relationships

assert rel.collectingEvent.data.id == &quot;${basic_collecting-event_uuid}&quot;
assert rel.collection.data.id == &quot;${basic_collection_uuid}&quot;
assert rel.preparationType.data.id == &quot;${basic_preparation-type_uuid}&quot;
assert rel.preparationMethod.data.id == &quot;${basic_preparation-method_uuid}&quot;
assert rel.preparedBy.data[0].id == &quot;${__P(person_uuid_1)}&quot;
assert rel.attachment.data[0].id == &quot;${__P(attachment_uuid_1)}&quot;
assert rel.preparationProtocol.data.id == &quot;${basic_protocol_uuid}&quot;
assert rel.projects.data[0].id == &quot;${basic_project_uuid}&quot;
assert rel.assemblages.data[0].id == &quot;${basic_assemblage_uuid}&quot;
assert rel.organism.data[0].id == &quot;${basic_organism_uuid}&quot;
assert rel.storageUnit.data.id == &quot;${basic_storage-unit_uuid}&quot;
</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Empty Attribute Material Sample" enabled="true">
            <stringProp name="TestPlan.comments">Creates a Material Sample without any attributes specified - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Material Sample w/ Empty Attributes" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;material-sample&quot;,&#xd;
    &quot;attributes&quot;: {}&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/material-sample</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 403 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;403&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Incorrect Type Material Sample" enabled="true">
            <stringProp name="TestPlan.comments">Creates a Material Sample w/ the incorrect type specified in the body - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Material Sample w/ Incorrect Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;collecting-event&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/material-sample</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 400 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;400&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Material Sample" enabled="true">
            <stringProp name="TestPlan.comments">Updates the basic Material Sample record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Basic Material Sample" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;material-sample&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;dwcCatalogNumber&quot;: &quot;${dwcCatalogNumber_3}&quot;,&#xd;
      &quot;materialSampleName&quot;: &quot;${materialSampleName_3}&quot;,&#xd;
      &quot;materialSampleType&quot;: &quot;${materialSampleType_3}&quot;,&#xd;
      &quot;barcode&quot;: &quot;${barcode_3}&quot;,&#xd;
      &quot;dwcOtherCatalogNumbers&quot;: ${dwcOtherCatalogNumbers_3},&#xd;
      &quot;preservationType&quot;: &quot;${preservationType_3}&quot;,&#xd;
      &quot;preparationFixative&quot;: &quot;${preparationFixative_3}&quot;,&#xd;
      &quot;preparationMaterials&quot;: &quot;${preparationMaterials_3}&quot;,&#xd;
      &quot;preparationSubstrate&quot;: &quot;${preparationSubstrate_3}&quot;,&#xd;
      &quot;preparationDate&quot;: &quot;${preparationDate_3}&quot;,&#xd;
      &quot;preparationRemarks&quot;: &quot;${preparationRemarks_3}&quot;,&#xd;
      &quot;dwcDegreeOfEstablishment&quot;: &quot;${dwcDegreeOfEstablishment_3}&quot;,&#xd;
      &quot;stateChangedOn&quot;: &quot;${stateChangedOn_3}&quot;,&#xd;
      &quot;stateChangeRemarks&quot;: &quot;${stateChangeRemarks_3}&quot;,&#xd;
      &quot;materialSampleRemarks&quot;: &quot;${materialSampleRemarks_3}&quot;,&#xd;
      &quot;restrictionRemarks&quot;: &quot;${restrictionRemarks_3}&quot;,&#xd;
      &quot;isRestricted&quot;: &quot;${isRestricted_3}&quot;,&#xd;
      &quot;publiclyReleasable&quot;: ${publiclyReleasable_3},&#xd;
      &quot;notPubliclyReleasableReason&quot;: &quot;${notPubliclyReleasableReason_3}&quot;,&#xd;
      &quot;allowDuplicateName&quot;: ${allowDuplicateName_3}&#xd;
    },&#xd;
    &quot;relationships&quot;: {&#xd;
      &quot;collectingEvent&quot;: {&#xd;
        &quot;data&quot;: {&#xd;
          &quot;type&quot;: &quot;collecting-event&quot;,&#xd;
          &quot;id&quot;: &quot;${basic_collecting-event_uuid}&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;collection&quot;: {&#xd;
        &quot;data&quot;: {&#xd;
          &quot;type&quot;: &quot;collection&quot;,&#xd;
          &quot;id&quot;: &quot;${basic_collection_uuid}&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;preparationType&quot;: {&#xd;
        &quot;data&quot;: {&#xd;
          &quot;type&quot;: &quot;preparation-type&quot;,&#xd;
          &quot;id&quot;: &quot;${basic_preparation-type_uuid}&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;preparationMethod&quot;: {&#xd;
        &quot;data&quot;: {&#xd;
          &quot;type&quot;: &quot;preparation-method&quot;,&#xd;
          &quot;id&quot;: &quot;${basic_preparation-method_uuid}&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;preparedBy&quot;: {&#xd;
        &quot;data&quot;: [{&#xd;
          &quot;type&quot;: &quot;person&quot;,&#xd;
          &quot;id&quot;: &quot;${__P(person_uuid_1)}&quot;&#xd;
        }]&#xd;
      },&#xd;
      &quot;attachment&quot;: {&#xd;
        &quot;data&quot;: [{&#xd;
          &quot;type&quot;: &quot;metadata&quot;,&#xd;
          &quot;id&quot;: &quot;${__P(attachment_uuid_1)}&quot;&#xd;
        }]&#xd;
      },&#xd;
      &quot;preparationProtocol&quot;: {&#xd;
        &quot;data&quot;: {&#xd;
          &quot;type&quot;: &quot;protocol&quot;,&#xd;
          &quot;id&quot;: &quot;${basic_protocol_uuid}&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;projects&quot;: {&#xd;
        &quot;data&quot;: [{&#xd;
          &quot;type&quot;: &quot;project&quot;,&#xd;
          &quot;id&quot;: &quot;${basic_project_uuid}&quot;&#xd;
        }]&#xd;
      },&#xd;
      &quot;assemblages&quot;: {&#xd;
        &quot;data&quot;: [{&#xd;
          &quot;type&quot;: &quot;assemblage&quot;,&#xd;
          &quot;id&quot;: &quot;${basic_assemblage_uuid}&quot;&#xd;
        }]&#xd;
      },&#xd;
      &quot;organism&quot;: {&#xd;
        &quot;data&quot;: [{&#xd;
          &quot;type&quot;: &quot;organism&quot;,&#xd;
          &quot;id&quot;: &quot;${basic_organism_uuid}&quot;&#xd;
        }]&#xd;
      },&#xd;
      &quot;storageUnit&quot;: {&#xd;
        &quot;data&quot;: {&#xd;
          &quot;type&quot;: &quot;storage-unit&quot;,&#xd;
          &quot;id&quot;: &quot;${basic_storage-unit_uuid}&quot;&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/material-sample/${basic_material-sample_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Basic Material Sample" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the basic Material Sample have been updated and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Basic Material Sample Updated" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/material-sample/${basic_material-sample_uuid}?include=collectingEvent,collection,preparationType,preparationMethod,preparedBy,attachment,preparationProtocol,projects,assemblages,organism,storageUnit</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Update Basic Material Sample - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.group == &quot;${user_group}&quot;
assert attr.dwcCatalogNumber == &quot;${dwcCatalogNumber_3}&quot;
assert attr.materialSampleName == &quot;${materialSampleName_3}&quot;
assert attr.materialSampleType == &quot;${materialSampleType_3}&quot;
assert attr.barcode == &quot;${barcode_3}&quot;
assert attr.dwcOtherCatalogNumbers == ${dwcOtherCatalogNumbers_3}
assert attr.preservationType == &quot;${preservationType_3}&quot;
assert attr.preparationFixative == &quot;${preparationFixative_3}&quot;
assert attr.preparationMaterials == &quot;${preparationMaterials_3}&quot;
assert attr.preparationSubstrate == &quot;${preparationSubstrate_3}&quot;
assert attr.preparationDate == &quot;${preparationDate_3}&quot;
assert attr.preparationRemarks == &quot;${preparationRemarks_3}&quot;
assert attr.dwcDegreeOfEstablishment == &quot;${dwcDegreeOfEstablishment_3}&quot;
assert attr.stateChangedOn == &quot;${stateChangedOn_3}&quot;
assert attr.stateChangeRemarks == &quot;${stateChangeRemarks_3}&quot;
assert attr.materialSampleRemarks == &quot;${materialSampleRemarks_3}&quot;
assert attr.restrictionRemarks == &quot;${restrictionRemarks_3}&quot;
assert attr.isRestricted == ${isRestricted_3}
assert attr.publiclyReleasable == ${publiclyReleasable_3}
assert attr.notPubliclyReleasableReason == &quot;${notPubliclyReleasableReason_3}&quot;
assert attr.allowDuplicateName == ${allowDuplicateName_3}

def rel = object.data.relationships

assert rel.collectingEvent.data.id == &quot;${basic_collecting-event_uuid}&quot;
assert rel.collection.data.id == &quot;${basic_collection_uuid}&quot;
assert rel.preparationType.data.id == &quot;${basic_preparation-type_uuid}&quot;
assert rel.preparationMethod.data.id == &quot;${basic_preparation-method_uuid}&quot;
assert rel.preparedBy.data[0].id == &quot;${__P(person_uuid_1)}&quot;
assert rel.attachment.data[0].id == &quot;${__P(attachment_uuid_1)}&quot;
assert rel.preparationProtocol.data.id == &quot;${basic_protocol_uuid}&quot;
assert rel.projects.data[0].id == &quot;${basic_project_uuid}&quot;
assert rel.assemblages.data[0].id == &quot;${basic_assemblage_uuid}&quot;
assert rel.organism.data[0].id == &quot;${basic_organism_uuid}&quot;
assert rel.storageUnit.data.id == &quot;${basic_storage-unit_uuid}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Material Sample" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose Material Sample record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Verbose Material Sample" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;data&quot;: {&#xd;
		&quot;type&quot;: &quot;material-sample&quot;,&#xd;
		&quot;attributes&quot;: {&#xd;
			&quot;group&quot;: &quot;${user_group}&quot;,&#xd;
			&quot;dwcCatalogNumber&quot;: &quot;${dwcCatalogNumber_4}&quot;,&#xd;
			&quot;materialSampleName&quot;: &quot;${materialSampleName_4}&quot;,&#xd;
			&quot;materialSampleType&quot;: &quot;${materialSampleType_4}&quot;,&#xd;
			&quot;barcode&quot;: &quot;${barcode_4}&quot;,&#xd;
			&quot;dwcOtherCatalogNumbers&quot;: ${dwcOtherCatalogNumbers_4},&#xd;
			&quot;preservationType&quot;: &quot;${preservationType_4}&quot;,&#xd;
			&quot;preparationFixative&quot;: &quot;${preparationFixative_4}&quot;,&#xd;
			&quot;preparationMaterials&quot;: &quot;${preparationMaterials_4}&quot;,&#xd;
			&quot;preparationSubstrate&quot;: &quot;${preparationSubstrate_4}&quot;,&#xd;
			&quot;preparationDate&quot;: &quot;${preparationDate_4}&quot;,&#xd;
			&quot;preparationRemarks&quot;: &quot;${preparationRemarks_4}&quot;,&#xd;
			&quot;dwcDegreeOfEstablishment&quot;: &quot;${dwcDegreeOfEstablishment_4}&quot;,&#xd;
			&quot;stateChangedOn&quot;: &quot;${stateChangedOn_4}&quot;,&#xd;
			&quot;stateChangeRemarks&quot;: &quot;${stateChangeRemarks_4}&quot;,&#xd;
			&quot;materialSampleRemarks&quot;: &quot;${materialSampleRemarks_4}&quot;,&#xd;
			&quot;restrictionRemarks&quot;: &quot;${restrictionRemarks_4}&quot;,&#xd;
			&quot;isRestricted&quot;: &quot;${isRestricted_4}&quot;,&#xd;
			&quot;publiclyReleasable&quot;: ${publiclyReleasable_4},&#xd;
			&quot;notPubliclyReleasableReason&quot;: &quot;${notPubliclyReleasableReason_4}&quot;,&#xd;
			&quot;allowDuplicateName&quot;: ${allowDuplicateName_4}&#xd;
		},&#xd;
		&quot;relationships&quot;: {&#xd;
			&quot;collectingEvent&quot;: {&#xd;
				&quot;data&quot;: {&#xd;
					&quot;type&quot;: &quot;collecting-event&quot;,&#xd;
					&quot;id&quot;: &quot;${basic_collecting-event_uuid}&quot;&#xd;
				}&#xd;
			},&#xd;
			&quot;collection&quot;: {&#xd;
				&quot;data&quot;: {&#xd;
					&quot;type&quot;: &quot;collection&quot;,&#xd;
					&quot;id&quot;: &quot;${basic_collection_uuid}&quot;&#xd;
				}&#xd;
			},&#xd;
			&quot;preparationType&quot;: {&#xd;
				&quot;data&quot;: {&#xd;
					&quot;type&quot;: &quot;preparation-type&quot;,&#xd;
					&quot;id&quot;: &quot;${basic_preparation-type_uuid}&quot;&#xd;
				}&#xd;
			},&#xd;
			&quot;preparationMethod&quot;: {&#xd;
				&quot;data&quot;: {&#xd;
					&quot;type&quot;: &quot;preparation-method&quot;,&#xd;
					&quot;id&quot;: &quot;${basic_preparation-method_uuid}&quot;&#xd;
				}&#xd;
			},&#xd;
			&quot;preparedBy&quot;: {&#xd;
				&quot;data&quot;: [{&#xd;
					&quot;type&quot;: &quot;person&quot;,&#xd;
					&quot;id&quot;: &quot;${__P(person_uuid_1)}&quot;&#xd;
				}]&#xd;
			},&#xd;
			&quot;attachment&quot;: {&#xd;
				&quot;data&quot;: [{&#xd;
					&quot;type&quot;: &quot;metadata&quot;,&#xd;
					&quot;id&quot;: &quot;${__P(attachment_uuid_1)}&quot;&#xd;
				}]&#xd;
			},&#xd;
			&quot;preparationProtocol&quot;: {&#xd;
				&quot;data&quot;: {&#xd;
					&quot;type&quot;: &quot;protocol&quot;,&#xd;
					&quot;id&quot;: &quot;${basic_protocol_uuid}&quot;&#xd;
				}&#xd;
			},&#xd;
			&quot;projects&quot;: {&#xd;
				&quot;data&quot;: [{&#xd;
					&quot;type&quot;: &quot;project&quot;,&#xd;
					&quot;id&quot;: &quot;${basic_project_uuid}&quot;&#xd;
				}]&#xd;
			},&#xd;
			&quot;organism&quot;: {&#xd;
				&quot;data&quot;: [{&#xd;
					&quot;type&quot;: &quot;organism&quot;,&#xd;
					&quot;id&quot;: &quot;${basic_organism_uuid}&quot;&#xd;
				}]&#xd;
			},&#xd;
			&quot;assemblages&quot;: {&#xd;
				&quot;data&quot;: [{&#xd;
					&quot;type&quot;: &quot;assemblage&quot;,&#xd;
					&quot;id&quot;: &quot;${basic_assemblage_uuid}&quot;&#xd;
				}]&#xd;
			},&#xd;
			&quot;storageUnit&quot;: {&#xd;
				&quot;data&quot;: {&#xd;
					&quot;type&quot;: &quot;storage-unit&quot;,&#xd;
					&quot;id&quot;: &quot;${basic_storage-unit_uuid}&quot;&#xd;
				}&#xd;
			}&#xd;
		}&#xd;
	}&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/material-sample/${verbose_material-sample_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Verbose Material Sample" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the fields of the verbose Material Sample have been updated and stored correctly</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Verbose Material Sample Updated" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/material-sample/${verbose_material-sample_uuid}?include=collectingEvent,collection,preparationType,preparationMethod,preparedBy,attachment,preparationProtocol,projects,assemblages,organism,storageUnit</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Updated Verbose Material Sample - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.group == &quot;${user_group}&quot;
assert attr.dwcCatalogNumber == &quot;${dwcCatalogNumber_4}&quot;
assert attr.materialSampleName == &quot;${materialSampleName_4}&quot;
assert attr.materialSampleType == &quot;${materialSampleType_4}&quot;
assert attr.barcode == &quot;${barcode_4}&quot;
assert attr.dwcOtherCatalogNumbers == ${dwcOtherCatalogNumbers_4}
assert attr.preservationType == &quot;${preservationType_4}&quot;
assert attr.preparationFixative == &quot;${preparationFixative_4}&quot;
assert attr.preparationMaterials == &quot;${preparationMaterials_4}&quot;
assert attr.preparationSubstrate == &quot;${preparationSubstrate_4}&quot;
assert attr.preparationDate == &quot;${preparationDate_4}&quot;
assert attr.preparationRemarks == &quot;${preparationRemarks_4}&quot;
assert attr.dwcDegreeOfEstablishment == &quot;${dwcDegreeOfEstablishment_4}&quot;
assert attr.stateChangedOn == &quot;${stateChangedOn_4}&quot;
assert attr.stateChangeRemarks == &quot;${stateChangeRemarks_4}&quot;
assert attr.materialSampleRemarks == &quot;${materialSampleRemarks_4}&quot;
assert attr.restrictionRemarks == &quot;${restrictionRemarks_4}&quot;
assert attr.isRestricted == ${isRestricted_4}
assert attr.publiclyReleasable == ${publiclyReleasable_4}
assert attr.notPubliclyReleasableReason == &quot;${notPubliclyReleasableReason_4}&quot;
assert attr.allowDuplicateName == ${allowDuplicateName_4}

def rel = object.data.relationships

assert rel.collectingEvent.data.id == &quot;${basic_collecting-event_uuid}&quot;
assert rel.collection.data.id == &quot;${basic_collection_uuid}&quot;
assert rel.preparationType.data.id == &quot;${basic_preparation-type_uuid}&quot;
assert rel.preparationMethod.data.id == &quot;${basic_preparation-method_uuid}&quot;
assert rel.preparedBy.data[0].id == &quot;${__P(person_uuid_1)}&quot;
assert rel.attachment.data[0].id == &quot;${__P(attachment_uuid_1)}&quot;
assert rel.preparationProtocol.data.id == &quot;${basic_protocol_uuid}&quot;
assert rel.projects.data[0].id == &quot;${basic_project_uuid}&quot;
assert rel.assemblages.data[0].id == &quot;${basic_assemblage_uuid}&quot;
assert rel.organism.data[0].id == &quot;${basic_organism_uuid}&quot;
assert rel.storageUnit.data.id == &quot;${basic_storage-unit_uuid}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Material Sample w/ Empty Body" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose Material Sample record w/ an empty body request</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Verbose Material Sample w/ Empty Body" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;material-sample&quot;,&#xd;
    &quot;attributes&quot;: {}&#xd;
  }&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/material-sample/${verbose_material-sample_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Validate Verbose Material Sample" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="1711903298">Material Sample End2End Thread Group</stringProp>
                <stringProp name="-1754979095">Update</stringProp>
                <stringProp name="813440005">Verbose Material Sample</stringProp>
                <stringProp name="1587196699">Validate Verbose Material Sample</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Material Sample w/ Invalid UUID" enabled="true">
            <stringProp name="TestPlan.comments">Updates a Material Sample at a UUID that does not correspond to any Material Sample - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Material Sample w/ Invalid UUID" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;material-sample&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;dwcCatalogNumber&quot;: &quot;${dwcCatalogNumber_3}&quot;,&#xd;
      &quot;materialSampleName&quot;: &quot;${materialSampleName_3}&quot;,&#xd;
      &quot;materialSampleType&quot;: &quot;${materialSampleType_3}&quot;,&#xd;
      &quot;barcode&quot;: &quot;${barcode_3}&quot;,&#xd;
      &quot;dwcOtherCatalogNumbers&quot;: ${dwcOtherCatalogNumbers_3},&#xd;
      &quot;preservationType&quot;: &quot;${preservationType_3}&quot;,&#xd;
      &quot;preparationFixative&quot;: &quot;${preparationFixative_3}&quot;,&#xd;
      &quot;preparationMaterials&quot;: &quot;${preparationMaterials_3}&quot;,&#xd;
      &quot;preparationSubstrate&quot;: &quot;${preparationSubstrate_3}&quot;,&#xd;
      &quot;preparationDate&quot;: &quot;${preparationDate_3}&quot;,&#xd;
      &quot;preparationRemarks&quot;: &quot;${preparationRemarks_3}&quot;,&#xd;
      &quot;dwcDegreeOfEstablishment&quot;: &quot;${dwcDegreeOfEstablishment_3}&quot;,&#xd;
      &quot;stateChangedOn&quot;: &quot;${stateChangedOn_3}&quot;,&#xd;
      &quot;stateChangeRemarks&quot;: &quot;${stateChangeRemarks_3}&quot;,&#xd;
      &quot;materialSampleRemarks&quot;: &quot;${materialSampleRemarks_3}&quot;,&#xd;
      &quot;restrictionRemarks&quot;: &quot;${restrictionRemarks_3}&quot;,&#xd;
      &quot;isRestricted&quot;: &quot;${isRestricted_3}&quot;,&#xd;
      &quot;publiclyReleasable&quot;: ${publiclyReleasable_3},&#xd;
      &quot;notPubliclyReleasableReason&quot;: &quot;${notPubliclyReleasableReason_3}&quot;,&#xd;
      &quot;allowDuplicateName&quot;: ${allowDuplicateName_3}&#xd;
    }&#xd;
  }&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/material-sample/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verbose Material Sample" enabled="true">
            <stringProp name="TestPlan.comments">Removes the verbose Material Sample record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Verbose Material Sample" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/material-sample/${verbose_material-sample_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Verbose Material Sample" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the verbose Material Sample has been removed</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Verbose Material Sample Removed" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/material-sample/${verbose_material-sample_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 410 Error" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;410&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Basic Material Sample" enabled="true">
            <stringProp name="TestPlan.comments">Removes the basic Material Sample record</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Basic Material Sample" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/material-sample/${basic_material-sample_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Basic Material Sample" enabled="true">
              <stringProp name="TestPlan.comments">Validates that the basic Material Sample has been removed</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve and Validate Basic Materrial Sample Removed" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/material-sample/${basic_material-sample_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 410 Error" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;410&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Material Sample w/ Invalid UUID" enabled="true">
            <stringProp name="TestPlan.comments">Removes a Material Sample record at a UUID that does not correspond to any Material Sample - Produces an Error</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Material Sample w/ Invalid UUID" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/material-sample/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Material Sample tearDown" enabled="true">
            <stringProp name="TestPlan.comments">Removes entities created in the &quot;Create &gt; Material Sample setUp&quot; controller</stringProp>
          </GenericController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Delete Storage Unit" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="-1100509060">Storage Unit End2End Thread Group</stringProp>
                <stringProp name="2043376075">Delete</stringProp>
                <stringProp name="-764930277">Basic Storage Unit</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Delete Collection" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="1137554727">Collection End2End Thread Group</stringProp>
                <stringProp name="2043376075">Delete</stringProp>
                <stringProp name="594446864">Basic Collection</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Delete Collecting Event" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="868735347">Collecting Event End2End Thread Group</stringProp>
                <stringProp name="2043376075">Delete</stringProp>
                <stringProp name="599034052">Basic Collecting Event</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Delete Protocol" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="1925115245">Protocol End2End Thread Group</stringProp>
                <stringProp name="2043376075">Delete</stringProp>
                <stringProp name="-347627894">Basic Protocol</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Delete Project" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="1302683596">Project End2End Thread Group</stringProp>
                <stringProp name="2043376075">Delete</stringProp>
                <stringProp name="542668007">Basic Project</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Delete Assemblage" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="1661393241">Assemblage End2End Thread Group</stringProp>
                <stringProp name="2043376075">Delete</stringProp>
                <stringProp name="-27333986">Basic Assemblage</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Delete Organism" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="1860862835">Organism End2End Thread Group</stringProp>
                <stringProp name="2043376075">Delete</stringProp>
                <stringProp name="1957925060">Basic Organism</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Delete Preparation Method" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="-224228197">Preparation Method End2End Thread Group</stringProp>
                <stringProp name="2043376075">Delete</stringProp>
                <stringProp name="276561948">Basic Preparation Method</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Delete Preparation Type" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="-256151134">Preparation Type End2End Thread Group</stringProp>
                <stringProp name="2043376075">Delete</stringProp>
                <stringProp name="764760373">Basic Preparation Type</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Delete Managed Attribute" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="764597751">Test Plan</stringProp>
                <stringProp name="-470684949">Collection API Module Test Plan</stringProp>
                <stringProp name="-219911028">Collection Managed Attribute End2End Thread Group</stringProp>
                <stringProp name="2043376075">Delete</stringProp>
                <stringProp name="151918039">MATERIAL_SAMPLE Collection Managed Attribute</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="tearDown Thread Group" enabled="true">
        <stringProp name="TestPlan.comments">Thread group for deleting non-Collection API Module entities that were created for establishing relationships</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </PostThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Thread Group Request Headers" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__P(access_token)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/vnd.api+json</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">Required headers to perform API requests</stringProp>
        </HeaderManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete Attachments" enabled="true">
          <stringProp name="TestPlan.comments">Removes attachments created in setUp Thread Group</stringProp>
        </GenericController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Attachment 1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/objectstore-api/metadata/${__P(attachment_uuid_1)}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Attachment 2" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/objectstore-api/metadata/${__P(attachment_uuid_2)}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete Persons" enabled="true">
          <stringProp name="TestPlan.comments">Removes persons created in setUp Thread Group</stringProp>
        </GenericController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Person 1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/agent-api/person/${__P(person_uuid_1)}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Person 2" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/agent-api/person/${__P(person_uuid_2)}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="Verbose Preparation Type" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
