<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Test Plan Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="username" elementType="Argument">
            <stringProp name="Argument.name">username</stringProp>
            <stringProp name="Argument.value">dina-admin</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">dina-admin</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="user_group" elementType="Argument">
            <stringProp name="Argument.name">user_group</stringProp>
            <stringProp name="Argument.value">aafc</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="invalid_uuid" elementType="Argument">
            <stringProp name="Argument.name">invalid_uuid</stringProp>
            <stringProp name="Argument.value">123e4567-e89b-12d3-a456-426614174000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">Variables defined here are accessble via ${name}, such as ${user_group}, in any thread group</stringProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">dina.local</stringProp>
        <stringProp name="HTTPSampler.port">443</stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <stringProp name="TestPlan.comments">Default values for HTTP Samplers. Blanks fields in an HTTP sampler will be replaced with the following.</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="Retrieve Auth Token - setUp Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Token Controller" enabled="true">
          <stringProp name="TestPlan.comments">Generates an access token and stores it in the properties - accessible as ${__P(access_token)}</stringProp>
        </GenericController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Generate Access Token" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">grant_type=password&amp;username=${username}&amp;password=${password}&amp;client_id=dina-public&amp;scope=openid</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">keycloak.dina.local</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/auth/realms/dina/protocol/openid-connect/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Token Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Token Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="TestPlan.comments">Sets the returned acces token to the access_token variable - accessible via ${access_token}</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">props.put(&quot;access_token&quot;, vars.get(&quot;access_token&quot;));</stringProp>
              <stringProp name="TestPlan.comments">Sets the access_token variable to a property of the same name to allow use between thread groups - accessible now via ${__P(access_token)}</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Request Tree Visualizer" enabled="false">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Collection Managed Attribute End2End Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">15</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">15</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="TestPlan.comments">Thread group for testing the &apos;managed-attribute&apos; endpoint</stringProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Collection Managed Attribute Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="vocabularyElementType_1" elementType="Argument">
              <stringProp name="Argument.name">vocabularyElementType_1</stringProp>
              <stringProp name="Argument.value">STRING</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="vocabularyElementType_2" elementType="Argument">
              <stringProp name="Argument.name">vocabularyElementType_2</stringProp>
              <stringProp name="Argument.value">INTEGER</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="vocabularyElementType_3" elementType="Argument">
              <stringProp name="Argument.name">vocabularyElementType_3</stringProp>
              <stringProp name="Argument.value">DATE</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="vocabularyElementType_4" elementType="Argument">
              <stringProp name="Argument.name">vocabularyElementType_4</stringProp>
              <stringProp name="Argument.value">BOOL</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="managedAttributeComponent_1" elementType="Argument">
              <stringProp name="Argument.name">managedAttributeComponent_1</stringProp>
              <stringProp name="Argument.value">COLLECTING_EVENT</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="managedAttributeComponent_2" elementType="Argument">
              <stringProp name="Argument.name">managedAttributeComponent_2</stringProp>
              <stringProp name="Argument.value">MATERIAL_SAMPLE</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="managedAttributeComponent_3" elementType="Argument">
              <stringProp name="Argument.name">managedAttributeComponent_3</stringProp>
              <stringProp name="Argument.value">DETERMINATION</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="managedAttributeComponent_4" elementType="Argument">
              <stringProp name="Argument.name">managedAttributeComponent_4</stringProp>
              <stringProp name="Argument.value">ASSEMBLAGE</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multilingualDescription_1" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_1</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;en&quot;,&quot;desc&quot;:&quot;desc_1&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multilingualDescription_2" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_2</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;en&quot;,&quot;desc&quot;:&quot;desc_2&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multilingualDescription_3" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_3</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;en&quot;,&quot;desc&quot;:&quot;desc_3&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multilingualDescription_4" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_4</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;en&quot;,&quot;desc&quot;:&quot;desc_4&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="acceptedValues_1" elementType="Argument">
              <stringProp name="Argument.name">acceptedValues_1</stringProp>
              <stringProp name="Argument.value">[&quot;Lorem&quot;, &quot;Ipsum&quot;, &quot;Holy&quot;, &quot;Text&quot;]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="acceptedValues_2" elementType="Argument">
              <stringProp name="Argument.name">acceptedValues_2</stringProp>
              <stringProp name="Argument.value">[1, 2]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="acceptedValues_3" elementType="Argument">
              <stringProp name="Argument.name">acceptedValues_3</stringProp>
              <stringProp name="Argument.value">[&quot;2019-02-06&quot;, &quot;2020-02-06&quot;]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="acceptedValues_4" elementType="Argument">
              <stringProp name="Argument.name">acceptedValues_4</stringProp>
              <stringProp name="Argument.value">[true, false]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Thread Group Request Headers" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__P(access_token)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/vnd.api+json</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">Required headers to perform API requests</stringProp>
        </HeaderManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Setup for Managed Attributes" enabled="true"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Set Random Variables" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def ctx = org.apache.jmeter.threads.JMeterContextService.getContext()

ctx.getVariables().put(&quot;name_1&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_2&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_3&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_4&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)

ctx.getVariables().put(&quot;key_1&quot;, ctx.getVariables().get(&quot;name_1&quot;))
ctx.getVariables().put(&quot;key_2&quot;, ctx.getVariables().get(&quot;name_2&quot;))
ctx.getVariables().put(&quot;key_3&quot;, ctx.getVariables().get(&quot;name_3&quot;))
ctx.getVariables().put(&quot;key_4&quot;, ctx.getVariables().get(&quot;name_4&quot;))
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Token Controller" enabled="true">
            <stringProp name="TestPlan.comments">Runs the Token Controller in the setUp thread group to refresh the access token</stringProp>
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="742131162">Retrieve Auth Token - setUp Thread Group</stringProp>
              <stringProp name="52452451">Token Controller</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Managed Attributes" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Basic" enabled="true">
            <stringProp name="TestPlan.comments">Creates the basic record and asserts that all fields are set as intended.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Basic Managed Attribute" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;managed-attribute&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_1}&quot;,&#xd;
      &quot;vocabularyElementType&quot;: &quot;${vocabularyElementType_1}&quot;,&#xd;
      &quot;managedAttributeComponent&quot;: &quot;${managedAttributeComponent_1}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Basic Collection Managed Attribute UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">basic_collection_managed_attribute_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Create Basic" enabled="true">
              <stringProp name="TestPlan.comments">Retrieves the basic record that was created and asserts all values are set as expected.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Create Basic - Retrieve Basic Managed Attribute" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute/${basic_collection_managed_attribute_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Create Basic - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_1}&quot;
assert attr.key == &quot;${name_1}&quot;
assert attr.vocabularyElementType == &quot;${vocabularyElementType_1}&quot;
assert attr.managedAttributeComponent == &quot;${managedAttributeComponent_1}&quot;
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Verbose" enabled="true">
            <stringProp name="TestPlan.comments">Creates the verbose record and asserts that all fields are set as intended.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Verbose Managed Attribute" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;managed-attribute&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_2}&quot;,&#xd;
      &quot;vocabularyElementType&quot;: &quot;${vocabularyElementType_2}&quot;,&#xd;
      &quot;managedAttributeComponent&quot;: &quot;${managedAttributeComponent_2}&quot;,&#xd;
      &quot;acceptedValues&quot;: ${acceptedValues_2},&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_2}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Verbose Collection Managed Attribute UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">verbose_collection_managed_attribute_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Create Verbose" enabled="true">
              <stringProp name="TestPlan.comments">Retrieves the verbose record that was created and asserts all values are set as expected.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Create Verbose - Retrieve Verbose Managed Attribute" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute/${verbose_collection_managed_attribute_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Create Verbose - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_2}&quot;
assert attr.key == &quot;${name_2}&quot;
assert attr.vocabularyElementType == &quot;${vocabularyElementType_2}&quot;
assert attr.managedAttributeComponent == &quot;${managedAttributeComponent_2}&quot;
assert attr.acceptedValues.toString() == &quot;${acceptedValues_2}&quot;
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Empty Attributes" enabled="true">
            <stringProp name="TestPlan.comments">Attempts to create a record with no attributes and asserts the expected error.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Empty Attributes - Create Managed Attribute " enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;managed-attribute&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - Error 403" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;403&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Only User Group" enabled="true">
            <stringProp name="TestPlan.comments">Attempts to create a record without the required fields and asserts the expected error.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Only User Group - Create Managed Attribute" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;managed-attribute&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - Error 422" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;422&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Incorrect Type" enabled="true">
            <stringProp name="TestPlan.comments">Attempts to create a record with the incorrect type set and asserts the expected error.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Incorrect Type - Create Managed Attribute" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;material-sample&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_1}&quot;,&#xd;
      &quot;vocabularyElementType&quot;: &quot;${vocabularyElementType_1}&quot;,&#xd;
      &quot;managedAttributeComponent&quot;: &quot;${managedAttributeComponent_1}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - Error 400" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;400&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Managed Attributes" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Basic" enabled="true">
            <stringProp name="TestPlan.comments">Updates the basic record and asserts that all fields are set as intended.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Basic Managed Attribute" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;managed-attribute&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_3}&quot;,&#xd;
      &quot;key&quot;: &quot;${key_3}&quot;,&#xd;
      &quot;vocabularyElementType&quot;: &quot;${vocabularyElementType_3}&quot;,&#xd;
      &quot;managedAttributeComponent&quot;: &quot;${managedAttributeComponent_3}&quot;,&#xd;
      &quot;acceptedValues&quot;: ${acceptedValues_3},&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_3}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute/${basic_collection_managed_attribute_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Update Basic" enabled="true">
              <stringProp name="TestPlan.comments">Retrieves the basic record that was updated and asserts all values are set as expected</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Update Basic - Retrieve Basic Managed Attribute" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute/${basic_collection_managed_attribute_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Update Basic - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_1}&quot;
assert attr.key == &quot;${name_1}&quot;
assert attr.vocabularyElementType == &quot;${vocabularyElementType_3}&quot;
assert attr.managedAttributeComponent == &quot;${managedAttributeComponent_3}&quot;
assert attr.acceptedValues == ${acceptedValues_3}
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Verbose" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose record and asserts that all fields are set as intended.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Verbose Managed Attribute" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;managed-attribute&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_4}&quot;,&#xd;
      &quot;key&quot;: &quot;${key_4}&quot;,&#xd;
      &quot;vocabularyElementType&quot;: &quot;${vocabularyElementType_4}&quot;,&#xd;
      &quot;managedAttributeComponent&quot;: &quot;${managedAttributeComponent_3}&quot;,&#xd;
      &quot;acceptedValues&quot;: ${acceptedValues_4},&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_4}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute/${verbose_collection_managed_attribute_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Update Verbose" enabled="true">
              <stringProp name="TestPlan.comments">Retrieves the verbose record that was updated and asserts all values are set as expected.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Update Verbose Retrieve Verbose Managed Attribute" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute/${verbose_collection_managed_attribute_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Update Verbose - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_2}&quot;
assert attr.key == &quot;${name_2}&quot;
assert attr.vocabularyElementType == &quot;${vocabularyElementType_4}&quot;
assert attr.managedAttributeComponent == &quot;${managedAttributeComponent_3}&quot;
assert attr.acceptedValues.toString() == &quot;${acceptedValues_4}&quot;
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Verbose - Empty Body" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose record while providing no fields to update and asserts that no changes were made.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Verbose Managed Attribute" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;managed-attribute&quot;,&#xd;
    &quot;attributes&quot;: {}&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute/${verbose_collection_managed_attribute_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Update Verbose - Empty Body" enabled="true">
              <stringProp name="TestPlan.comments">Retrieves the verbose record that was updated and asserts all values are set as expected.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Update Verbose - Empty Body - Retrieve Verbose Managed Attribute" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute/${verbose_collection_managed_attribute_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Update Verbose - Empty Body - General Assetions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_2}&quot;
assert attr.key == &quot;${name_2}&quot;
assert attr.vocabularyElementType == &quot;${vocabularyElementType_4}&quot;
assert attr.managedAttributeComponent == &quot;${managedAttributeComponent_3}&quot;
assert attr.acceptedValues.toString() == &quot;${acceptedValues_4}&quot;
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Invalid UUID" enabled="true">
            <stringProp name="TestPlan.comments">Attempts to update a record with an invalid UUID specified and asserts the expected error.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Invalid Managed Attribute" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;managed-attribute&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_3}&quot;,&#xd;
      &quot;key&quot;: &quot;${key_3}&quot;,&#xd;
      &quot;vocabularyElementType&quot;: &quot;${vocabularyElementType_3}&quot;,&#xd;
      &quot;managedAttributeComponent&quot;: &quot;${managedAttributeComponent_3}&quot;,&#xd;
      &quot;acceptedValues&quot;: ${acceptedValues_3},&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_3}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete Managed Attributes" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete Basic" enabled="true">
            <stringProp name="TestPlan.comments">Deletes the basic record and asserts that the record was properly removed.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Basic Managed Attribute" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute/${basic_collection_managed_attribute_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Delete Basic" enabled="true">
              <stringProp name="TestPlan.comments">Attempts to retrieve the deleted basic record and asserts that the correct response is returned.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Delete Basic - Retrieve Basic Managed Attribute" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute/${basic_collection_managed_attribute_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - Error 410" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;410&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete Verbose" enabled="true">
            <stringProp name="TestPlan.comments">Deletes the verbose record and asserts that the record was properly removed.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Verbose Managed Attribute" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute/${verbose_collection_managed_attribute_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Delete Verbose" enabled="true">
              <stringProp name="TestPlan.comments">Attempts to retrieve the deleted verbose record and asserts that the correct response is returned.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Delete Verbose - Retrieve Verbose Managed Attribute" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute/${verbose_collection_managed_attribute_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - Error 410" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;410&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete Invalid UUID" enabled="true">
            <stringProp name="TestPlan.comments">Attempts to delete a record with an invalid UUID specified and asserts the expected error.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Invalid Managed Attribute" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/managed-attribute/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Preparation Type End2End Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">15</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">15</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="TestPlan.comments">Thread group for testing the &apos;preparation-type&apos; endpoint</stringProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Preparation Type Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="multilingualDescription_1" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_1</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;en&quot;,&quot;desc&quot;:&quot;desc_1&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multilingualDescription_2" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_2</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;en&quot;,&quot;desc&quot;:&quot;desc_2&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multilingualDescription_3" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_3</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;fr&quot;,&quot;desc&quot;:&quot;desc_3&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multilingualDescription_4" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_4</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;fr&quot;,&quot;desc&quot;:&quot;desc_4&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Thread Group Request Headers" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__P(access_token)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/vnd.api+json</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">Required headers to perform API requests</stringProp>
        </HeaderManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Setup for Preparation Type" enabled="true"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Set Random Variables" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def ctx = org.apache.jmeter.threads.JMeterContextService.getContext()

ctx.getVariables().put(&quot;name_1&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_2&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_3&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_4&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Token Controller" enabled="true">
            <stringProp name="TestPlan.comments">Runs the Token Controller in the setUp thread group to refresh the access token</stringProp>
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="742131162">Retrieve Auth Token - setUp Thread Group</stringProp>
              <stringProp name="52452451">Token Controller</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Preparation Type" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Basic" enabled="true">
            <stringProp name="TestPlan.comments">Creates the basic record and asserts that all fields are set as intended.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Basic Preparation Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;preparation-type&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    	 &quot;name&quot; : &quot;${name_1}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-type</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Basic Preparation Type UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">basic_preparation-type_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Create Basic" enabled="true">
              <stringProp name="TestPlan.comments">Retrieves the basic record that was created and asserts all values are set as expected.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Create Basic - Retrieve Basic Peparation Type" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/preparation-type/${basic_preparation-type_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Create Basic - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_1}&quot;
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Verbose" enabled="true">
            <stringProp name="TestPlan.comments">Creates the verbose record and asserts that all fields are set as intended.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Verbose Preparation Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;preparation-type&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    	 &quot;name&quot; : &quot;${name_2}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_2}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-type</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Verbose Preparation Type UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">verbose_preparation-type_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Create Verbose" enabled="true">
              <stringProp name="TestPlan.comments">Retrieves the verbose record that was created and asserts all values are set as expected.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Create Verbose - Retrieve Verbose Preparation Type" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/preparation-type/${verbose_preparation-type_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Create Verbose - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_2}&quot;
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Create Verbose - Multilingual Description Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Asserting with groovy script appears to have issue so will assert multilingual description here</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.multilingualDescription</stringProp>
                  <stringProp name="EXPECTED_VALUE">${multilingualDescription_2}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Empty Attributes" enabled="true">
            <stringProp name="TestPlan.comments">Attempts to create a record with no attributes and asserts the expected error.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Empty Attributes - Create Preparation Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;preparation-type&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-type</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 403 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;403&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Only User Group" enabled="true">
            <stringProp name="TestPlan.comments">Attempts to create a record without the required fields and asserts the expected error.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Only User Group - Create Preparation Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;preparation-type&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-type</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 422 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;422&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Incorrect Type" enabled="true">
            <stringProp name="TestPlan.comments">Attempts to create a record with the incorrect type set and asserts the expected error.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Incorrect Type - Create Preparation Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;material-sample&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    	 &quot;name&quot; : &quot;${name_1}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-type</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 400 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;400&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Preparation Type" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Basic" enabled="true">
            <stringProp name="TestPlan.comments">Updates the basic record and asserts that all fields are set as intended.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Basic Preparation Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;preparation-type&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    	 &quot;name&quot; : &quot;${name_3}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_3}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-type/${basic_preparation-type_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Update Basic" enabled="true">
              <stringProp name="TestPlan.comments">Retrieves the basic record that was updated and asserts all values are set as expected</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Update Basic - Retrieve Basic Preparation Type" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/preparation-type/${basic_preparation-type_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Update Basic - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_3}&quot;
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Update Basic - Multilingual Description Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Asserting with groovy script appears to have issue so will assert multilingual description here</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.multilingualDescription</stringProp>
                  <stringProp name="EXPECTED_VALUE">${multilingualDescription_3}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Verbose" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose record and asserts that all fields are set as intended.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Verbose Preparation Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;preparation-type&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    	 &quot;name&quot; : &quot;${name_4}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_4}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-type/${verbose_preparation-type_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Update Verbose" enabled="true">
              <stringProp name="TestPlan.comments">Retrieves the verbose record that was updated and asserts all values are set as expected</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Update Verbose - Retrieve Verbose Preparation Type" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/preparation-type/${verbose_preparation-type_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Update Verbose - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_4}&quot;
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Update Verbose - Multilingual Description Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Asserting with groovy script appears to have issue so will assert multilingual description here</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.multilingualDescription</stringProp>
                  <stringProp name="EXPECTED_VALUE">${multilingualDescription_4}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Verbose - Empty Body" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose record while providing no fields to update and asserts that no changes were made.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Verbose Preparation Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;preparation-type&quot;,&#xd;
    &quot;attributes&quot;: {}&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-type/${verbose_preparation-type_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Update Verbose - Empty Body" enabled="true">
              <stringProp name="TestPlan.comments">Retrieves the verbose record that was updated and asserts all values are set as expected.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve Verbose Preparation Type" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/preparation-type/${verbose_preparation-type_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Update Verbose - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_4}&quot;
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Update Verbose - Multilingual Description Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Asserting with groovy script appears to have issue so will assert multilingual description here</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.multilingualDescription</stringProp>
                  <stringProp name="EXPECTED_VALUE">${multilingualDescription_4}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Invalid UUID" enabled="true">
            <stringProp name="TestPlan.comments">Attempts to update a record with an invalid UUID specified and asserts the expected error.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Invalid Preparation Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;preparation-type&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    	 &quot;name&quot; : &quot;${name_3}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_3}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-type/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete Preparation Type" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete Basic" enabled="true">
            <stringProp name="TestPlan.comments">Deletes the basic record and asserts that the record was properly removed.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Basic Preparation Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-type/${basic_preparation-type_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Delete Basic" enabled="true">
              <stringProp name="TestPlan.comments">Attempts to retrieve the deleted basic record and asserts that the correct response is returned.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Delete Basic - Retrieve Basic Preparation Type" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/preparation-type/${basic_preparation-type_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 410 Error" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;410&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete Verbose" enabled="true">
            <stringProp name="TestPlan.comments">Deletes the verbose record and asserts that the record was properly removed.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Verbose Preparation Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-type/${verbose_preparation-type_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Delete Verbose" enabled="true">
              <stringProp name="TestPlan.comments">Attempts to retrieve the deleted verbose record and asserts that the correct response is returned.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Delete Verbose - Retrieve Verbose Preparation Type" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/preparation-type/${verbose_preparation-type_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - Error 410" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;410&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete Invalid UUID" enabled="true">
            <stringProp name="TestPlan.comments">Attempts to delete a record with an invalid UUID specified and asserts the expected error.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Invalid Preparation Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-type/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Preparation Method End2End Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">15</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">15</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="TestPlan.comments">Thread group for testing the &apos;preparation-method&apos; endpoint</stringProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Preparation Method Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="multilingualDescription_1" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_1</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;en&quot;,&quot;desc&quot;:&quot;desc_1&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multilingualDescription_2" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_2</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;en&quot;,&quot;desc&quot;:&quot;desc_2&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multilingualDescription_3" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_3</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;fr&quot;,&quot;desc&quot;:&quot;desc_3&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multilingualDescription_4" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_4</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;fr&quot;,&quot;desc&quot;:&quot;desc_4&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Thread Group Request Headers" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__P(access_token)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/vnd.api+json</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">Required headers to perform API requests</stringProp>
        </HeaderManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Setup for Preparation Method" enabled="true"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Set Random Variables" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def ctx = org.apache.jmeter.threads.JMeterContextService.getContext()

ctx.getVariables().put(&quot;name_1&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_2&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_3&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_4&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Token Controller" enabled="true">
            <stringProp name="TestPlan.comments">Runs the Token Controller in the setUp thread group to refresh the access token</stringProp>
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="742131162">Retrieve Auth Token - setUp Thread Group</stringProp>
              <stringProp name="52452451">Token Controller</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Preparation Method " enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Basic" enabled="true">
            <stringProp name="TestPlan.comments">Creates the basic record and asserts that all fields are set as intended.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Basic Preparation Method" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;preparation-method&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_1}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-method</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Basic Preparation Method UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">basic_preparation-method_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Create Basic" enabled="true">
              <stringProp name="TestPlan.comments">Retrieves the basic record that was created and asserts all values are set as expected.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Create Bsic - Retrieve Basic Preparation Method" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/preparation-method/${basic_preparation-method_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Create Basic - Generla Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_1}&quot;
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Verbose" enabled="true">
            <stringProp name="TestPlan.comments">Creates the verbose record and asserts that all fields are set as intended.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Verbose Preparation Method" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;preparation-method&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_2}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_2}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-method</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Verbose Preparation Method UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">verbose_preparation-method_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Create Verbose" enabled="true">
              <stringProp name="TestPlan.comments">Retrieves the verbose record that was created and asserts all values are set as expected.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Retrieve Verbose Preparation Method" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/preparation-method/${verbose_preparation-method_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Create Verbose - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_2}&quot;
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Create Verbose - Multilingual Description Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Asserting with groovy script appears to have issue so will assert multilingual description here</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.multilingualDescription</stringProp>
                  <stringProp name="EXPECTED_VALUE">${multilingualDescription_2}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Empty Attributes" enabled="true">
            <stringProp name="TestPlan.comments">Attempts to create a record with no attributes and asserts the expected error.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Empty Attributes - Create Preparation Method" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;preparation-method&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-method</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 403 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;403&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Only User Group" enabled="true">
            <stringProp name="TestPlan.comments">Attempts to create a record without the required fields and asserts the expected error.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Only User Group - Create Preparation Method" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;preparation-method&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-method</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 422 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;422&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Incorrect Type" enabled="true">
            <stringProp name="TestPlan.comments">Attempts to create a record with the incorrect type set and asserts the expected error.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Incorrect Type - Create Preparation Method" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;material-sample&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_1}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-method</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 400 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;400&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Preparation Method " enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Basic" enabled="true">
            <stringProp name="TestPlan.comments">Updates the basic record and asserts that all fields are set as intended.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Basic Preparation Method" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;preparation-method&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_3}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_3}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-method/${basic_preparation-method_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Update Basic" enabled="true">
              <stringProp name="TestPlan.comments">Retrieves the basic record that was updated and asserts all values are set as expected</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Update Basic - Retrieve Basic Preparation Method" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/preparation-method/${basic_preparation-method_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Update Basic - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_3}&quot;
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Update Basic - Multilingual Description Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Asserting with groovy script appears to have issue so will assert multilingual description here</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.multilingualDescription</stringProp>
                  <stringProp name="EXPECTED_VALUE">${multilingualDescription_3}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Verbose" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose record and asserts that all fields are set as intended.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Verbose Preparation Method" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;preparation-method&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_4}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_4}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-method/${verbose_preparation-method_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Update Verbose" enabled="true">
              <stringProp name="TestPlan.comments">Retrieves the verbose record that was updated and asserts all values are set as expected</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Update Verbose - Retrieve Verbose Preparation Method" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/preparation-method/${verbose_preparation-method_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Update Verbose - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_4}&quot;
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Update Verbose - Multilingual Description Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Asserting with groovy script appears to have issue so will assert multilingual description here</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.multilingualDescription</stringProp>
                  <stringProp name="EXPECTED_VALUE">${multilingualDescription_4}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Verbose - Empty Body" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose record while providing no fields to update and asserts that no changes were made.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Verbose Preparation Method" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;preparation-method&quot;,&#xd;
    &quot;attributes&quot;: {}&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-method/${verbose_preparation-method_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Update Verbose - Empty Body" enabled="true">
              <stringProp name="TestPlan.comments">Retrieves the verbose record that was updated and asserts all values are set as expected.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Update Verbose - Empty Body - Retrieve Verbose Preparation Method" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/preparation-method/${verbose_preparation-method_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Update Verbose - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_4}&quot;
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Update Verbose - Multilingual Description Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Asserting with groovy script appears to have issue so will assert multilingual description here</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.multilingualDescription</stringProp>
                  <stringProp name="EXPECTED_VALUE">${multilingualDescription_4}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Invalid UUID" enabled="true">
            <stringProp name="TestPlan.comments">Attempts to update a record with an invalid UUID specified and asserts the expected error.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Invalid Preparation Method" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;preparation-method&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_3}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_3}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-method/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete Preparation Method " enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete Basic" enabled="true">
            <stringProp name="TestPlan.comments">Deletes the basic record and asserts that the record was properly removed.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Basic Preparation Method" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-method/${basic_preparation-method_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Delete Basic" enabled="true">
              <stringProp name="TestPlan.comments">Attempts to retrieve the deleted basic record and asserts that the correct response is returned.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Delete Basic - Retrieve Basic Preparation Method" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/preparation-method/${basic_preparation-method_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 410 Error" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;410&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete Verbose" enabled="true">
            <stringProp name="TestPlan.comments">Deletes the verbose record and asserts that the record was properly removed.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Verbose Preparation Method" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-method/${verbose_preparation-method_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Delete Verbose" enabled="true">
              <stringProp name="TestPlan.comments">Attempts to retrieve the deleted verbose record and asserts that the correct response is returned.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Delete Verbose - Retrieve Verbose Preparation Method" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/preparation-method/${verbose_preparation-method_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 410 Error" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;410&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete Invalid UUID" enabled="true">
            <stringProp name="TestPlan.comments">Attempts to delete a record with an invalid UUID specified and asserts the expected error.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Invalid Preparation Method" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/preparation-method/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Institution End2End Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">15</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">15</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="TestPlan.comments">Thread group for testing the &apos;institution&apos; endpoint</stringProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Institution Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="multilingualDescription_1" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_1</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;en&quot;,&quot;desc&quot;:&quot;desc_1&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multilingualDescription_2" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_2</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;en&quot;,&quot;desc&quot;:&quot;desc_2&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multilingualDescription_3" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_3</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;fr&quot;,&quot;desc&quot;:&quot;desc_3&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multilingualDescription_4" elementType="Argument">
              <stringProp name="Argument.name">multilingualDescription_4</stringProp>
              <stringProp name="Argument.value">{&quot;descriptions&quot;:[{&quot;lang&quot;:&quot;fr&quot;,&quot;desc&quot;:&quot;desc_4&quot;}]}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="webpage_1" elementType="Argument">
              <stringProp name="Argument.name">webpage_1</stringProp>
              <stringProp name="Argument.value">http://webpage_1.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="webpage_2" elementType="Argument">
              <stringProp name="Argument.name">webpage_2</stringProp>
              <stringProp name="Argument.value">http://webpage_2.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="webpage_3" elementType="Argument">
              <stringProp name="Argument.name">webpage_3</stringProp>
              <stringProp name="Argument.value">http://webpage_3.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="webpage_4" elementType="Argument">
              <stringProp name="Argument.name">webpage_4</stringProp>
              <stringProp name="Argument.value">http://webpage_4.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="address_1" elementType="Argument">
              <stringProp name="Argument.name">address_1</stringProp>
              <stringProp name="Argument.value">address_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="address_2" elementType="Argument">
              <stringProp name="Argument.name">address_2</stringProp>
              <stringProp name="Argument.value">address_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="address_3" elementType="Argument">
              <stringProp name="Argument.name">address_3</stringProp>
              <stringProp name="Argument.value">address_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="address_4" elementType="Argument">
              <stringProp name="Argument.name">address_4</stringProp>
              <stringProp name="Argument.value">address_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="remarks_1" elementType="Argument">
              <stringProp name="Argument.name">remarks_1</stringProp>
              <stringProp name="Argument.value">remarks_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="remarks_2" elementType="Argument">
              <stringProp name="Argument.name">remarks_2</stringProp>
              <stringProp name="Argument.value">remarks_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="remarks_3" elementType="Argument">
              <stringProp name="Argument.name">remarks_3</stringProp>
              <stringProp name="Argument.value">remarks_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="remarks_4" elementType="Argument">
              <stringProp name="Argument.name">remarks_4</stringProp>
              <stringProp name="Argument.value">remarks_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="identifiers_1" elementType="Argument">
              <stringProp name="Argument.name">identifiers_1</stringProp>
              <stringProp name="Argument.value">[{&quot;type&quot;:&quot;GRSCICOLL&quot;,&quot;uri&quot;:&quot;www.uri_1.com&quot;}]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="identifiers_2" elementType="Argument">
              <stringProp name="Argument.name">identifiers_2</stringProp>
              <stringProp name="Argument.value">[{&quot;type&quot;:&quot;GRSCICOLL&quot;,&quot;uri&quot;:&quot;www.uri_2.com&quot;}]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="identifiers_3" elementType="Argument">
              <stringProp name="Argument.name">identifiers_3</stringProp>
              <stringProp name="Argument.value">[{&quot;type&quot;:&quot;GRSCICOLL&quot;,&quot;uri&quot;:&quot;www.uri_3.com&quot;}]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="identifiers_4" elementType="Argument">
              <stringProp name="Argument.name">identifiers_4</stringProp>
              <stringProp name="Argument.value">[{&quot;type&quot;:&quot;GRSCICOLL&quot;,&quot;uri&quot;:&quot;www.uri_4.com&quot;}]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Thread Group Request Headers" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__P(access_token)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/vnd.api+json</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">Required headers to perform API requests</stringProp>
        </HeaderManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Setup for Institution" enabled="true"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Set Random Variables" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def ctx = org.apache.jmeter.threads.JMeterContextService.getContext()

ctx.getVariables().put(&quot;name_1&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_2&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_3&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_4&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Token Controller" enabled="true">
            <stringProp name="TestPlan.comments">Runs the Token Controller in the setUp thread group to refresh the access token</stringProp>
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="742131162">Retrieve Auth Token - setUp Thread Group</stringProp>
              <stringProp name="52452451">Token Controller</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Institution" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Basic" enabled="true">
            <stringProp name="TestPlan.comments">Creates the basic record and asserts that all fields are set as intended.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Basic Institution" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;institution&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_1}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/institution</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Basic Institution UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">basic_institution_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Create Basic" enabled="true">
              <stringProp name="TestPlan.comments">Retrieves the basic record that was created and asserts all values are set as expected.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Create Basic - Retrieve Verbose Institution" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/institution/${basic_institution_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Create Basic - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_1}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Verbose" enabled="true">
            <stringProp name="TestPlan.comments">Creates the verbose record and asserts that all fields are set as intended.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Verbose Institution" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;institution&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_2}&quot;,&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_2},&#xd;
      &quot;webpage&quot;: &quot;${webpage_2}&quot;,&#xd;
      &quot;address&quot;: &quot;${address_2}&quot;,&#xd;
      &quot;remarks&quot;: &quot;${remarks_2}&quot;,&#xd;
      &quot;identifiers&quot;: ${identifiers_2}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/institution</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Verbose Institution UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">verbose_institution_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Create Verbose" enabled="true">
              <stringProp name="TestPlan.comments">Retrieves the verbose record that was created and asserts all values are set as expected.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Create Verbose - Retrieve Verbose Institution" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/institution/${verbose_institution_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Create Verbose - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_2}&quot;
assert attr.webpage == &quot;${webpage_2}&quot;
assert attr.address == &quot;${address_2}&quot;
assert attr.remarks == &quot;${remarks_2}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Create Verbose - Multilingual Description Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Asserting with groovy script appears to have issue so will assert multilingual description here</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.multilingualDescription</stringProp>
                  <stringProp name="EXPECTED_VALUE">${multilingualDescription_2}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Create Verbose - Identifiers Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Asserting with groovy script appears to have issue so will assert identifiers here</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.identifiers</stringProp>
                  <stringProp name="EXPECTED_VALUE">${identifiers_2}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Empty Attributes" enabled="true">
            <stringProp name="TestPlan.comments">Attempts to create a record with no attributes and asserts the expected error.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Empty Attributes - Create Institution" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;institution&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/institution</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 422 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;422&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Incorrect Type" enabled="true">
            <stringProp name="TestPlan.comments">Attempts to create a record with the incorrect type set and asserts the expected error.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Incorrect Type - Create Institution" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;material-sample&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_1}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/institution</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 400 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;400&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Institution" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Basic" enabled="true">
            <stringProp name="TestPlan.comments">Updates the basic record and asserts that all fields are set as intended.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Basic Institution" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;institution&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_3}&quot;,&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_3},&#xd;
      &quot;webpage&quot;: &quot;${webpage_3}&quot;,&#xd;
      &quot;address&quot;: &quot;${address_3}&quot;,&#xd;
      &quot;remarks&quot;: &quot;${remarks_3}&quot;,&#xd;
      &quot;identifiers&quot;: ${identifiers_3}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/institution/${basic_institution_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Update Basic" enabled="true">
              <stringProp name="TestPlan.comments">Retrieves the basic record that was updated and asserts all values are set as expected</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Update Basic - Retrieve Basic Institution" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/institution/${basic_institution_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Update Basic - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_3}&quot;
assert attr.webpage == &quot;${webpage_3}&quot;
assert attr.address == &quot;${address_3}&quot;
assert attr.remarks == &quot;${remarks_3}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Upate Basic - Multilingual Description Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Asserting with groovy script appears to have issue so will assert multilingual description here</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.multilingualDescription</stringProp>
                  <stringProp name="EXPECTED_VALUE">${multilingualDescription_3}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Update Basic - Identifiers Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Asserting with groovy script appears to have issue so will assert identifiers here</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.identifiers</stringProp>
                  <stringProp name="EXPECTED_VALUE">${identifiers_3}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Verbose" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose record and asserts that all fields are set as intended.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Patch - Update Verbose Institution" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;institution&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_4}&quot;,&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_4},&#xd;
      &quot;webpage&quot;: &quot;${webpage_4}&quot;,&#xd;
      &quot;address&quot;: &quot;${address_4}&quot;,&#xd;
      &quot;remarks&quot;: &quot;${remarks_4}&quot;,&#xd;
      &quot;identifiers&quot;: ${identifiers_4}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/institution/${verbose_institution_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Update Verbose" enabled="true">
              <stringProp name="TestPlan.comments">Retrieves the verbose record that was updated and asserts all values are set as expected</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Update Verbose - Retrieve Verbose Institution" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/institution/${verbose_institution_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Update Verbose - General Assertionsd" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_4}&quot;
assert attr.webpage == &quot;${webpage_4}&quot;
assert attr.address == &quot;${address_4}&quot;
assert attr.remarks == &quot;${remarks_4}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Update Verbose - Multilingual Description Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Asserting with groovy script appears to have issue so will assert multilingual description here</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.multilingualDescription</stringProp>
                  <stringProp name="EXPECTED_VALUE">${multilingualDescription_4}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Update Verbose - Identifiers Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Asserting with groovy script appears to have issue so will assert identifiers here</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.identifiers</stringProp>
                  <stringProp name="EXPECTED_VALUE">${identifiers_4}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Verbose - Empty Body" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose record while providing no fields to update and asserts that no changes were made.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Patch - Update Verbose Institution" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;institution&quot;,&#xd;
    &quot;attributes&quot;: {}&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/institution/${verbose_institution_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Update Verbose - Empty Body" enabled="true">
              <stringProp name="TestPlan.comments">Retrieves the verbose record that was updated and asserts all values are set as expected.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Update Verbose - Empty Body - Retrieve Verbose Institution" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/institution/${verbose_institution_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Update Verbose - General Assertionsd" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_4}&quot;
assert attr.webpage == &quot;${webpage_4}&quot;
assert attr.address == &quot;${address_4}&quot;
assert attr.remarks == &quot;${remarks_4}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Update Verbose - Multilingual Description Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Asserting with groovy script appears to have issue so will assert multilingual description here</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.multilingualDescription</stringProp>
                  <stringProp name="EXPECTED_VALUE">${multilingualDescription_4}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Update Verbose - Identifiers Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Asserting with groovy script appears to have issue so will assert identifiers here</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.identifiers</stringProp>
                  <stringProp name="EXPECTED_VALUE">${identifiers_4}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Invalid UUID" enabled="true">
            <stringProp name="TestPlan.comments">Attempts to update a record with an invalid UUID specified and asserts the expected error.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Invalid Institution" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;institution&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_3}&quot;,&#xd;
      &quot;multilingualDescription&quot;: ${multilingualDescription_3},&#xd;
      &quot;webpage&quot;: &quot;${webpage_3}&quot;,&#xd;
      &quot;address&quot;: &quot;${address_3}&quot;,&#xd;
      &quot;remarks&quot;: &quot;${remarks_3}&quot;,&#xd;
      &quot;identifiers&quot;: ${identifiers_3}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/institution/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete Institution" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete Basic" enabled="true">
            <stringProp name="TestPlan.comments">Deletes the basic record and asserts that the record was properly removed.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Basic Institution" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/institution/${basic_institution_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Delete Basic" enabled="true">
              <stringProp name="TestPlan.comments">Attempts to retrieve the deleted basic record and asserts that the correct response is returned.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Delete Basic - Retrieve Basic Institution" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/institution/${basic_institution_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 410 Error" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;410&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete Verbose" enabled="true">
            <stringProp name="TestPlan.comments">Deletes the verbose record and asserts that the record was properly removed.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Verbose Institution" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/institution/${verbose_institution_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Delete Verbose" enabled="true">
              <stringProp name="TestPlan.comments">Attempts to retrieve the deleted verbose record and asserts that the correct response is returned.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Delete Verbose - Retrieve Verbose Institution" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/institution/${verbose_institution_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 410 Error" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;410&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete Invalid UUID" enabled="true">
            <stringProp name="TestPlan.comments">Attempts to delete a record with an invalid UUID specified and asserts the expected error.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Invalid Institution" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/institution/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Storage Unit Type End2End Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">15</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">15</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="TestPlan.comments">Thread group for testing the &apos;storage-unit-type&apos; endpoint</stringProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Storage-Unit-Type Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="isInseperable_1" elementType="Argument">
              <stringProp name="Argument.name">isInseperable_1</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="isInseperable_2" elementType="Argument">
              <stringProp name="Argument.name">isInseperable_2</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="isInseperable_3" elementType="Argument">
              <stringProp name="Argument.name">isInseperable_3</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="isInseperable_4" elementType="Argument">
              <stringProp name="Argument.name">isInseperable_4</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="gridLayoutDefinition_1" elementType="Argument">
              <stringProp name="Argument.name">gridLayoutDefinition_1</stringProp>
              <stringProp name="Argument.value">{&quot;numberOfRows&quot;:4,&quot;numberOfColumns&quot;:8,&quot;fillDirection&quot;:&quot;BY_COLUMN&quot;}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="gridLayoutDefinition_2" elementType="Argument">
              <stringProp name="Argument.name">gridLayoutDefinition_2</stringProp>
              <stringProp name="Argument.value">{&quot;numberOfRows&quot;:4,&quot;numberOfColumns&quot;:8,&quot;fillDirection&quot;:&quot;BY_ROW&quot;}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="gridLayoutDefinition_3" elementType="Argument">
              <stringProp name="Argument.name">gridLayoutDefinition_3</stringProp>
              <stringProp name="Argument.value">{&quot;numberOfRows&quot;:12,&quot;numberOfColumns&quot;:8,&quot;fillDirection&quot;:&quot;BY_COLUMN&quot;}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="gridLayoutDefinition_4" elementType="Argument">
              <stringProp name="Argument.name">gridLayoutDefinition_4</stringProp>
              <stringProp name="Argument.value">{&quot;numberOfRows&quot;:12,&quot;numberOfColumns&quot;:8,&quot;fillDirection&quot;:&quot;BY_ROW&quot;}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Thread Group Request Headers" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__P(access_token)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/vnd.api+json</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">Required headers to perform API requests</stringProp>
        </HeaderManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Setup for Storage Unit Type" enabled="true"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Set Random Variables" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def ctx = org.apache.jmeter.threads.JMeterContextService.getContext()

ctx.getVariables().put(&quot;name_1&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_2&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_3&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_4&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Token Controller" enabled="true">
            <stringProp name="TestPlan.comments">Runs the Token Controller in the setUp thread group to refresh the access token</stringProp>
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="742131162">Retrieve Auth Token - setUp Thread Group</stringProp>
              <stringProp name="52452451">Token Controller</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Storage Unit Type" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Basic" enabled="true">
            <stringProp name="TestPlan.comments">Creates the basic record and asserts that all fields are set as intended.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Basic Storage Unit Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;storage-unit-type&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_1}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit-type</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Basic Storage-Unit-Type UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">basic_storage_unit_type_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Create Basic" enabled="true">
              <stringProp name="TestPlan.comments">Retrieves the basic record that was created and asserts all values are set as expected.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Create Basic - Retrieve Basic Storage Unit Type" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit-type/${basic_storage_unit_type_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Create Basic - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_1}&quot;
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Verbose" enabled="true">
            <stringProp name="TestPlan.comments">Creates the verbose record and asserts that all fields are set as intended.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Verbose Storage Unit Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;storage-unit-type&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_2}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;isInseperable&quot;: ${isInseperable_2},&#xd;
      &quot;gridLayoutDefinition&quot;: ${gridLayoutDefinition_2}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit-type</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Verbose Storage-Unit-Type UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">verbose_storage_unit_type_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Create Verbose" enabled="true">
              <stringProp name="TestPlan.comments">Retrieves the verbose record that was created and asserts all values are set as expected.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Create Verbose - Retrieve Verbose Storage Unit Type" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit-type/${verbose_storage_unit_type_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Create Verbose - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_2}&quot;
assert attr.isInseperable == ${isInseperable_2}
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Create Verbose - Grid Layout Definition Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Asserting with groovy script appears to have issue so will assert gridLayoutDefinition here</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.gridLayoutDefinition</stringProp>
                  <stringProp name="EXPECTED_VALUE">${gridLayoutDefinition_2}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Empty Attributes" enabled="true">
            <stringProp name="TestPlan.comments">Attempts to create a record with no attributes and asserts the expected error.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Empty Attributes - Create Storage Unit Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;storage-unit-type&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit-type</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 403 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;403&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Only User Group" enabled="true">
            <stringProp name="TestPlan.comments">Attempts to create a record without the required fields and asserts the expected error.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Only User Group - Create Storage Unit Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;storage-unit-type&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit-type</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 422 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;422&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Incorrect Type" enabled="true">
            <stringProp name="TestPlan.comments">Attempts to create a record with the incorrect type set and asserts the expected error.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Incorrect Type - Create Storage Unit Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;material-sample&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_1}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit-type</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 400 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;400&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Storage Unit Type" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Basic" enabled="true">
            <stringProp name="TestPlan.comments">Updates the basic record and asserts that all fields are set as intended.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Basic Storage Unit Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;storage-unit-type&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_3}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;isInseperable&quot;: ${isInseperable_3},&#xd;
      &quot;gridLayoutDefinition&quot;: ${gridLayoutDefinition_3}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit-type/${basic_storage_unit_type_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Update Basic" enabled="true">
              <stringProp name="TestPlan.comments">Retrieves the basic record that was updated and asserts all values are set as expected</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Update Basic - Retrieve Basic Storage Unit Type" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit-type/${basic_storage_unit_type_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Update Basic - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_3}&quot;
assert attr.isInseperable == ${isInseperable_3}
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Update Basic - Grid Layout Definition Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Asserting with groovy script appears to have issue so will assert gridLayoutDefinition here</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.gridLayoutDefinition</stringProp>
                  <stringProp name="EXPECTED_VALUE">${gridLayoutDefinition_3}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Verbose" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose record and asserts that all fields are set as intended</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Verbose Storage Unit Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;storage-unit-type&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_4}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;isInseperable&quot;: ${isInseperable_4},&#xd;
      &quot;gridLayoutDefinition&quot;: ${gridLayoutDefinition_4}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit-type/${verbose_storage_unit_type_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Update Verbose" enabled="true">
              <stringProp name="TestPlan.comments">Retrieves the verbose record that was updated and asserts all values are set as expected</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Update Verbose - Retrieve Verbose Storage Unit Type" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit-type/${verbose_storage_unit_type_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Update Verbose - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_4}&quot;
assert attr.isInseperable == ${isInseperable_4}
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Update Verbose - Grid Layout Definition Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Asserting with groovy script appears to have issue so will assert gridLayoutDefinition here</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.gridLayoutDefinition</stringProp>
                  <stringProp name="EXPECTED_VALUE">${gridLayoutDefinition_4}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Verbose - Empty Body" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose record while providing no fields to update and asserts that no changes were made.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Verbose Storage Unit Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;storage-unit-type&quot;,&#xd;
    &quot;attributes&quot;: {}&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit-type/${verbose_storage_unit_type_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Update Verbose - Empty Body" enabled="true">
              <stringProp name="TestPlan.comments">Retrieves the verbose record that was updated and asserts all values are set as expected.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Update Verbose - Empty Body - Retrieve Verbose Storage Unit Type" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit-type/${verbose_storage_unit_type_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Update Verbose - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_4}&quot;
assert attr.isInseperable == ${isInseperable_4}
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Update Verbose - Grid Layout Definition Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Asserting with groovy script appears to have issue so will assert gridLayoutDefinition here</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.gridLayoutDefinition</stringProp>
                  <stringProp name="EXPECTED_VALUE">${gridLayoutDefinition_4}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Invalid UUID" enabled="true">
            <stringProp name="TestPlan.comments">Attempts to update a record with an invalid UUID specified and asserts the expected error.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Invalid Storage Unit Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;storage-unit-type&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_3}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;isInseperable&quot;: ${isInseperable_3},&#xd;
      &quot;gridLayoutDefinition&quot;: ${gridLayoutDefinition_3}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit-type/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete Storage Unit Type" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete Basic" enabled="true">
            <stringProp name="TestPlan.comments">Deletes the basic record and asserts that the record was properly removed.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Basic Storage Unit Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit-type/${basic_storage_unit_type_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Delete Basic" enabled="true">
              <stringProp name="TestPlan.comments">Attempts to retrieve the deleted basic record and asserts that the correct response is returned.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Delete Basic - Retrieve Basic Storage Unit Type" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit-type/${basic_storage_unit_type_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 410 Error" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;410&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete Verbose" enabled="true">
            <stringProp name="TestPlan.comments">Deletes the verbose record and asserts that the record was properly removed.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Verbose Storage Unit Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit-type/${verbose_storage_unit_type_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Delete Verbose" enabled="true">
              <stringProp name="TestPlan.comments">Attempts to retrieve the deleted verbose record and asserts that the correct response is returned.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Delete Verbose - Retrieve Verbose Storage Unit Type" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit-type/${verbose_storage_unit_type_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 410 Error" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;410&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete Invalid UUID" enabled="true">
            <stringProp name="TestPlan.comments">Attempts to delete a record with an invalid UUID specified and asserts the expected error.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Invalid Storage Unit Type" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/storage-unit-type/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Form Template End2End Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">15</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">15</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="TestPlan.comments">Thread group for testing the &apos;form-template&apos; endpoint</stringProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Form Template Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="restrictToCreatedBy_1" elementType="Argument">
              <stringProp name="Argument.name">restrictToCreatedBy_1</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="restrictToCreatedBy_2" elementType="Argument">
              <stringProp name="Argument.name">restrictToCreatedBy_2</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="restrictToCreatedBy_3" elementType="Argument">
              <stringProp name="Argument.name">restrictToCreatedBy_3</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="restrictToCreatedBy_4" elementType="Argument">
              <stringProp name="Argument.name">restrictToCreatedBy_4</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="viewConfiguration_1" elementType="Argument">
              <stringProp name="Argument.name">viewConfiguration_1</stringProp>
              <stringProp name="Argument.value">{}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="viewConfiguration_2" elementType="Argument">
              <stringProp name="Argument.name">viewConfiguration_2</stringProp>
              <stringProp name="Argument.value">{&quot;type&quot;: &quot;material-sample-form-template&quot;}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="viewConfiguration_3" elementType="Argument">
              <stringProp name="Argument.name">viewConfiguration_3</stringProp>
              <stringProp name="Argument.value">{&quot;type&quot;: &quot;material-sample-form-template&quot;}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="viewConfiguration_4" elementType="Argument">
              <stringProp name="Argument.name">viewConfiguration_4</stringProp>
              <stringProp name="Argument.value">{&quot;type&quot;: &quot;material-sample-form-template&quot;}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="components_1" elementType="Argument">
              <stringProp name="Argument.name">components_1</stringProp>
              <stringProp name="Argument.value">[{}]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="components_2" elementType="Argument">
              <stringProp name="Argument.name">components_2</stringProp>
              <stringProp name="Argument.value">[{&quot;name&quot;:&quot;split-configuration-component&quot;,&quot;order&quot;:0,&quot;visible&quot;:false,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;split-configuration-condition-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;splitConfiguration.condition.conditionType&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;splitConfiguration.condition.materialSampleType&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;split-configuration-material-sample-name-generation-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;splitConfiguration.materialSampleNameGeneration.strategy&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;splitConfiguration.materialSampleNameGeneration.characterType&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;identifiers-component&quot;,&quot;order&quot;:1,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;general-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;group&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:&quot;aafc&quot;},{&quot;name&quot;:&quot;tags&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;projects&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;assemblages&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;publiclyReleasable&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;notPubliclyReleasableReason&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;identifiers-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;collection&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;materialSampleName&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:&quot;Elements&quot;},{&quot;name&quot;:&quot;useNextSequence&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcOtherCatalogNumbers&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;barcode&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;material-sample-info-component&quot;,&quot;order&quot;:2,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;material-sample-info-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;materialSampleType&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;materialSampleRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;materialSampleState&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;stateChangeRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;stateChangedOn&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;collecting-event-component&quot;,&quot;order&quot;:3,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;general-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;tags&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;publiclyReleasable&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;notPubliclyReleasableReason&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;identifiers-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;dwcFieldNumber&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;collecting-date-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;verbatimEventDateTime&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;startEventDateTime&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;endEventDateTime&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;collecting-agents-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;dwcRecordedBy&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;collectors&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcRecordNumber&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;verbatim-label-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;dwcVerbatimLocality&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimCoordinateSystem&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimCoordinates&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimLatitude&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimLongitude&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimSRS&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimElevation&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimDepth&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;collecting-event-details&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;habitat&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;host&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;collectionMethod&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;substrate&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcMinimumElevationInMeters&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcMaximumElevationInMeters&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcMinimumDepthInMeters&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcMaximumDepthInMeters&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;remarks&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;georeferencing-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcGeoreferenceVerificationStatus&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcDecimalLatitude&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcDecimalLongitude&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcCoordinateUncertaintyInMeters&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcGeoreferencedDate&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcGeodeticDatum&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].literalGeoreferencedBy&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].georeferencedBy&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcGeoreferenceProtocol&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcGeoreferenceSources&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcGeoreferenceRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:[{}]}]},{&quot;name&quot;:&quot;current-geographic-place&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;srcAdminLevels&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geographicPlaceNameSourceDetail.stateProvince&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geographicPlaceNameSourceDetail.country&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;collecting-event-field-extension-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;extensionValues&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;collecting-event-managed-attributes-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[]},{&quot;name&quot;:&quot;collecting-event-attachments-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;managedAttributes.attachmentsConfig.allowNew&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;managedAttributes.attachmentsConfig.allowExisting&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;preparations-component&quot;,&quot;order&quot;:4,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;general-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;preparationType&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationMethod&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preservationType&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationFixative&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationMaterials&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationSubstrate&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcDegreeOfEstablishment&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparedBy&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationDate&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationProtocol&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;organisms-component&quot;,&quot;order&quot;:5,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;organisms-general-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;organism[0].lifeStage&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].sex&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].remarks&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:[{}]}]},{&quot;name&quot;:&quot;organism-verbatim-determination-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;organism[0].determination[0].verbatimScientificName&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].verbatimDeterminer&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].verbatimDate&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].verbatimRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].transcriberRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;organism-determination-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;organism[0].determination[0].scientificName&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].scientificNameInput&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].determiner&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].determinedOn&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].determinationRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;organism-type-specimen-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;organism[0].determination[0].typeStatus&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].typeStatusEvidence&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;organism-managed-attributes-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[]}]},{&quot;name&quot;:&quot;associations-component&quot;,&quot;order&quot;:6,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;associations-host-organism-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;hostOrganism.name&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;hostOrganism.remarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;associations-material-sample-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;associations.associationType&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;associations.associatedSample&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;associations.remarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;storage-component&quot;,&quot;order&quot;:7,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;storage-selection-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;storageUnit&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;restriction-component&quot;,&quot;order&quot;:8,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;restriction-general-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;phac_animal_rg&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;cfia_ppc&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;phac_human_rg&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;phac_cl&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;isRestricted&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;restrictionRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;scheduled-actions-component&quot;,&quot;order&quot;:9,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;scheduled-actions-add-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;scheduledAction.actionType&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;scheduledAction.actionStatus&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;scheduledAction.date&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;scheduledAction.assignedTo&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;scheduledAction.remarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;field-extensions-component&quot;,&quot;order&quot;:10,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;field-extension-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;extensionValues&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;managed-attributes-component&quot;,&quot;order&quot;:11,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;managed-attributes-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;managedAttributes&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;managedAttributesOrder&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;material-sample-attachments-component&quot;,&quot;order&quot;:12,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;material-sample-attachments-sections&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;attachmentsConfig.allowNew&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;attachmentsConfig.allowExisting&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]}]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="components_3" elementType="Argument">
              <stringProp name="Argument.name">components_3</stringProp>
              <stringProp name="Argument.value">[{&quot;name&quot;:&quot;split-configuration-component&quot;,&quot;order&quot;:0,&quot;visible&quot;:false,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;split-configuration-condition-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;splitConfiguration.condition.conditionType&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;splitConfiguration.condition.materialSampleType&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;split-configuration-material-sample-name-generation-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;splitConfiguration.materialSampleNameGeneration.strategy&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;splitConfiguration.materialSampleNameGeneration.characterType&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;identifiers-component&quot;,&quot;order&quot;:1,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;general-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;group&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:&quot;aafc&quot;},{&quot;name&quot;:&quot;tags&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;projects&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;assemblages&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;publiclyReleasable&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;notPubliclyReleasableReason&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;identifiers-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;collection&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;materialSampleName&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;useNextSequence&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcOtherCatalogNumbers&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;barcode&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;material-sample-info-component&quot;,&quot;order&quot;:2,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;material-sample-info-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;materialSampleType&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;materialSampleRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;materialSampleState&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;stateChangeRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;stateChangedOn&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;collecting-event-component&quot;,&quot;order&quot;:3,&quot;visible&quot;:false,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;general-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;tags&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;publiclyReleasable&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;notPubliclyReleasableReason&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;identifiers-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;dwcFieldNumber&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;collecting-date-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;verbatimEventDateTime&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;startEventDateTime&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;endEventDateTime&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;collecting-agents-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;dwcRecordedBy&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;collectors&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcRecordNumber&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;verbatim-label-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;dwcVerbatimLocality&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimCoordinateSystem&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimCoordinates&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimLatitude&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimLongitude&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimSRS&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimElevation&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimDepth&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;collecting-event-details&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;habitat&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;host&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;collectionMethod&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;substrate&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcMinimumElevationInMeters&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcMaximumElevationInMeters&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcMinimumDepthInMeters&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcMaximumDepthInMeters&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;remarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;georeferencing-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcGeoreferenceVerificationStatus&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcDecimalLatitude&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcDecimalLongitude&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcCoordinateUncertaintyInMeters&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcGeoreferencedDate&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcGeodeticDatum&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].literalGeoreferencedBy&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].georeferencedBy&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcGeoreferenceProtocol&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcGeoreferenceSources&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcGeoreferenceRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;current-geographic-place&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;srcAdminLevels&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geographicPlaceNameSourceDetail.stateProvince&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geographicPlaceNameSourceDetail.country&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;collecting-event-field-extension-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;extensionValues&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;collecting-event-managed-attributes-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[]},{&quot;name&quot;:&quot;collecting-event-attachments-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;managedAttributes.attachmentsConfig.allowNew&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;managedAttributes.attachmentsConfig.allowExisting&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;preparations-component&quot;,&quot;order&quot;:4,&quot;visible&quot;:false,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;general-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;preparationType&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationMethod&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preservationType&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationFixative&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationMaterials&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationSubstrate&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcDegreeOfEstablishment&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparedBy&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationDate&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationProtocol&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;organisms-component&quot;,&quot;order&quot;:5,&quot;visible&quot;:false,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;organisms-general-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;organism[0].lifeStage&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].sex&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].remarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;organism-verbatim-determination-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;organism[0].determination[0].verbatimScientificName&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].verbatimDeterminer&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].verbatimDate&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].verbatimRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].transcriberRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;organism-determination-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;organism[0].determination[0].scientificName&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].scientificNameInput&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].determiner&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].determinedOn&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].determinationRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;organism-type-specimen-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;organism[0].determination[0].typeStatus&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].typeStatusEvidence&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;organism-managed-attributes-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[]}]},{&quot;name&quot;:&quot;associations-component&quot;,&quot;order&quot;:6,&quot;visible&quot;:false,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;associations-host-organism-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;hostOrganism.name&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;hostOrganism.remarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;associations-material-sample-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;associations.associationType&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;associations.associatedSample&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;associations.remarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;storage-component&quot;,&quot;order&quot;:7,&quot;visible&quot;:false,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;storage-selection-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;storageUnit&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;restriction-component&quot;,&quot;order&quot;:8,&quot;visible&quot;:false,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;restriction-general-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;phac_animal_rg&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;cfia_ppc&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;phac_human_rg&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;phac_cl&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;isRestricted&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;restrictionRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;scheduled-actions-component&quot;,&quot;order&quot;:9,&quot;visible&quot;:false,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;scheduled-actions-add-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;scheduledAction.actionType&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;scheduledAction.actionStatus&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;scheduledAction.date&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;scheduledAction.assignedTo&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;scheduledAction.remarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;field-extensions-component&quot;,&quot;order&quot;:10,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;field-extension-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;extensionValues&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;managed-attributes-component&quot;,&quot;order&quot;:11,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;managed-attributes-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;managedAttributes&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;managedAttributesOrder&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;material-sample-attachments-component&quot;,&quot;order&quot;:12,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;material-sample-attachments-sections&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;attachmentsConfig.allowNew&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;attachmentsConfig.allowExisting&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]}]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="components_4" elementType="Argument">
              <stringProp name="Argument.name">components_4</stringProp>
              <stringProp name="Argument.value">[{&quot;name&quot;:&quot;split-configuration-component&quot;,&quot;order&quot;:0,&quot;visible&quot;:false,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;split-configuration-condition-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;splitConfiguration.condition.conditionType&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;splitConfiguration.condition.materialSampleType&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;split-configuration-material-sample-name-generation-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;splitConfiguration.materialSampleNameGeneration.strategy&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;splitConfiguration.materialSampleNameGeneration.characterType&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;identifiers-component&quot;,&quot;order&quot;:1,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;general-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;group&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:&quot;aafc&quot;},{&quot;name&quot;:&quot;tags&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;projects&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;assemblages&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;publiclyReleasable&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;notPubliclyReleasableReason&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;identifiers-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;collection&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;materialSampleName&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;useNextSequence&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcOtherCatalogNumbers&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;barcode&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;material-sample-info-component&quot;,&quot;order&quot;:2,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;material-sample-info-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;materialSampleType&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;materialSampleRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;materialSampleState&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;stateChangeRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;stateChangedOn&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;collecting-event-component&quot;,&quot;order&quot;:3,&quot;visible&quot;:false,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;general-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;tags&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;publiclyReleasable&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;notPubliclyReleasableReason&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;identifiers-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;dwcFieldNumber&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;collecting-date-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;verbatimEventDateTime&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;startEventDateTime&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;endEventDateTime&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;collecting-agents-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;dwcRecordedBy&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;collectors&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcRecordNumber&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;verbatim-label-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;dwcVerbatimLocality&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimCoordinateSystem&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimCoordinates&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimLatitude&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimLongitude&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimSRS&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimElevation&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcVerbatimDepth&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;collecting-event-details&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;habitat&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;host&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;collectionMethod&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;substrate&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcMinimumElevationInMeters&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcMaximumElevationInMeters&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcMinimumDepthInMeters&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcMaximumDepthInMeters&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;remarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;georeferencing-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcGeoreferenceVerificationStatus&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcDecimalLatitude&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcDecimalLongitude&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcCoordinateUncertaintyInMeters&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcGeoreferencedDate&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcGeodeticDatum&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].literalGeoreferencedBy&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].georeferencedBy&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcGeoreferenceProtocol&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcGeoreferenceSources&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions[0].dwcGeoreferenceRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geoReferenceAssertions&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;current-geographic-place&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;srcAdminLevels&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geographicPlaceNameSourceDetail.stateProvince&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;geographicPlaceNameSourceDetail.country&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;collecting-event-field-extension-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;extensionValues&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;collecting-event-managed-attributes-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[]},{&quot;name&quot;:&quot;collecting-event-attachments-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;managedAttributes.attachmentsConfig.allowNew&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;managedAttributes.attachmentsConfig.allowExisting&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;preparations-component&quot;,&quot;order&quot;:4,&quot;visible&quot;:false,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;general-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;preparationType&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationMethod&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preservationType&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationFixative&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationMaterials&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationSubstrate&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;dwcDegreeOfEstablishment&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparedBy&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationDate&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;preparationProtocol&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;organisms-component&quot;,&quot;order&quot;:5,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;organisms-general-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;organism[0].lifeStage&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].sex&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].remarks&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:[{}]}]},{&quot;name&quot;:&quot;organism-verbatim-determination-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;organism[0].determination[0].verbatimScientificName&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].verbatimDeterminer&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].verbatimDate&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].verbatimRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].transcriberRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;organism-determination-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;organism[0].determination[0].scientificName&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].scientificNameInput&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].determiner&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].determinedOn&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].determinationRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;organism-type-specimen-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;organism[0].determination[0].typeStatus&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;organism[0].determination[0].typeStatusEvidence&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;organism-managed-attributes-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[]}]},{&quot;name&quot;:&quot;associations-component&quot;,&quot;order&quot;:6,&quot;visible&quot;:false,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;associations-host-organism-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;hostOrganism.name&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;hostOrganism.remarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]},{&quot;name&quot;:&quot;associations-material-sample-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;associations.associationType&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;associations.associatedSample&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;associations.remarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;storage-component&quot;,&quot;order&quot;:7,&quot;visible&quot;:false,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;storage-selection-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;storageUnit&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;restriction-component&quot;,&quot;order&quot;:8,&quot;visible&quot;:false,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;restriction-general-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;phac_animal_rg&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;cfia_ppc&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;phac_human_rg&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;phac_cl&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;isRestricted&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;restrictionRemarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;scheduled-actions-component&quot;,&quot;order&quot;:9,&quot;visible&quot;:false,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;scheduled-actions-add-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;scheduledAction.actionType&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;scheduledAction.actionStatus&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;scheduledAction.date&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;scheduledAction.assignedTo&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;scheduledAction.remarks&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;field-extensions-component&quot;,&quot;order&quot;:10,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;field-extension-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;extensionValues&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;managed-attributes-component&quot;,&quot;order&quot;:11,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;managed-attributes-section&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;managedAttributes&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;managedAttributesOrder&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]},{&quot;name&quot;:&quot;material-sample-attachments-component&quot;,&quot;order&quot;:12,&quot;visible&quot;:true,&quot;gridSizeX&quot;:null,&quot;sections&quot;:[{&quot;name&quot;:&quot;material-sample-attachments-sections&quot;,&quot;visible&quot;:true,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;items&quot;:[{&quot;name&quot;:&quot;attachmentsConfig.allowNew&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null},{&quot;name&quot;:&quot;attachmentsConfig.allowExisting&quot;,&quot;visible&quot;:false,&quot;gridPositionX&quot;:null,&quot;gridPositionY&quot;:null,&quot;defaultValue&quot;:null}]}]}]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Thread Group Request Headers" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__P(access_token)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/vnd.api+json</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">Required headers to perform API requests</stringProp>
        </HeaderManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Setup for Form Template" enabled="true"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Set Random Variables" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def ctx = org.apache.jmeter.threads.JMeterContextService.getContext()

ctx.getVariables().put(&quot;name_1&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_2&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_3&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;name_4&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Token Controller" enabled="true">
            <stringProp name="TestPlan.comments">Runs the Token Controller in the setUp thread group to refresh the access token</stringProp>
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="742131162">Retrieve Auth Token - setUp Thread Group</stringProp>
              <stringProp name="52452451">Token Controller</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Form Template" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Basic" enabled="true">
            <stringProp name="TestPlan.comments">Creates the basic record and asserts that all fields are set as intended.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Basic Form Template" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;form-template&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_1}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;restrictToCreatedBy&quot;: ${restrictToCreatedBy_1},&#xd;
      &quot;viewConfiguration&quot;: ${viewConfiguration_1}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/form-template</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Basic Form Template UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">basic_form-template_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Create Basic" enabled="true">
              <stringProp name="TestPlan.comments">Retrieves the basic record that was created and asserts all values are set as expected.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Create Basic - Retrieve Basic Form Template" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/form-template/${basic_form-template_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Create Basic - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_1}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Verbose" enabled="true">
            <stringProp name="TestPlan.comments">Creates the verbose record and asserts that all fields are set as intended.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Verbose Form Template" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;form-template&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_2}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;restrictToCreatedBy&quot;: ${restrictToCreatedBy_2},&#xd;
      &quot;viewConfiguration&quot;: ${viewConfiguration_2},&#xd;
      &quot;components&quot;: ${components_2}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/form-template</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Basic Form Template UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">verbose_form-template_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Create Verbose" enabled="true">
              <stringProp name="TestPlan.comments">Retrieves the verbose record that was created and asserts all values are set as expected.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Create Verbose - Retrieve Verbose Form Template" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/form-template/${verbose_form-template_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Create Verbose - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_2}&quot;
assert attr.restrictToCreatedBy == ${restrictToCreatedBy_2}
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Create Verbose - View Configuration Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Asserting with groovy script appears to have issue so will assert viewConfiguration here</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.viewConfiguration</stringProp>
                  <stringProp name="EXPECTED_VALUE">${viewConfiguration_2}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Create Verbose - Components Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Asserting with groovy script appears to have issue so will assert components here - Expectd Value represents an empty object</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.components</stringProp>
                  <stringProp name="EXPECTED_VALUE">${components_2}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Empty Attributes" enabled="true">
            <stringProp name="TestPlan.comments">Attempts to create a record with no attributes and asserts the expected error.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Empty Attributes - Create Form Template" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;form-template&quot;,&#xd;
    &quot;attributes&quot;: {}&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/form-template</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 422 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;422&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Only User Group" enabled="true">
            <stringProp name="TestPlan.comments">Attempts to create a record without the required fields and asserts the expected error.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Only User Group - Create Form Template" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;form-template&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/form-template</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 422 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;422&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Incorrect Type" enabled="true">
            <stringProp name="TestPlan.comments">Attempts to create a record with the incorrect type set and asserts the expected error.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Incorrect Type - Create Form Template" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;material-sample&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_1}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;restrictToCreatedBy&quot;: ${restrictToCreatedBy_1},&#xd;
      &quot;viewConfiguration&quot;: ${viewConfiguration_1}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/form-template</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 400 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;400&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Form Template" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Basic" enabled="true">
            <stringProp name="TestPlan.comments">Updates the basic record and asserts that all fields are set as intended.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Basic Form Template" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;form-template&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_3}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;restrictToCreatedBy&quot;: ${restrictToCreatedBy_3},&#xd;
      &quot;viewConfiguration&quot;: ${viewConfiguration_3},&#xd;
      &quot;components&quot;: ${components_3}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/form-template/${basic_form-template_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Update Basic" enabled="true">
              <stringProp name="TestPlan.comments">Retrieves the basic record that was updated and asserts all values are set as expected</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Update Basic - Retrieve Basic Form Template" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/form-template/${basic_form-template_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Update Basic - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_3}&quot;
assert attr.restrictToCreatedBy == ${restrictToCreatedBy_3}
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Update Basic - View Configuration Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Asserting with groovy script appears to have issue so will assert viewConfiguration here</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.viewConfiguration</stringProp>
                  <stringProp name="EXPECTED_VALUE">${viewConfiguration_3}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Update Basic - Components Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Asserting with groovy script appears to have issue so will assert components here - Expectd Value represents an empty object</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.components</stringProp>
                  <stringProp name="EXPECTED_VALUE">${components_3}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Verbose" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose record and asserts that all fields are set as intended.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Verbose Form Template" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;form-template&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_4}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;restrictToCreatedBy&quot;: ${restrictToCreatedBy_4},&#xd;
      &quot;viewConfiguration&quot;: ${viewConfiguration_4},&#xd;
      &quot;components&quot;: ${components_4}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/form-template/${verbose_form-template_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Update Verbsoe" enabled="true">
              <stringProp name="TestPlan.comments">Retrieves the verbose record that was updated and asserts all values are set as expected</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Update Verbose - Retrieve Verbose Form Template" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/form-template/${verbose_form-template_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Update Verbose - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_4}&quot;
assert attr.restrictToCreatedBy == ${restrictToCreatedBy_4}
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Update Verbose - View Configuration Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Asserting with groovy script appears to have issue so will assert viewConfiguration here</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.viewConfiguration</stringProp>
                  <stringProp name="EXPECTED_VALUE">${viewConfiguration_4}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Update Verbose - Components Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Asserting with groovy script appears to have issue so will assert components here - Expectd Value represents an empty object</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.components</stringProp>
                  <stringProp name="EXPECTED_VALUE">${components_4}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Verbose - Empty Body" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose record while providing no fields to update and asserts that no changes were made.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Verbose Form Template" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;form-template&quot;,&#xd;
    &quot;attributes&quot;: {}&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/form-template/${verbose_form-template_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Update Verbose - Empty Body" enabled="true">
              <stringProp name="TestPlan.comments">Retrieves the verbose record that was updated and asserts all values are set as expected.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Update Verbose - Emtpy Body - Retrieve Verbose Form Template" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/form-template/${verbose_form-template_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Update Verbose - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.name == &quot;${name_4}&quot;
assert attr.restrictToCreatedBy == ${restrictToCreatedBy_4}
assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Update Verbose - View Configuration Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Asserting with groovy script appears to have issue so will assert viewConfiguration here</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.viewConfiguration</stringProp>
                  <stringProp name="EXPECTED_VALUE">${viewConfiguration_4}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Update Verbose - Components Assertion" enabled="true">
                  <stringProp name="TestPlan.comments">Asserting with groovy script appears to have issue so will assert components here - Expectd Value represents an empty object</stringProp>
                  <stringProp name="JSON_PATH">$.data.attributes.components</stringProp>
                  <stringProp name="EXPECTED_VALUE">${components_4}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Invalid UUID" enabled="true">
            <stringProp name="TestPlan.comments">Attempts to update a record with an invalid UUID specified and asserts the expected error.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Invalid Form Template" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;form-template&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;name&quot;: &quot;${name_3}&quot;,&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;restrictToCreatedBy&quot;: ${restrictToCreatedBy_3},&#xd;
      &quot;viewConfiguration&quot;: ${viewConfiguration_3},&#xd;
      &quot;components&quot;: ${components_3}&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/form-template/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete Form Template" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete Basic" enabled="true">
            <stringProp name="TestPlan.comments">Deletes the basic record and asserts that the record was properly removed.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Basic Form Template" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/form-template/${basic_form-template_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Delete Basic" enabled="true">
              <stringProp name="TestPlan.comments">Attempts to retrieve the deleted basic record and asserts that the correct response is returned.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Delete Basic - Retrieve Basic Form Template" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/form-template/${basic_form-template_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete Verbose" enabled="true">
            <stringProp name="TestPlan.comments">Deletes the verbose record and asserts that the record was properly removed.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Verbose Form Template" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/form-template/${verbose_form-template_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Delete Verbose" enabled="true">
              <stringProp name="TestPlan.comments">Attempts to retrieve the deleted verbose record and asserts that the correct response is returned.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Delete Verbose - Retrieve Verbose Form Template" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/form-template/${verbose_form-template_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete Invalid UUID" enabled="true">
            <stringProp name="TestPlan.comments">Attempts to delete a record with an invalid UUID specified and asserts the expected error.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Invalid Form Template" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/form-template/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Organism End2End Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">15</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">15</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="TestPlan.comments">Thread group for testing the &apos;organism</stringProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Organism Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="isTarget_1" elementType="Argument">
              <stringProp name="Argument.name">isTarget_1</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="isTarget_2" elementType="Argument">
              <stringProp name="Argument.name">isTarget_2</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="isTarget_3" elementType="Argument">
              <stringProp name="Argument.name">isTarget_3</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="isTarget_4" elementType="Argument">
              <stringProp name="Argument.name">isTarget_4</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="lifeStage_1" elementType="Argument">
              <stringProp name="Argument.name">lifeStage_1</stringProp>
              <stringProp name="Argument.value">lifeStage_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="lifeStage_2" elementType="Argument">
              <stringProp name="Argument.name">lifeStage_2</stringProp>
              <stringProp name="Argument.value">lifeStage_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="lifeStage_3" elementType="Argument">
              <stringProp name="Argument.name">lifeStage_3</stringProp>
              <stringProp name="Argument.value">lifeStage_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="lifeStage_4" elementType="Argument">
              <stringProp name="Argument.name">lifeStage_4</stringProp>
              <stringProp name="Argument.value">lifeStage_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="sex_1" elementType="Argument">
              <stringProp name="Argument.name">sex_1</stringProp>
              <stringProp name="Argument.value">sex_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="sex_2" elementType="Argument">
              <stringProp name="Argument.name">sex_2</stringProp>
              <stringProp name="Argument.value">sex_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="sex_3" elementType="Argument">
              <stringProp name="Argument.name">sex_3</stringProp>
              <stringProp name="Argument.value">sex_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="sex_4" elementType="Argument">
              <stringProp name="Argument.name">sex_4</stringProp>
              <stringProp name="Argument.value">sex_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="remarks_1" elementType="Argument">
              <stringProp name="Argument.name">remarks_1</stringProp>
              <stringProp name="Argument.value">remarks_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="remarks_2" elementType="Argument">
              <stringProp name="Argument.name">remarks_2</stringProp>
              <stringProp name="Argument.value">remarks_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="remarks_3" elementType="Argument">
              <stringProp name="Argument.name">remarks_3</stringProp>
              <stringProp name="Argument.value">remarks_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="remarks_4" elementType="Argument">
              <stringProp name="Argument.name">remarks_4</stringProp>
              <stringProp name="Argument.value">remarks_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_verbatimScientificName_1" elementType="Argument">
              <stringProp name="Argument.name">determination_verbatimScientificName_1</stringProp>
              <stringProp name="Argument.value">verbatimScientificName_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_verbatimScientificName_2" elementType="Argument">
              <stringProp name="Argument.name">determination_verbatimScientificName_2</stringProp>
              <stringProp name="Argument.value">verbatimScientificName_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_verbatimScientificName_3" elementType="Argument">
              <stringProp name="Argument.name">determination_verbatimScientificName_3</stringProp>
              <stringProp name="Argument.value">verbatimScientificName_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_verbatimScientificName_4" elementType="Argument">
              <stringProp name="Argument.name">determination_verbatimScientificName_4</stringProp>
              <stringProp name="Argument.value">verbatimScientificName_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_verbatimDeterminer_1" elementType="Argument">
              <stringProp name="Argument.name">determination_verbatimDeterminer_1</stringProp>
              <stringProp name="Argument.value">verbatimDeterminer_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_verbatimDeterminer_2" elementType="Argument">
              <stringProp name="Argument.name">determination_verbatimDeterminer_2</stringProp>
              <stringProp name="Argument.value">verbatimDeterminer_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_verbatimDeterminer_3" elementType="Argument">
              <stringProp name="Argument.name">determination_verbatimDeterminer_3</stringProp>
              <stringProp name="Argument.value">verbatimDeterminer_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_verbatimDeterminer_4" elementType="Argument">
              <stringProp name="Argument.name">determination_verbatimDeterminer_4</stringProp>
              <stringProp name="Argument.value">verbatimDeterminer_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_verbatimDate_1" elementType="Argument">
              <stringProp name="Argument.name">determination_verbatimDate_1</stringProp>
              <stringProp name="Argument.value">2019-02-06</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_verbatimDate_2" elementType="Argument">
              <stringProp name="Argument.name">determination_verbatimDate_2</stringProp>
              <stringProp name="Argument.value">2020-02-06</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_verbatimDate_3" elementType="Argument">
              <stringProp name="Argument.name">determination_verbatimDate_3</stringProp>
              <stringProp name="Argument.value">2021-02-06</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_verbatimDate_4" elementType="Argument">
              <stringProp name="Argument.name">determination_verbatimDate_4</stringProp>
              <stringProp name="Argument.value">2022-02-06</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_transcriberRemarks_1" elementType="Argument">
              <stringProp name="Argument.name">determination_transcriberRemarks_1</stringProp>
              <stringProp name="Argument.value">transcriberRemarks_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_transcriberRemarks_2" elementType="Argument">
              <stringProp name="Argument.name">determination_transcriberRemarks_2</stringProp>
              <stringProp name="Argument.value">transcriberRemarks_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_transcriberRemarks_3" elementType="Argument">
              <stringProp name="Argument.name">determination_transcriberRemarks_3</stringProp>
              <stringProp name="Argument.value">transcriberRemarks_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_transcriberRemarks_4" elementType="Argument">
              <stringProp name="Argument.name">determination_transcriberRemarks_4</stringProp>
              <stringProp name="Argument.value">transcriberRemarks_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_verbatimRemarks_1" elementType="Argument">
              <stringProp name="Argument.name">determination_verbatimRemarks_1</stringProp>
              <stringProp name="Argument.value">verbatimRemarks_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_verbatimRemarks_2" elementType="Argument">
              <stringProp name="Argument.name">determination_verbatimRemarks_2</stringProp>
              <stringProp name="Argument.value">verbatimRemarks_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_verbatimRemarks_3" elementType="Argument">
              <stringProp name="Argument.name">determination_verbatimRemarks_3</stringProp>
              <stringProp name="Argument.value">verbatimRemarks_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_verbatimRemarks_4" elementType="Argument">
              <stringProp name="Argument.name">determination_verbatimRemarks_4</stringProp>
              <stringProp name="Argument.value">verbatimRemarks_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_determinationRemarks_1" elementType="Argument">
              <stringProp name="Argument.name">determination_determinationRemarks_1</stringProp>
              <stringProp name="Argument.value">determinationRemarks_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_determinationRemarks_2" elementType="Argument">
              <stringProp name="Argument.name">determination_determinationRemarks_2</stringProp>
              <stringProp name="Argument.value">determinationRemarks_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_determinationRemarks_3" elementType="Argument">
              <stringProp name="Argument.name">determination_determinationRemarks_3</stringProp>
              <stringProp name="Argument.value">determinationRemarks_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_determinationRemarks_4" elementType="Argument">
              <stringProp name="Argument.name">determination_determinationRemarks_4</stringProp>
              <stringProp name="Argument.value">determinationRemarks_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_typeStatus_1" elementType="Argument">
              <stringProp name="Argument.name">determination_typeStatus_1</stringProp>
              <stringProp name="Argument.value">typeStatus_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_typeStatus_2" elementType="Argument">
              <stringProp name="Argument.name">determination_typeStatus_2</stringProp>
              <stringProp name="Argument.value">typeStatus_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_typeStatus_3" elementType="Argument">
              <stringProp name="Argument.name">determination_typeStatus_3</stringProp>
              <stringProp name="Argument.value">typeStatus_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_typeStatus_4" elementType="Argument">
              <stringProp name="Argument.name">determination_typeStatus_4</stringProp>
              <stringProp name="Argument.value">typeStatus_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_typeStatusEvidence_1" elementType="Argument">
              <stringProp name="Argument.name">determination_typeStatusEvidence_1</stringProp>
              <stringProp name="Argument.value">typeStatusEvidence_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_typeStatusEvidence_2" elementType="Argument">
              <stringProp name="Argument.name">determination_typeStatusEvidence_2</stringProp>
              <stringProp name="Argument.value">typeStatusEvidence_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_typeStatusEvidence_3" elementType="Argument">
              <stringProp name="Argument.name">determination_typeStatusEvidence_3</stringProp>
              <stringProp name="Argument.value">typeStatusEvidence_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_typeStatusEvidence_4" elementType="Argument">
              <stringProp name="Argument.name">determination_typeStatusEvidence_4</stringProp>
              <stringProp name="Argument.value">typeStatusEvidence_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_determiner_1" elementType="Argument">
              <stringProp name="Argument.name">determination_determiner_1</stringProp>
              <stringProp name="Argument.value">[]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_determiner_2" elementType="Argument">
              <stringProp name="Argument.name">determination_determiner_2</stringProp>
              <stringProp name="Argument.value">[&quot;123e4567-e89b-12d3-a456-426614174000&quot;]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_determiner_3" elementType="Argument">
              <stringProp name="Argument.name">determination_determiner_3</stringProp>
              <stringProp name="Argument.value">[&quot;123e4567-e89b-12d3-a456-426614174000&quot;, &quot;123e4567-e89b-12d3-a456-426614174001&quot;]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_determiner_4" elementType="Argument">
              <stringProp name="Argument.name">determination_determiner_4</stringProp>
              <stringProp name="Argument.value">[&quot;123e4567-e89b-12d3-a456-426614174000&quot;, &quot;123e4567-e89b-12d3-a456-426614174001&quot;, &quot;123e4567-e89b-12d3-a456-426614174002&quot;]</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_determinedOn_1" elementType="Argument">
              <stringProp name="Argument.name">determination_determinedOn_1</stringProp>
              <stringProp name="Argument.value">2001-02-06</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_determinedOn_2" elementType="Argument">
              <stringProp name="Argument.name">determination_determinedOn_2</stringProp>
              <stringProp name="Argument.value">2001-02-06</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_determinedOn_3" elementType="Argument">
              <stringProp name="Argument.name">determination_determinedOn_3</stringProp>
              <stringProp name="Argument.value">2001-02-06</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_determinedOn_4" elementType="Argument">
              <stringProp name="Argument.name">determination_determinedOn_4</stringProp>
              <stringProp name="Argument.value">2001-02-06</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_qualifier_1" elementType="Argument">
              <stringProp name="Argument.name">determination_qualifier_1</stringProp>
              <stringProp name="Argument.value">qualifier_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_qualifier_2" elementType="Argument">
              <stringProp name="Argument.name">determination_qualifier_2</stringProp>
              <stringProp name="Argument.value">qualifier_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_qualifier_3" elementType="Argument">
              <stringProp name="Argument.name">determination_qualifier_3</stringProp>
              <stringProp name="Argument.value">qualifier_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_qualifier_4" elementType="Argument">
              <stringProp name="Argument.name">determination_qualifier_4</stringProp>
              <stringProp name="Argument.value">qualifier_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameSource_1" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameSource_1</stringProp>
              <stringProp name="Argument.value">null </stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameSource_2" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameSource_2</stringProp>
              <stringProp name="Argument.value">GNA</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameSource_3" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameSource_3</stringProp>
              <stringProp name="Argument.value">CUSTOM</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameSource_4" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameSource_4</stringProp>
              <stringProp name="Argument.value">COLPLUS</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_isPrimary_1" elementType="Argument">
              <stringProp name="Argument.name">determination_isPrimary_1</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_isPrimary_2" elementType="Argument">
              <stringProp name="Argument.name">determination_isPrimary_2</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_isPrimary_3" elementType="Argument">
              <stringProp name="Argument.name">determination_isPrimary_3</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_isPrimary_4" elementType="Argument">
              <stringProp name="Argument.name">determination_isPrimary_4</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_isFiledAs_1" elementType="Argument">
              <stringProp name="Argument.name">determination_isFiledAs_1</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_isFiledAs_2" elementType="Argument">
              <stringProp name="Argument.name">determination_isFiledAs_2</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_isFiledAs_3" elementType="Argument">
              <stringProp name="Argument.name">determination_isFiledAs_3</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_isFiledAs_4" elementType="Argument">
              <stringProp name="Argument.name">determination_isFiledAs_4</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_labelHtml_1" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_labelHtml_1</stringProp>
              <stringProp name="Argument.value">labelHtml_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_labelHtml_2" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_labelHtml_2</stringProp>
              <stringProp name="Argument.value">labelHtml_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_labelHtml_3" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_labelHtml_3</stringProp>
              <stringProp name="Argument.value">labelHtml_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_labelHtml_4" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_labelHtml_4</stringProp>
              <stringProp name="Argument.value">labelHtml_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_classificationPath_1" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_classificationPath_1</stringProp>
              <stringProp name="Argument.value">classificationPath_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_classificationPath_2" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_classificationPath_2</stringProp>
              <stringProp name="Argument.value">classificationPath_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_classificationPath_3" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_classificationPath_3</stringProp>
              <stringProp name="Argument.value">classificationPath_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_classificationPath_4" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_classificationPath_4</stringProp>
              <stringProp name="Argument.value">classificationPath_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_classificationRanks_1" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_classificationRanks_1</stringProp>
              <stringProp name="Argument.value">classificationRanks_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_classificationRanks_2" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_classificationRanks_2</stringProp>
              <stringProp name="Argument.value">classificationRanks_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_classificationRanks_3" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_classificationRanks_3</stringProp>
              <stringProp name="Argument.value">classificationRanks_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_classificationRanks_4" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_classificationRanks_4</stringProp>
              <stringProp name="Argument.value">classificationRanks_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_sourceUrl_1" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_sourceUrl_1</stringProp>
              <stringProp name="Argument.value">http://example_1.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_sourceUrl_2" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_sourceUrl_2</stringProp>
              <stringProp name="Argument.value">http://example_2.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_sourceUrl_3" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_sourceUrl_3</stringProp>
              <stringProp name="Argument.value">http://example_3.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_sourceUrl_4" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_sourceUrl_4</stringProp>
              <stringProp name="Argument.value">http://example_4.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_recordedOn_1" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_recordedOn_1</stringProp>
              <stringProp name="Argument.value">2011-02-06</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_recordedOn_2" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_recordedOn_2</stringProp>
              <stringProp name="Argument.value">2012-02-06</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_recordedOn_3" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_recordedOn_3</stringProp>
              <stringProp name="Argument.value">2013-02-06</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_recordedOn_4" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_recordedOn_4</stringProp>
              <stringProp name="Argument.value">2014-02-06</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_currentName_1" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_currentName_1</stringProp>
              <stringProp name="Argument.value">currentName_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_currentName_2" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_currentName_2</stringProp>
              <stringProp name="Argument.value">currentName_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_currentName_3" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_currentName_3</stringProp>
              <stringProp name="Argument.value">currentName_3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_currentName_4" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_currentName_4</stringProp>
              <stringProp name="Argument.value">currentName_4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_isSynonym_1" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_isSynonym_1</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_isSynonym_2" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_isSynonym_2</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_isSynonym_3" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_isSynonym_3</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="determination_scientificNameDetails_isSynonym_4" elementType="Argument">
              <stringProp name="Argument.name">determination_scientificNameDetails_isSynonym_4</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Thread Group Request Headers" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${__P(access_token)}</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/vnd.api+json</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">Required headers to perform API requests</stringProp>
        </HeaderManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Setup for Organism" enabled="true"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Set Random Variables" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def ctx = org.apache.jmeter.threads.JMeterContextService.getContext()

ctx.getVariables().put(&quot;determination_scientificName_1&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;determination_scientificName_2&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;determination_scientificName_3&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;determination_scientificName_4&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)

ctx.getVariables().put(&quot;determination_verbatimScientificName_1&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;determination_verbatimScientificName_2&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;determination_verbatimScientificName_3&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)
ctx.getVariables().put(&quot;determination_verbatimScientificName_4&quot;, &quot;${__RandomString(12,abcdefghijklmnopqrstuvwxyz,)}&quot;)</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Module Token Controller" enabled="true">
            <stringProp name="TestPlan.comments">Runs the Token Controller in the setUp thread group to refresh the access token</stringProp>
            <collectionProp name="ModuleController.node_path">
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="764597751">Test Plan</stringProp>
              <stringProp name="742131162">Retrieve Auth Token - setUp Thread Group</stringProp>
              <stringProp name="52452451">Token Controller</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Organism" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Basic" enabled="true">
            <stringProp name="TestPlan.comments">Creates the basic record and asserts that all fields are set as intended.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Basic Organism" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;organism&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/organism</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Basic Organism UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">basic_organism_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Create Basic" enabled="true">
              <stringProp name="TestPlan.comments">Retrieves the basic record that was created and asserts all values are set as expected.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Create Basic - Retrieve Basic Organism" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/organism/${basic_organism_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Create Basic - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.group == &quot;${user_group}&quot;</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Verbose" enabled="true">
            <stringProp name="TestPlan.comments">Creates the verbose record and asserts that all fields are set as intended.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Create Verbose Organism" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;organism&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;isTarget&quot;: ${isTarget_2},&#xd;
      &quot;lifeStage&quot;: &quot;${lifeStage_2}&quot;,&#xd;
      &quot;sex&quot;: &quot;${sex_2}&quot;,&#xd;
      &quot;remarks&quot;: &quot;${remarks_2}&quot;,&#xd;
      &quot;determination&quot;: [&#xd;
	      {&#xd;
	      	&quot;verbatimScientificName&quot;: &quot;${determination_verbatimScientificName_2}&quot;,&#xd;
	      	&quot;verbatimDeterminer&quot;: &quot;${determination_verbatimDeterminer_2}&quot;,&#xd;
	      	&quot;verbatimDate&quot;: &quot;${determination_verbatimDate_2}&quot;,&#xd;
	      	&quot;scientificName&quot;: &quot;${determination_scientificName_2}&quot;,&#xd;
	      	&quot;transcriberRemarks&quot;: &quot;${determination_transcriberRemarks_2}&quot;,&#xd;
	      	&quot;verbatimRemarks&quot;: &quot;${determination_verbatimRemarks_2}&quot;,&#xd;
	      	&quot;determinationRemarks&quot;: &quot;${determination_determinationRemarks_2}&quot;,&#xd;
	      	&quot;typeStatus&quot;: &quot;${determination_typeStatus_2}&quot;,&#xd;
	      	&quot;typeStatusEvidence&quot;: &quot;${determination_typeStatusEvidence_2}&quot;,&#xd;
	      	&quot;determiner&quot;: ${determination_determiner_2},&#xd;
	      	&quot;determinedOn&quot;: &quot;${determination_determinedOn_2}&quot;,&#xd;
	      	&quot;qualifier&quot;: &quot;${determination_qualifier_2}&quot;,&#xd;
	      	&quot;scientificNameSource&quot;: &quot;${determination_scientificNameSource_2}&quot;,&#xd;
	      	&quot;scientificNameDetails&quot;: {&#xd;
	      		&quot;classificationPath&quot;: &quot;${determination_scientificNameDetails_classificationPath_2}&quot;,&#xd;
	      		&quot;classificationRanks&quot;: &quot;${determination_scientificNameDetails_classificationRanks_2}&quot;,&#xd;
	      		&quot;sourceUrl&quot;: &quot;${determination_scientificNameDetails_sourceUrl_2}&quot;,&#xd;
	      		&quot;labelHtml&quot;: &quot;${determination_scientificNameDetails_labelHtml_2}&quot;,&#xd;
	      		&quot;recordedOn&quot;: &quot;${determination_scientificNameDetails_recordedOn_2}&quot;,&#xd;
	      		&quot;currentName&quot;: &quot;${determination_scientificNameDetails_currentName_2}&quot;,&#xd;
	      		&quot;isSynonym&quot;: ${determination_scientificNameDetails_isSynonym_2}&#xd;
	      	},&#xd;
	      	&quot;isPrimary&quot;: ${determination_isPrimary_2},&#xd;
	      	&quot;isFiledAs&quot;: ${determination_isFiledAs_2}&#xd;
	      }&#xd;
      ]&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/organism</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 201" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Verbose Organism UUID Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">verbose_organism_uuid</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Create Verbose" enabled="true">
              <stringProp name="TestPlan.comments">Retrieves the verbose record that was created and asserts all values are set as expected.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Create Verbose - Retrieve Verbose Organism" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/organism/${verbose_organism_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Create Verbose - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.group == &quot;${user_group}&quot;
assert attr.isTarget == ${isTarget_2}
assert attr.lifeStage == &quot;${lifeStage_2}&quot;
assert attr.sex == &quot;${sex_2}&quot;
assert attr.remarks == &quot;${remarks_2}&quot;
assert attr.determination[0].verbatimScientificName  == &quot;${determination_verbatimScientificName_2}&quot;
assert attr.determination[0].verbatimDeterminer == &quot;${determination_verbatimDeterminer_2}&quot;
assert attr.determination[0].verbatimDate == &quot;${determination_verbatimDate_2}&quot;
assert attr.determination[0].scientificName == &quot;${determination_scientificName_2}&quot;
assert attr.determination[0].transcriberRemarks == &quot;${determination_transcriberRemarks_2}&quot;
assert attr.determination[0].verbatimRemarks == &quot;${determination_verbatimRemarks_2}&quot;
assert attr.determination[0].determinationRemarks == &quot;${determination_determinationRemarks_2}&quot;
assert attr.determination[0].typeStatus == &quot;${determination_typeStatus_2}&quot;
assert attr.determination[0].typeStatusEvidence == &quot;${determination_typeStatusEvidence_2}&quot;
assert attr.determination[0].determiner == ${determination_determiner_2}
assert attr.determination[0].determinedOn == &quot;${determination_determinedOn_2}&quot;
assert attr.determination[0].qualifier == &quot;${determination_qualifier_2}&quot;
assert attr.determination[0].scientificNameSource == &quot;${determination_scientificNameSource_2}&quot;
assert attr.determination[0].scientificNameDetails.classificationPath == &quot;${determination_scientificNameDetails_classificationPath_2}&quot;
assert attr.determination[0].scientificNameDetails.classificationRanks == &quot;${determination_scientificNameDetails_classificationRanks_2}&quot;
assert attr.determination[0].scientificNameDetails.sourceUrl == &quot;${determination_scientificNameDetails_sourceUrl_2}&quot;
assert attr.determination[0].scientificNameDetails.labelHtml == &quot;${determination_scientificNameDetails_labelHtml_2}&quot;
assert attr.determination[0].scientificNameDetails.recordedOn == &quot;${determination_scientificNameDetails_recordedOn_2}&quot;
assert attr.determination[0].scientificNameDetails.currentName == &quot;${determination_scientificNameDetails_currentName_2}&quot;
assert attr.determination[0].scientificNameDetails.isSynonym == ${determination_scientificNameDetails_isSynonym_2}
assert attr.determination[0].isPrimary == true // Should automaticlly become true as it is only determination
assert attr.determination[0].isFiledAs == ${determination_isFiledAs_2}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Empty Attributes" enabled="true">
            <stringProp name="TestPlan.comments">Attempts to create a record with no attributes and asserts the expected error.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Empty Attributes - Create Organism" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;organism&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/organism</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 403 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;403&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Incorrect Type" enabled="true">
            <stringProp name="TestPlan.comments">Attempts to create a record with the incorrect type set and asserts the expected error.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST - Incorrect Type - Create Organism" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;material-sample&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/organism</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 400 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;400&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Organism" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Basic" enabled="true">
            <stringProp name="TestPlan.comments">Updates the basic record and asserts that all fields are set as intended.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Basic Organism" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;organism&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;isTarget&quot;: ${isTarget_3},&#xd;
      &quot;lifeStage&quot;: &quot;${lifeStage_3}&quot;,&#xd;
      &quot;sex&quot;: &quot;${sex_3}&quot;,&#xd;
      &quot;remarks&quot;: &quot;${remarks_3}&quot;,&#xd;
      &quot;determination&quot;: [&#xd;
	      {&#xd;
	      	&quot;verbatimScientificName&quot;: &quot;${determination_verbatimScientificName_3}&quot;,&#xd;
	      	&quot;verbatimDeterminer&quot;: &quot;${determination_verbatimDeterminer_3}&quot;,&#xd;
	      	&quot;verbatimDate&quot;: &quot;${determination_verbatimDate_3}&quot;,&#xd;
	      	&quot;transcriberRemarks&quot;: &quot;${determination_transcriberRemarks_3}&quot;,&#xd;
	      	&quot;verbatimRemarks&quot;: &quot;${determination_verbatimRemarks_3}&quot;,&#xd;
	      	&quot;determinationRemarks&quot;: &quot;${determination_determinationRemarks_3}&quot;,&#xd;
	      	&quot;typeStatus&quot;: &quot;${determination_typeStatus_3}&quot;,&#xd;
	      	&quot;typeStatusEvidence&quot;: &quot;${determination_typeStatusEvidence_3}&quot;,&#xd;
	      	&quot;determiner&quot;: ${determination_determiner_3},&#xd;
	      	&quot;determinedOn&quot;: &quot;${determination_determinedOn_3}&quot;,&#xd;
	      	&quot;qualifier&quot;: &quot;${determination_qualifier_3}&quot;,&#xd;
	      	&quot;scientificNameSource&quot;: &quot;${determination_scientificNameSource_3}&quot;,&#xd;
	      	&quot;scientificNameDetails&quot;: {&#xd;
	      		&quot;classificationPath&quot;: &quot;${determination_scientificNameDetails_classificationPath_3}&quot;,&#xd;
	      		&quot;classificationRanks&quot;: &quot;${determination_scientificNameDetails_classificationRanks_3}&quot;,&#xd;
	      		&quot;sourceUrl&quot;: &quot;${determination_scientificNameDetails_sourceUrl_3}&quot;,&#xd;
	      		&quot;labelHtml&quot;: &quot;${determination_scientificNameDetails_labelHtml_3}&quot;,&#xd;
	      		&quot;recordedOn&quot;: &quot;${determination_scientificNameDetails_recordedOn_3}&quot;,&#xd;
	      		&quot;currentName&quot;: &quot;${determination_scientificNameDetails_currentName_3}&quot;,&#xd;
	      		&quot;isSynonym&quot;: ${determination_scientificNameDetails_isSynonym_3}&#xd;
	      	},&#xd;
	      	&quot;isPrimary&quot;: ${determination_isPrimary_3},&#xd;
	      	&quot;isFiledAs&quot;: ${determination_isFiledAs_3}&#xd;
	      }&#xd;
      ]&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/organism/${basic_organism_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Update Basic" enabled="true">
              <stringProp name="TestPlan.comments">Retrieves the basic record that was updated and asserts all values are set as expected</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Update Basic - Retrieve Basic Organism" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/organism/${basic_organism_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Update Basic - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.group == &quot;${user_group}&quot;
assert attr.isTarget == ${isTarget_3}
assert attr.lifeStage == &quot;${lifeStage_3}&quot;
assert attr.sex == &quot;${sex_3}&quot;
assert attr.remarks == &quot;${remarks_3}&quot;
assert attr.determination[0].verbatimScientificName  == &quot;${determination_verbatimScientificName_3}&quot;
assert attr.determination[0].verbatimDeterminer == &quot;${determination_verbatimDeterminer_3}&quot;
assert attr.determination[0].verbatimDate == &quot;${determination_verbatimDate_3}&quot;
assert attr.determination[0].transcriberRemarks == &quot;${determination_transcriberRemarks_3}&quot;
assert attr.determination[0].verbatimRemarks == &quot;${determination_verbatimRemarks_3}&quot;
assert attr.determination[0].determinationRemarks == &quot;${determination_determinationRemarks_3}&quot;
assert attr.determination[0].typeStatus == &quot;${determination_typeStatus_3}&quot;
assert attr.determination[0].typeStatusEvidence == &quot;${determination_typeStatusEvidence_3}&quot;
assert attr.determination[0].determiner == ${determination_determiner_3}
assert attr.determination[0].determinedOn == &quot;${determination_determinedOn_3}&quot;
assert attr.determination[0].qualifier == &quot;${determination_qualifier_3}&quot;
assert attr.determination[0].scientificNameSource == &quot;${determination_scientificNameSource_3}&quot;
assert attr.determination[0].scientificNameDetails.classificationPath == &quot;${determination_scientificNameDetails_classificationPath_3}&quot;
assert attr.determination[0].scientificNameDetails.classificationRanks == &quot;${determination_scientificNameDetails_classificationRanks_3}&quot;
assert attr.determination[0].scientificNameDetails.sourceUrl == &quot;${determination_scientificNameDetails_sourceUrl_3}&quot;
assert attr.determination[0].scientificNameDetails.labelHtml == &quot;${determination_scientificNameDetails_labelHtml_3}&quot;
assert attr.determination[0].scientificNameDetails.recordedOn == &quot;${determination_scientificNameDetails_recordedOn_3}&quot;
assert attr.determination[0].scientificNameDetails.currentName == &quot;${determination_scientificNameDetails_currentName_3}&quot;
assert attr.determination[0].scientificNameDetails.isSynonym == ${determination_scientificNameDetails_isSynonym_3}
assert attr.determination[0].isPrimary == true // Should automaticlly become true as it is only determination
assert attr.determination[0].isFiledAs == ${determination_isFiledAs_3}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Verbose" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose record and asserts that all fields are set as intended.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Verbose Organism" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;organism&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;isTarget&quot;: ${isTarget_4},&#xd;
      &quot;lifeStage&quot;: &quot;${lifeStage_4}&quot;,&#xd;
      &quot;sex&quot;: &quot;${sex_4}&quot;,&#xd;
      &quot;remarks&quot;: &quot;${remarks_4}&quot;,&#xd;
      &quot;determination&quot;: [&#xd;
	      {&#xd;
	      	&quot;verbatimScientificName&quot;: &quot;${determination_verbatimScientificName_4}&quot;,&#xd;
	      	&quot;verbatimDeterminer&quot;: &quot;${determination_verbatimDeterminer_4}&quot;,&#xd;
	      	&quot;verbatimDate&quot;: &quot;${determination_verbatimDate_4}&quot;,&#xd;
	      	&quot;scientificName&quot;: &quot;${determination_scientificName_4}&quot;,&#xd;
	      	&quot;transcriberRemarks&quot;: &quot;${determination_transcriberRemarks_4}&quot;,&#xd;
	      	&quot;verbatimRemarks&quot;: &quot;${determination_verbatimRemarks_4}&quot;,&#xd;
	      	&quot;determinationRemarks&quot;: &quot;${determination_determinationRemarks_4}&quot;,&#xd;
	      	&quot;typeStatus&quot;: &quot;${determination_typeStatus_4}&quot;,&#xd;
	      	&quot;typeStatusEvidence&quot;: &quot;${determination_typeStatusEvidence_4}&quot;,&#xd;
	      	&quot;determiner&quot;: ${determination_determiner_4},&#xd;
	      	&quot;determinedOn&quot;: &quot;${determination_determinedOn_4}&quot;,&#xd;
	      	&quot;qualifier&quot;: &quot;${determination_qualifier_4}&quot;,&#xd;
	      	&quot;scientificNameSource&quot;: &quot;${determination_scientificNameSource_4}&quot;,&#xd;
	      	&quot;scientificNameDetails&quot;: {&#xd;
	      		&quot;classificationPath&quot;: &quot;${determination_scientificNameDetails_classificationPath_4}&quot;,&#xd;
	      		&quot;classificationRanks&quot;: &quot;${determination_scientificNameDetails_classificationRanks_4}&quot;,&#xd;
	      		&quot;sourceUrl&quot;: &quot;${determination_scientificNameDetails_sourceUrl_4}&quot;,&#xd;
	      		&quot;labelHtml&quot;: &quot;${determination_scientificNameDetails_labelHtml_4}&quot;,&#xd;
	      		&quot;recordedOn&quot;: &quot;${determination_scientificNameDetails_recordedOn_4}&quot;,&#xd;
	      		&quot;currentName&quot;: &quot;${determination_scientificNameDetails_currentName_4}&quot;,&#xd;
	      		&quot;isSynonym&quot;: ${determination_scientificNameDetails_isSynonym_4}&#xd;
	      	},&#xd;
	      	&quot;isPrimary&quot;: ${determination_isPrimary_4},&#xd;
	      	&quot;isFiledAs&quot;: ${determination_isFiledAs_4}&#xd;
	      }&#xd;
      ]&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/organism/${verbose_organism_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Update Verbose" enabled="true">
              <stringProp name="TestPlan.comments">Retrieves the verbose record that was updated and asserts all values are set as expected</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Update Verbose - Retrieve Verbose Organism" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/organism/${verbose_organism_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Update Verbose - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.group == &quot;${user_group}&quot;
assert attr.isTarget == ${isTarget_4}
assert attr.lifeStage == &quot;${lifeStage_4}&quot;
assert attr.sex == &quot;${sex_4}&quot;
assert attr.remarks == &quot;${remarks_4}&quot;
assert attr.determination[0].verbatimScientificName  == &quot;${determination_verbatimScientificName_4}&quot;
assert attr.determination[0].verbatimDeterminer == &quot;${determination_verbatimDeterminer_4}&quot;
assert attr.determination[0].verbatimDate == &quot;${determination_verbatimDate_4}&quot;
assert attr.determination[0].scientificName == &quot;${determination_scientificName_4}&quot;
assert attr.determination[0].transcriberRemarks == &quot;${determination_transcriberRemarks_4}&quot;
assert attr.determination[0].verbatimRemarks == &quot;${determination_verbatimRemarks_4}&quot;
assert attr.determination[0].determinationRemarks == &quot;${determination_determinationRemarks_4}&quot;
assert attr.determination[0].typeStatus == &quot;${determination_typeStatus_4}&quot;
assert attr.determination[0].typeStatusEvidence == &quot;${determination_typeStatusEvidence_4}&quot;
assert attr.determination[0].determiner == ${determination_determiner_4}
assert attr.determination[0].determinedOn == &quot;${determination_determinedOn_4}&quot;
assert attr.determination[0].qualifier == &quot;${determination_qualifier_4}&quot;
assert attr.determination[0].scientificNameSource == &quot;${determination_scientificNameSource_4}&quot;
assert attr.determination[0].scientificNameDetails.classificationPath == &quot;${determination_scientificNameDetails_classificationPath_4}&quot;
assert attr.determination[0].scientificNameDetails.classificationRanks == &quot;${determination_scientificNameDetails_classificationRanks_4}&quot;
assert attr.determination[0].scientificNameDetails.sourceUrl == &quot;${determination_scientificNameDetails_sourceUrl_4}&quot;
assert attr.determination[0].scientificNameDetails.labelHtml == &quot;${determination_scientificNameDetails_labelHtml_4}&quot;
assert attr.determination[0].scientificNameDetails.recordedOn == &quot;${determination_scientificNameDetails_recordedOn_4}&quot;
assert attr.determination[0].scientificNameDetails.currentName == &quot;${determination_scientificNameDetails_currentName_4}&quot;
assert attr.determination[0].scientificNameDetails.isSynonym == ${determination_scientificNameDetails_isSynonym_4}
assert attr.determination[0].isPrimary == true // Should automaticlly become true as it is only determination
assert attr.determination[0].isFiledAs == ${determination_isFiledAs_4}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Verbose - Empty Body" enabled="true">
            <stringProp name="TestPlan.comments">Updates the verbose record while providing no fields to update and asserts that no changes were made.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Verbose Organism" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;organism&quot;,&#xd;
    &quot;attributes&quot;: {}&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/organism/${verbose_organism_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Update Verbose - Empty Body" enabled="true">
              <stringProp name="TestPlan.comments">Retrieves the verbose record that was updated and asserts all values are set as expected.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Update Verbose - Empty Body - Retrieve Verbose Organism" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/organism/${verbose_organism_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 200" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Update Verbose - General Assertions" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">def jsonSlurper = new groovy.json.JsonSlurper()
def object = jsonSlurper.parseText(prev.getResponseDataAsString())

def attr = object.data.attributes

assert attr.group == &quot;${user_group}&quot;
assert attr.isTarget == ${isTarget_4}
assert attr.lifeStage == &quot;${lifeStage_4}&quot;
assert attr.sex == &quot;${sex_4}&quot;
assert attr.remarks == &quot;${remarks_4}&quot;
assert attr.determination[0].verbatimScientificName  == &quot;${determination_verbatimScientificName_4}&quot;
assert attr.determination[0].verbatimDeterminer == &quot;${determination_verbatimDeterminer_4}&quot;
assert attr.determination[0].verbatimDate == &quot;${determination_verbatimDate_4}&quot;
assert attr.determination[0].scientificName == &quot;${determination_scientificName_4}&quot;
assert attr.determination[0].transcriberRemarks == &quot;${determination_transcriberRemarks_4}&quot;
assert attr.determination[0].verbatimRemarks == &quot;${determination_verbatimRemarks_4}&quot;
assert attr.determination[0].determinationRemarks == &quot;${determination_determinationRemarks_4}&quot;
assert attr.determination[0].typeStatus == &quot;${determination_typeStatus_4}&quot;
assert attr.determination[0].typeStatusEvidence == &quot;${determination_typeStatusEvidence_4}&quot;
assert attr.determination[0].determiner == ${determination_determiner_4}
assert attr.determination[0].determinedOn == &quot;${determination_determinedOn_4}&quot;
assert attr.determination[0].qualifier == &quot;${determination_qualifier_4}&quot;
assert attr.determination[0].scientificNameSource == &quot;${determination_scientificNameSource_4}&quot;
assert attr.determination[0].scientificNameDetails.classificationPath == &quot;${determination_scientificNameDetails_classificationPath_4}&quot;
assert attr.determination[0].scientificNameDetails.classificationRanks == &quot;${determination_scientificNameDetails_classificationRanks_4}&quot;
assert attr.determination[0].scientificNameDetails.sourceUrl == &quot;${determination_scientificNameDetails_sourceUrl_4}&quot;
assert attr.determination[0].scientificNameDetails.labelHtml == &quot;${determination_scientificNameDetails_labelHtml_4}&quot;
assert attr.determination[0].scientificNameDetails.recordedOn == &quot;${determination_scientificNameDetails_recordedOn_4}&quot;
assert attr.determination[0].scientificNameDetails.currentName == &quot;${determination_scientificNameDetails_currentName_4}&quot;
assert attr.determination[0].scientificNameDetails.isSynonym == ${determination_scientificNameDetails_isSynonym_4}
assert attr.determination[0].isPrimary == true // Should automaticlly become true as it is only determination
assert attr.determination[0].isFiledAs == ${determination_isFiledAs_4}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Invalid UUID" enabled="true">
            <stringProp name="TestPlan.comments">Attempts to update a record with an invalid UUID specified and asserts the expected error.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PATCH - Update Invalid Organism" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;type&quot;: &quot;organism&quot;,&#xd;
    &quot;attributes&quot;: {&#xd;
      &quot;group&quot;: &quot;${user_group}&quot;,&#xd;
      &quot;isTarget&quot;: ${isTarget_3},&#xd;
      &quot;lifeStage&quot;: &quot;${lifeStage_3}&quot;,&#xd;
      &quot;sex&quot;: &quot;${sex_3}&quot;,&#xd;
      &quot;remarks&quot;: &quot;${remarks_3}&quot;,&#xd;
      &quot;determination&quot;: [&#xd;
	      {&#xd;
	      	&quot;verbatimScientificName&quot;: &quot;${determination_verbatimScientificName_3}&quot;,&#xd;
	      	&quot;verbatimDeterminer&quot;: &quot;${determination_verbatimDeterminer_3}&quot;,&#xd;
	      	&quot;verbatimDate&quot;: &quot;${determination_verbatimDate_3}&quot;,&#xd;
	      	&quot;transcriberRemarks&quot;: &quot;${determination_transcriberRemarks_3}&quot;,&#xd;
	      	&quot;verbatimRemarks&quot;: &quot;${determination_verbatimRemarks_3}&quot;,&#xd;
	      	&quot;determinationRemarks&quot;: &quot;${determination_determinationRemarks_3}&quot;,&#xd;
	      	&quot;typeStatus&quot;: &quot;${determination_typeStatus_3}&quot;,&#xd;
	      	&quot;typeStatusEvidence&quot;: &quot;${determination_typeStatusEvidence_3}&quot;,&#xd;
	      	&quot;determiner&quot;: ${determination_determiner_3},&#xd;
	      	&quot;determinedOn&quot;: &quot;${determination_determinedOn_3}&quot;,&#xd;
	      	&quot;qualifier&quot;: &quot;${determination_qualifier_3}&quot;,&#xd;
	      	&quot;scientificNameSource&quot;: &quot;${determination_scientificNameSource_3}&quot;,&#xd;
	      	&quot;scientificNameDetails&quot;: {&#xd;
	      		&quot;classificationPath&quot;: &quot;${determination_scientificNameDetails_classificationPath_3}&quot;,&#xd;
	      		&quot;classificationRanks&quot;: &quot;${determination_scientificNameDetails_classificationRanks_3}&quot;,&#xd;
	      		&quot;sourceUrl&quot;: &quot;${determination_scientificNameDetails_sourceUrl_3}&quot;,&#xd;
	      		&quot;labelHtml&quot;: &quot;${determination_scientificNameDetails_labelHtml_3}&quot;,&#xd;
	      		&quot;recordedOn&quot;: &quot;${determination_scientificNameDetails_recordedOn_3}&quot;,&#xd;
	      		&quot;currentName&quot;: &quot;${determination_scientificNameDetails_currentName_3}&quot;,&#xd;
	      		&quot;isSynonym&quot;: ${determination_scientificNameDetails_isSynonym_3}&#xd;
	      	},&#xd;
	      	&quot;isPrimary&quot;: ${determination_isPrimary_3},&#xd;
	      	&quot;isFiledAs&quot;: ${determination_isFiledAs_3}&#xd;
	      }&#xd;
      ]&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/organism/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete Organism" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete Basic" enabled="true">
            <stringProp name="TestPlan.comments">Deletes the basic record and asserts that the record was properly removed.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Basic Organism" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/organism/${basic_organism_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Delete Basic" enabled="true">
              <stringProp name="TestPlan.comments">Attempts to retrieve the deleted basic record and asserts that the correct response is returned.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Delete Basic - Retrieve Basic Organism" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/organism/${basic_organism_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 410 Error" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;410&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete Verbose" enabled="true">
            <stringProp name="TestPlan.comments">Deletes the verbose record and asserts that the record was properly removed.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Verbose Organism" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/organism/${verbose_organism_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code Assertion - 204" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49590">204</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Validate Delete Verbose" enabled="true">
              <stringProp name="TestPlan.comments">Attempts to retrieve the deleted verbose record and asserts that the correct response is returned.</stringProp>
            </GenericController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET - Validate Delete Verbose - Retrieve Verbose Organism" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.path">/api/collection-api/organism/${verbose_organism_uuid}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
                <boolProp name="HTTPSampler.image_parser">false</boolProp>
                <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <boolProp name="HTTPSampler.md5">false</boolProp>
                <intProp name="HTTPSampler.ipSourceType">0</intProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 410 Error" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;410&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                  <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete Invalid UUID" enabled="true">
            <stringProp name="TestPlan.comments">Attempts to delete a record with an invalid UUID specified and asserts the expected error.</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE - Remove Invalid Organism" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.path">/api/collection-api/organism/${invalid_uuid}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="HTTP Request Override - 404 Error" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">if (prev.getResponseDataAsString().contains(&quot;errors&quot;) &amp;&amp; prev.getResponseCode() == &quot;404&quot;) {
	prev.setSuccessful(true)
}</stringProp>
                <stringProp name="TestPlan.comments">Allows the listener to interpret the previous sample as successful if conditions are met</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
